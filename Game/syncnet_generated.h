// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SYNCNET_SYNCNET_H_
#define FLATBUFFERS_GENERATED_SYNCNET_SYNCNET_H_

#include "flatbuffers/flatbuffers.h"

namespace syncnet {

struct vec3;

struct movement;
struct movementBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  vec3() {
    memset(static_cast<void *>(this), 0, sizeof(vec3));
  }
  vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(vec3, 12);

struct movement FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef movementBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIR = 4,
    VT_ELAPSED_TIME = 6
  };
  const syncnet::vec3 *dir() const {
    return GetStruct<const syncnet::vec3 *>(VT_DIR);
  }
  float elapsed_time() const {
    return GetField<float>(VT_ELAPSED_TIME, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<syncnet::vec3>(verifier, VT_DIR) &&
           VerifyField<float>(verifier, VT_ELAPSED_TIME) &&
           verifier.EndTable();
  }
};

struct movementBuilder {
  typedef movement Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dir(const syncnet::vec3 *dir) {
    fbb_.AddStruct(movement::VT_DIR, dir);
  }
  void add_elapsed_time(float elapsed_time) {
    fbb_.AddElement<float>(movement::VT_ELAPSED_TIME, elapsed_time, 0.0f);
  }
  explicit movementBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  movementBuilder &operator=(const movementBuilder &);
  flatbuffers::Offset<movement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<movement>(end);
    return o;
  }
};

inline flatbuffers::Offset<movement> Createmovement(
    flatbuffers::FlatBufferBuilder &_fbb,
    const syncnet::vec3 *dir = 0,
    float elapsed_time = 0.0f) {
  movementBuilder builder_(_fbb);
  builder_.add_elapsed_time(elapsed_time);
  builder_.add_dir(dir);
  return builder_.Finish();
}

}  // namespace syncnet

#endif  // FLATBUFFERS_GENERATED_SYNCNET_SYNCNET_H_
