// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SYNCNET_SYNCNET_H_
#define FLATBUFFERS_GENERATED_SYNCNET_SYNCNET_H_

#include "flatbuffers/flatbuffers.h"

namespace syncnet {

struct Vec3;

struct GameMessage;
struct GameMessageBuilder;

struct AddAgent;
struct AddAgentBuilder;

struct RemoveAgent;
struct RemoveAgentBuilder;

struct SetMoveTarget;
struct SetMoveTargetBuilder;

struct AgentInfo;
struct AgentInfoBuilder;

struct DebugRaycast;
struct DebugRaycastBuilder;

struct GetAgents;
struct GetAgentsBuilder;

struct Ping;
struct PingBuilder;

struct SetRaycast;
struct SetRaycastBuilder;

struct Login;
struct LoginBuilder;

enum GameMessages {
  GameMessages_NONE = 0,
  GameMessages_AddAgent = 1,
  GameMessages_RemoveAgent = 2,
  GameMessages_SetMoveTarget = 3,
  GameMessages_AgentInfo = 4,
  GameMessages_GetAgents = 5,
  GameMessages_Ping = 6,
  GameMessages_SetRaycast = 7,
  GameMessages_Login = 8,
  GameMessages_MIN = GameMessages_NONE,
  GameMessages_MAX = GameMessages_Login
};

inline const GameMessages (&EnumValuesGameMessages())[9] {
  static const GameMessages values[] = {
    GameMessages_NONE,
    GameMessages_AddAgent,
    GameMessages_RemoveAgent,
    GameMessages_SetMoveTarget,
    GameMessages_AgentInfo,
    GameMessages_GetAgents,
    GameMessages_Ping,
    GameMessages_SetRaycast,
    GameMessages_Login
  };
  return values;
}

inline const char * const *EnumNamesGameMessages() {
  static const char * const names[10] = {
    "NONE",
    "AddAgent",
    "RemoveAgent",
    "SetMoveTarget",
    "AgentInfo",
    "GetAgents",
    "Ping",
    "SetRaycast",
    "Login",
    nullptr
  };
  return names;
}

inline const char *EnumNameGameMessages(GameMessages e) {
  if (flatbuffers::IsOutRange(e, GameMessages_NONE, GameMessages_Login)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGameMessages()[index];
}

template<typename T> struct GameMessagesTraits {
  static const GameMessages enum_value = GameMessages_NONE;
};

template<> struct GameMessagesTraits<syncnet::AddAgent> {
  static const GameMessages enum_value = GameMessages_AddAgent;
};

template<> struct GameMessagesTraits<syncnet::RemoveAgent> {
  static const GameMessages enum_value = GameMessages_RemoveAgent;
};

template<> struct GameMessagesTraits<syncnet::SetMoveTarget> {
  static const GameMessages enum_value = GameMessages_SetMoveTarget;
};

template<> struct GameMessagesTraits<syncnet::AgentInfo> {
  static const GameMessages enum_value = GameMessages_AgentInfo;
};

template<> struct GameMessagesTraits<syncnet::GetAgents> {
  static const GameMessages enum_value = GameMessages_GetAgents;
};

template<> struct GameMessagesTraits<syncnet::Ping> {
  static const GameMessages enum_value = GameMessages_Ping;
};

template<> struct GameMessagesTraits<syncnet::SetRaycast> {
  static const GameMessages enum_value = GameMessages_SetRaycast;
};

template<> struct GameMessagesTraits<syncnet::Login> {
  static const GameMessages enum_value = GameMessages_Login;
};

bool VerifyGameMessages(flatbuffers::Verifier &verifier, const void *obj, GameMessages type);
bool VerifyGameMessagesVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum GameObjectType {
  GameObjectType_Character = 0,
  GameObjectType_Monster = 1,
  GameObjectType_MIN = GameObjectType_Character,
  GameObjectType_MAX = GameObjectType_Monster
};

inline const GameObjectType (&EnumValuesGameObjectType())[2] {
  static const GameObjectType values[] = {
    GameObjectType_Character,
    GameObjectType_Monster
  };
  return values;
}

inline const char * const *EnumNamesGameObjectType() {
  static const char * const names[3] = {
    "Character",
    "Monster",
    nullptr
  };
  return names;
}

inline const char *EnumNameGameObjectType(GameObjectType e) {
  if (flatbuffers::IsOutRange(e, GameObjectType_Character, GameObjectType_Monster)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGameObjectType()[index];
}

enum AIState {
  AIState_Patrol = 0,
  AIState_Detect = 1,
  AIState_Attack = 2,
  AIState_MIN = AIState_Patrol,
  AIState_MAX = AIState_Attack
};

inline const AIState (&EnumValuesAIState())[3] {
  static const AIState values[] = {
    AIState_Patrol,
    AIState_Detect,
    AIState_Attack
  };
  return values;
}

inline const char * const *EnumNamesAIState() {
  static const char * const names[4] = {
    "Patrol",
    "Detect",
    "Attack",
    nullptr
  };
  return names;
}

inline const char *EnumNameAIState(AIState e) {
  if (flatbuffers::IsOutRange(e, AIState_Patrol, AIState_Attack)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAIState()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(static_cast<void *>(this), 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct GameMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GameMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG_TYPE = 4,
    VT_MSG = 6
  };
  syncnet::GameMessages msg_type() const {
    return static_cast<syncnet::GameMessages>(GetField<uint8_t>(VT_MSG_TYPE, 0));
  }
  const void *msg() const {
    return GetPointer<const void *>(VT_MSG);
  }
  template<typename T> const T *msg_as() const;
  const syncnet::AddAgent *msg_as_AddAgent() const {
    return msg_type() == syncnet::GameMessages_AddAgent ? static_cast<const syncnet::AddAgent *>(msg()) : nullptr;
  }
  const syncnet::RemoveAgent *msg_as_RemoveAgent() const {
    return msg_type() == syncnet::GameMessages_RemoveAgent ? static_cast<const syncnet::RemoveAgent *>(msg()) : nullptr;
  }
  const syncnet::SetMoveTarget *msg_as_SetMoveTarget() const {
    return msg_type() == syncnet::GameMessages_SetMoveTarget ? static_cast<const syncnet::SetMoveTarget *>(msg()) : nullptr;
  }
  const syncnet::AgentInfo *msg_as_AgentInfo() const {
    return msg_type() == syncnet::GameMessages_AgentInfo ? static_cast<const syncnet::AgentInfo *>(msg()) : nullptr;
  }
  const syncnet::GetAgents *msg_as_GetAgents() const {
    return msg_type() == syncnet::GameMessages_GetAgents ? static_cast<const syncnet::GetAgents *>(msg()) : nullptr;
  }
  const syncnet::Ping *msg_as_Ping() const {
    return msg_type() == syncnet::GameMessages_Ping ? static_cast<const syncnet::Ping *>(msg()) : nullptr;
  }
  const syncnet::SetRaycast *msg_as_SetRaycast() const {
    return msg_type() == syncnet::GameMessages_SetRaycast ? static_cast<const syncnet::SetRaycast *>(msg()) : nullptr;
  }
  const syncnet::Login *msg_as_Login() const {
    return msg_type() == syncnet::GameMessages_Login ? static_cast<const syncnet::Login *>(msg()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MSG_TYPE) &&
           VerifyOffset(verifier, VT_MSG) &&
           VerifyGameMessages(verifier, msg(), msg_type()) &&
           verifier.EndTable();
  }
};

template<> inline const syncnet::AddAgent *GameMessage::msg_as<syncnet::AddAgent>() const {
  return msg_as_AddAgent();
}

template<> inline const syncnet::RemoveAgent *GameMessage::msg_as<syncnet::RemoveAgent>() const {
  return msg_as_RemoveAgent();
}

template<> inline const syncnet::SetMoveTarget *GameMessage::msg_as<syncnet::SetMoveTarget>() const {
  return msg_as_SetMoveTarget();
}

template<> inline const syncnet::AgentInfo *GameMessage::msg_as<syncnet::AgentInfo>() const {
  return msg_as_AgentInfo();
}

template<> inline const syncnet::GetAgents *GameMessage::msg_as<syncnet::GetAgents>() const {
  return msg_as_GetAgents();
}

template<> inline const syncnet::Ping *GameMessage::msg_as<syncnet::Ping>() const {
  return msg_as_Ping();
}

template<> inline const syncnet::SetRaycast *GameMessage::msg_as<syncnet::SetRaycast>() const {
  return msg_as_SetRaycast();
}

template<> inline const syncnet::Login *GameMessage::msg_as<syncnet::Login>() const {
  return msg_as_Login();
}

struct GameMessageBuilder {
  typedef GameMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_type(syncnet::GameMessages msg_type) {
    fbb_.AddElement<uint8_t>(GameMessage::VT_MSG_TYPE, static_cast<uint8_t>(msg_type), 0);
  }
  void add_msg(flatbuffers::Offset<void> msg) {
    fbb_.AddOffset(GameMessage::VT_MSG, msg);
  }
  explicit GameMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GameMessageBuilder &operator=(const GameMessageBuilder &);
  flatbuffers::Offset<GameMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GameMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<GameMessage> CreateGameMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    syncnet::GameMessages msg_type = syncnet::GameMessages_NONE,
    flatbuffers::Offset<void> msg = 0) {
  GameMessageBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_msg_type(msg_type);
  return builder_.Finish();
}

struct AddAgent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AddAgentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GAMEOBJECTTYPE = 4,
    VT_POS = 6
  };
  syncnet::GameObjectType gameObjectType() const {
    return static_cast<syncnet::GameObjectType>(GetField<int8_t>(VT_GAMEOBJECTTYPE, 1));
  }
  const syncnet::Vec3 *pos() const {
    return GetStruct<const syncnet::Vec3 *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_GAMEOBJECTTYPE) &&
           VerifyField<syncnet::Vec3>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct AddAgentBuilder {
  typedef AddAgent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gameObjectType(syncnet::GameObjectType gameObjectType) {
    fbb_.AddElement<int8_t>(AddAgent::VT_GAMEOBJECTTYPE, static_cast<int8_t>(gameObjectType), 1);
  }
  void add_pos(const syncnet::Vec3 *pos) {
    fbb_.AddStruct(AddAgent::VT_POS, pos);
  }
  explicit AddAgentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddAgentBuilder &operator=(const AddAgentBuilder &);
  flatbuffers::Offset<AddAgent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddAgent>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddAgent> CreateAddAgent(
    flatbuffers::FlatBufferBuilder &_fbb,
    syncnet::GameObjectType gameObjectType = syncnet::GameObjectType_Monster,
    const syncnet::Vec3 *pos = 0) {
  AddAgentBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_gameObjectType(gameObjectType);
  return builder_.Finish();
}

struct RemoveAgent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RemoveAgentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGENTID = 4
  };
  int32_t agentId() const {
    return GetField<int32_t>(VT_AGENTID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AGENTID) &&
           verifier.EndTable();
  }
};

struct RemoveAgentBuilder {
  typedef RemoveAgent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_agentId(int32_t agentId) {
    fbb_.AddElement<int32_t>(RemoveAgent::VT_AGENTID, agentId, 0);
  }
  explicit RemoveAgentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveAgentBuilder &operator=(const RemoveAgentBuilder &);
  flatbuffers::Offset<RemoveAgent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveAgent>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveAgent> CreateRemoveAgent(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t agentId = 0) {
  RemoveAgentBuilder builder_(_fbb);
  builder_.add_agentId(agentId);
  return builder_.Finish();
}

struct SetMoveTarget FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SetMoveTargetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGENTID = 4,
    VT_POS = 6
  };
  int32_t agentId() const {
    return GetField<int32_t>(VT_AGENTID, 0);
  }
  const syncnet::Vec3 *pos() const {
    return GetStruct<const syncnet::Vec3 *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AGENTID) &&
           VerifyField<syncnet::Vec3>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct SetMoveTargetBuilder {
  typedef SetMoveTarget Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_agentId(int32_t agentId) {
    fbb_.AddElement<int32_t>(SetMoveTarget::VT_AGENTID, agentId, 0);
  }
  void add_pos(const syncnet::Vec3 *pos) {
    fbb_.AddStruct(SetMoveTarget::VT_POS, pos);
  }
  explicit SetMoveTargetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetMoveTargetBuilder &operator=(const SetMoveTargetBuilder &);
  flatbuffers::Offset<SetMoveTarget> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetMoveTarget>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetMoveTarget> CreateSetMoveTarget(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t agentId = 0,
    const syncnet::Vec3 *pos = 0) {
  SetMoveTargetBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_agentId(agentId);
  return builder_.Finish();
}

struct AgentInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AgentInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGENTID = 4,
    VT_POS = 6,
    VT_GAMEOBJECTTYPE = 8,
    VT_STATE = 10
  };
  int32_t agentId() const {
    return GetField<int32_t>(VT_AGENTID, 0);
  }
  const syncnet::Vec3 *pos() const {
    return GetStruct<const syncnet::Vec3 *>(VT_POS);
  }
  syncnet::GameObjectType gameObjectType() const {
    return static_cast<syncnet::GameObjectType>(GetField<int8_t>(VT_GAMEOBJECTTYPE, 1));
  }
  syncnet::AIState state() const {
    return static_cast<syncnet::AIState>(GetField<int8_t>(VT_STATE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AGENTID) &&
           VerifyField<syncnet::Vec3>(verifier, VT_POS) &&
           VerifyField<int8_t>(verifier, VT_GAMEOBJECTTYPE) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct AgentInfoBuilder {
  typedef AgentInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_agentId(int32_t agentId) {
    fbb_.AddElement<int32_t>(AgentInfo::VT_AGENTID, agentId, 0);
  }
  void add_pos(const syncnet::Vec3 *pos) {
    fbb_.AddStruct(AgentInfo::VT_POS, pos);
  }
  void add_gameObjectType(syncnet::GameObjectType gameObjectType) {
    fbb_.AddElement<int8_t>(AgentInfo::VT_GAMEOBJECTTYPE, static_cast<int8_t>(gameObjectType), 1);
  }
  void add_state(syncnet::AIState state) {
    fbb_.AddElement<int8_t>(AgentInfo::VT_STATE, static_cast<int8_t>(state), 0);
  }
  explicit AgentInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AgentInfoBuilder &operator=(const AgentInfoBuilder &);
  flatbuffers::Offset<AgentInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AgentInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<AgentInfo> CreateAgentInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t agentId = 0,
    const syncnet::Vec3 *pos = 0,
    syncnet::GameObjectType gameObjectType = syncnet::GameObjectType_Monster,
    syncnet::AIState state = syncnet::AIState_Patrol) {
  AgentInfoBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_agentId(agentId);
  builder_.add_state(state);
  builder_.add_gameObjectType(gameObjectType);
  return builder_.Finish();
}

struct DebugRaycast FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DebugRaycastBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STARTPOS = 4,
    VT_ENDPOS = 6
  };
  const syncnet::Vec3 *startPos() const {
    return GetStruct<const syncnet::Vec3 *>(VT_STARTPOS);
  }
  const syncnet::Vec3 *endPos() const {
    return GetStruct<const syncnet::Vec3 *>(VT_ENDPOS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<syncnet::Vec3>(verifier, VT_STARTPOS) &&
           VerifyField<syncnet::Vec3>(verifier, VT_ENDPOS) &&
           verifier.EndTable();
  }
};

struct DebugRaycastBuilder {
  typedef DebugRaycast Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_startPos(const syncnet::Vec3 *startPos) {
    fbb_.AddStruct(DebugRaycast::VT_STARTPOS, startPos);
  }
  void add_endPos(const syncnet::Vec3 *endPos) {
    fbb_.AddStruct(DebugRaycast::VT_ENDPOS, endPos);
  }
  explicit DebugRaycastBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DebugRaycastBuilder &operator=(const DebugRaycastBuilder &);
  flatbuffers::Offset<DebugRaycast> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DebugRaycast>(end);
    return o;
  }
};

inline flatbuffers::Offset<DebugRaycast> CreateDebugRaycast(
    flatbuffers::FlatBufferBuilder &_fbb,
    const syncnet::Vec3 *startPos = 0,
    const syncnet::Vec3 *endPos = 0) {
  DebugRaycastBuilder builder_(_fbb);
  builder_.add_endPos(endPos);
  builder_.add_startPos(startPos);
  return builder_.Finish();
}

struct GetAgents FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GetAgentsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGENTS = 4,
    VT_DEBUGS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<syncnet::AgentInfo>> *agents() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<syncnet::AgentInfo>> *>(VT_AGENTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<syncnet::DebugRaycast>> *debugs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<syncnet::DebugRaycast>> *>(VT_DEBUGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AGENTS) &&
           verifier.VerifyVector(agents()) &&
           verifier.VerifyVectorOfTables(agents()) &&
           VerifyOffset(verifier, VT_DEBUGS) &&
           verifier.VerifyVector(debugs()) &&
           verifier.VerifyVectorOfTables(debugs()) &&
           verifier.EndTable();
  }
};

struct GetAgentsBuilder {
  typedef GetAgents Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_agents(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<syncnet::AgentInfo>>> agents) {
    fbb_.AddOffset(GetAgents::VT_AGENTS, agents);
  }
  void add_debugs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<syncnet::DebugRaycast>>> debugs) {
    fbb_.AddOffset(GetAgents::VT_DEBUGS, debugs);
  }
  explicit GetAgentsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetAgentsBuilder &operator=(const GetAgentsBuilder &);
  flatbuffers::Offset<GetAgents> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetAgents>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetAgents> CreateGetAgents(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<syncnet::AgentInfo>>> agents = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<syncnet::DebugRaycast>>> debugs = 0) {
  GetAgentsBuilder builder_(_fbb);
  builder_.add_debugs(debugs);
  builder_.add_agents(agents);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetAgents> CreateGetAgentsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<syncnet::AgentInfo>> *agents = nullptr,
    const std::vector<flatbuffers::Offset<syncnet::DebugRaycast>> *debugs = nullptr) {
  auto agents__ = agents ? _fbb.CreateVector<flatbuffers::Offset<syncnet::AgentInfo>>(*agents) : 0;
  auto debugs__ = debugs ? _fbb.CreateVector<flatbuffers::Offset<syncnet::DebugRaycast>>(*debugs) : 0;
  return syncnet::CreateGetAgents(
      _fbb,
      agents__,
      debugs__);
}

struct Ping FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEQ = 4
  };
  int32_t seq() const {
    return GetField<int32_t>(VT_SEQ, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SEQ) &&
           verifier.EndTable();
  }
};

struct PingBuilder {
  typedef Ping Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_seq(int32_t seq) {
    fbb_.AddElement<int32_t>(Ping::VT_SEQ, seq, 0);
  }
  explicit PingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PingBuilder &operator=(const PingBuilder &);
  flatbuffers::Offset<Ping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Ping>(end);
    return o;
  }
};

inline flatbuffers::Offset<Ping> CreatePing(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t seq = 0) {
  PingBuilder builder_(_fbb);
  builder_.add_seq(seq);
  return builder_.Finish();
}

struct SetRaycast FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SetRaycastBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGENTID = 4,
    VT_POS = 6
  };
  int32_t agentId() const {
    return GetField<int32_t>(VT_AGENTID, 0);
  }
  const syncnet::Vec3 *pos() const {
    return GetStruct<const syncnet::Vec3 *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_AGENTID) &&
           VerifyField<syncnet::Vec3>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct SetRaycastBuilder {
  typedef SetRaycast Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_agentId(int32_t agentId) {
    fbb_.AddElement<int32_t>(SetRaycast::VT_AGENTID, agentId, 0);
  }
  void add_pos(const syncnet::Vec3 *pos) {
    fbb_.AddStruct(SetRaycast::VT_POS, pos);
  }
  explicit SetRaycastBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetRaycastBuilder &operator=(const SetRaycastBuilder &);
  flatbuffers::Offset<SetRaycast> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetRaycast>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetRaycast> CreateSetRaycast(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t agentId = 0,
    const syncnet::Vec3 *pos = 0) {
  SetRaycastBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_agentId(agentId);
  return builder_.Finish();
}

struct Login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_PASSWORD = 6
  };
  const flatbuffers::String *userId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(userId()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct LoginBuilder {
  typedef Login Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_userId(flatbuffers::Offset<flatbuffers::String> userId) {
    fbb_.AddOffset(Login::VT_USERID, userId);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(Login::VT_PASSWORD, password);
  }
  explicit LoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginBuilder &operator=(const LoginBuilder &);
  flatbuffers::Offset<Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Login>(end);
    return o;
  }
};

inline flatbuffers::Offset<Login> CreateLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> userId = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0) {
  LoginBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_userId(userId);
  return builder_.Finish();
}

inline flatbuffers::Offset<Login> CreateLoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *userId = nullptr,
    const char *password = nullptr) {
  auto userId__ = userId ? _fbb.CreateString(userId) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return syncnet::CreateLogin(
      _fbb,
      userId__,
      password__);
}

inline bool VerifyGameMessages(flatbuffers::Verifier &verifier, const void *obj, GameMessages type) {
  switch (type) {
    case GameMessages_NONE: {
      return true;
    }
    case GameMessages_AddAgent: {
      auto ptr = reinterpret_cast<const syncnet::AddAgent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GameMessages_RemoveAgent: {
      auto ptr = reinterpret_cast<const syncnet::RemoveAgent *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GameMessages_SetMoveTarget: {
      auto ptr = reinterpret_cast<const syncnet::SetMoveTarget *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GameMessages_AgentInfo: {
      auto ptr = reinterpret_cast<const syncnet::AgentInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GameMessages_GetAgents: {
      auto ptr = reinterpret_cast<const syncnet::GetAgents *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GameMessages_Ping: {
      auto ptr = reinterpret_cast<const syncnet::Ping *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GameMessages_SetRaycast: {
      auto ptr = reinterpret_cast<const syncnet::SetRaycast *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GameMessages_Login: {
      auto ptr = reinterpret_cast<const syncnet::Login *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyGameMessagesVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyGameMessages(
        verifier,  values->Get(i), types->GetEnum<GameMessages>(i))) {
      return false;
    }
  }
  return true;
}

inline const syncnet::GameMessage *GetGameMessage(const void *buf) {
  return flatbuffers::GetRoot<syncnet::GameMessage>(buf);
}

inline const syncnet::GameMessage *GetSizePrefixedGameMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<syncnet::GameMessage>(buf);
}

inline bool VerifyGameMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<syncnet::GameMessage>(nullptr);
}

inline bool VerifySizePrefixedGameMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<syncnet::GameMessage>(nullptr);
}

inline void FinishGameMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<syncnet::GameMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<syncnet::GameMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace syncnet

#endif  // FLATBUFFERS_GENERATED_SYNCNET_SYNCNET_H_
