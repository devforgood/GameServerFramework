<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpNav</name>
    </assembly>
    <members>
        <member name="T:SharpNav.Area">
            <summary>
            An area groups together pieces of data through the navmesh generation process.
            </summary>
        </member>
        <member name="F:SharpNav.Area.MaxValues">
            <summary>
            The maximum number of areas that can be defined.
            </summary>
        </member>
        <member name="F:SharpNav.Area.Null">
            <summary>
            The null area is one that is considered unwalkable.
            </summary>
        </member>
        <member name="F:SharpNav.Area.Default">
            <summary>
            This is a default <see cref="T:SharpNav.Area"/> in the event that the user does not provide one.
            </summary>
            <remarks>
            If a user only applies IDs to some parts of a <see cref="T:SharpNav.Heightfield"/>, they will most likely choose low
            integer values. Choosing the maximum value makes it unlikely for the "default" area to collide with any
            user-defined areas.
            </remarks>
        </member>
        <member name="F:SharpNav.Area.Id">
            <summary>
            The identifier for an area, represented as a byte.
            </summary>
        </member>
        <member name="M:SharpNav.Area.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Area"/> struct.
            </summary>
            <param name="id">An identifier for the area.</param>
        </member>
        <member name="P:SharpNav.Area.IsWalkable">
            <summary>
            Gets a value indicating whether the area is considered walkable (not <see cref="F:SharpNav.Area.Null"/>).
            </summary>
        </member>
        <member name="M:SharpNav.Area.op_Implicit(System.Byte)~SharpNav.Area">
            <summary>
            Implicitly casts a byte to an Area. This is included since an Area is a very thin wrapper around a byte.
            </summary>
            <param name="value">The identifier for an area.</param>
            <returns>An area with the specified identifier.</returns>
        </member>
        <member name="M:SharpNav.Area.op_Equality(SharpNav.Area,SharpNav.Area)">
            <summary>
            Compares two areas for equality.
            </summary>
            <param name="left">An <see cref="T:SharpNav.Area"/>.</param>
            <param name="right">Another <see cref="T:SharpNav.Area"/></param>
            <returns>A value indicating whether the two <see cref="T:SharpNav.Area"/>s are equal.</returns>
        </member>
        <member name="M:SharpNav.Area.op_Inequality(SharpNav.Area,SharpNav.Area)">
            <summary>
            Compares two areas for inequality.
            </summary>
            <param name="left">An <see cref="T:SharpNav.Area"/>.</param>
            <param name="right">Another <see cref="T:SharpNav.Area"/></param>
            <returns>A value indicating whether the two <see cref="T:SharpNav.Area"/>s are unequal.</returns>
        </member>
        <member name="M:SharpNav.Area.Equals(SharpNav.Area)">
            <summary>
            Compares this instance with another instance of <see cref="T:SharpNav.Area"/> for equality.
            </summary>
            <param name="other">An <see cref="T:SharpNav.Area"/>.</param>
            <returns>A value indicating whether the two <see cref="T:SharpNav.Area"/>s are equal.</returns>
        </member>
        <member name="M:SharpNav.Area.Equals(System.Byte)">
            <summary>
            Compares this instance with a byte representing another <see cref="T:SharpNav.Area"/> for equality.
            </summary>
            <param name="other">A byte.</param>
            <returns>A value indicating whether this instance and the specified byte are equal.</returns>
        </member>
        <member name="M:SharpNav.Area.Equals(System.Object)">
            <summary>
            Compares this instance with another object for equality.
            </summary>
            <param name="obj">An object.</param>
            <returns>A value indicating whether this instance and the specified object are equal.</returns>
        </member>
        <member name="M:SharpNav.Area.GetHashCode">
            <summary>
            Generates a hashcode unique to the <see cref="F:SharpNav.Area.Id"/> of this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:SharpNav.Area.ToString">
            <summary>
            Converts this instance to a human-readable string.
            </summary>
            <returns>A string representing this instance.</returns>
        </member>
        <member name="T:SharpNav.AreaGenerator">
            <summary>
            A class that filters geometry and applies an <see cref="T:SharpNav.Area"/> to it.
            </summary>
        </member>
        <member name="M:SharpNav.AreaGenerator.#ctor(System.Collections.Generic.IEnumerable{SharpNav.Geometry.Triangle3},System.Int32,SharpNav.Area)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.AreaGenerator"/> class.
            </summary>
            <param name="verts">collection of Triangles.</param>
            <param name="triCount">The number of triangles to enumerate..</param>
            <param name="defaultArea">Default area.</param>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(System.Collections.Generic.IEnumerable{SharpNav.Geometry.Triangle3},SharpNav.Area)">
            <summary>
            Create instance from the specified triangles with specified area.
            </summary>
            <param name="tris">Collection of Triangles.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(System.Collections.Generic.IEnumerable{SharpNav.Geometry.Triangle3},System.Int32,SharpNav.Area)">
            <summary>
            Create instance from triCount(a integer) specified triangles with specified area
            </summary>
            <param name="tris">Collection of Triangles.</param>
            <param name="triCount">The number of triangles to enumerate.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(SharpNav.Geometry.Triangle3[],SharpNav.Area)">
            <summary>
            Create instance from every specified triangles in array of tris with specified area.
            </summary>
            <param name="tris">An array of triangles.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(SharpNav.Geometry.Triangle3[],System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Create instance from specified triangles in array of tris from tris[triOffset] to tris[triOffset+triCount] with specified area.
            </summary>
            <param name="tris">An array of triangles.</param>
            <param name="triOffset">Tri offset.</param>
            <param name="triCount">Tri count.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(SharpNav.Geometry.Vector3[],SharpNav.Area)">
            <summary>
            Create instance from the triangles created from points in verts with specified area 
            </summary>
            <param name="verts">An array of Vectors3.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(SharpNav.Geometry.Vector3[],System.Int32,System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Create instance from the triangles created from points start from verts[0*vertStride+vertOffset] to verts[(triCount-1)*vertStride+vertOffset]with specified area
            </summary>
            <param name="verts">An array of Vectors3.</param>
            <param name="vertOffset">The index of the first Vectex to be enumerated.</param>
            <param name="vertStride">The distance between the start of two triangles. A value of 0 means the data is tightly packed.</param>
            <param name="triCount">The number of triangles to enumerate..</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(System.Single[],SharpNav.Area)">
            <summary>
            Create instance from the triangles created from points in verts with specified area
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(System.Single[],System.Int32,System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Create instance from the triangles created from points start from verts[0*vertStride+vertOffset] to verts[(triCount-1)*vertStride+vertOffset]with specified area.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="floatOffset">The index of the first float to be enumerated.</param>
            <param name="floatStride">The distance between the start of two vertices. A value of 0 means the data is tightly packed.</param>
            <param name="triCount">The number of triangles to enumerate.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(SharpNav.Geometry.Vector3[],System.Int32[],SharpNav.Area)">
            <summary>
            Create instance from triangles created from points of verts which is created from array of index of vertices array with specified area 
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(SharpNav.Geometry.Vector3[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Create instance from triangles created from points of verts which is created from array of index of vertices array with specified area 
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="vertOffset">The index of the first vertex to be enumerated.</param>
            <param name="vertStride">The distance between the start of two triangles. A value of 0 means the data is tightly packed.</param>
            <param name="indexOffset">The index of the first index to be enumerated.</param>
            <param name="triCount">The number of triangles to enumerate.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(System.Single[],System.Int32[],SharpNav.Area)">
            <summary>
            Create instance from triangles created from points of verts which is created from array of index of vertices array with specified area 
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.From(System.Single[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Create instance from triangles created from points of verts which is created from array of index of vertices array with specified area 
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="floatOffset">The index of the first float to be enumerated.</param>
            <param name="floatStride">The distance between the start of two vertices. A value of 0 means the data is tightly packed.</param>
            <param name="indexOffset">The index of the first index to be enumerated.</param>
            <param name="triCount">The number of triangles to enumerate.</param>
            <param name="area">Area of Triangle.</param>
            <returns>A new AreaIdGenerator.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.ToArray">
            <summary>
            Takes the mesh query, runs it, and outputs the result as an array of <see cref="T:SharpNav.Area"/>.
            </summary>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.MarkAboveSlope(System.Single,SharpNav.Area)">
            <summary>
            Marks all triangles above a specified angle with a sepcified area ID.
            </summary>
            <param name="angle">The minimum angle in radians.</param>
            <param name="area">The area ID to set for triangles above the slope.</param>
            <returns>The same instance.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.MarkBelowSlope(System.Single,SharpNav.Area)">
            <summary>
            Marks all triangles below a specified angle with a sepcified area ID.
            </summary>
            <param name="angle">The maximum angle.</param>
            <param name="area">The area ID to set for triangles below the slope.</param>
            <returns>The same instance.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.MarkAtSlope(System.Single,System.Single,SharpNav.Area)">
            <summary>
            Marks all triangles around a specified angle with a sepcified area ID.
            </summary>
            <param name="angle">The angle.</param>
            <param name="range">The maximum allowed difference between the angle and a triangle's angle.</param>
            <param name="area">The area ID to set for triangles around the slope.</param>
            <returns>The same instance.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.MarkBelowHeight(System.Single,SharpNav.Area)">
            <summary>
            Marks all triangles below a specified height with a sepcified area ID.
            </summary>
            <param name="y">The height threshold of a triangle.</param>
            <param name="area">The area ID to set for triangles below the threshold.</param>
            <returns>The same instance.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.MarkAtHeight(System.Single,System.Single,SharpNav.Area)">
            <summary>
            Marks all triangles around a specified height with a sepcified area ID.
            </summary>
            <param name="y">The height value.</param>
            <param name="radius">The maximum allowed difference between the height and a triangle's height.</param>
            <param name="area">The area ID to set for triangles around the height.</param>
            <returns>The same instance.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.MarkAboveHeight(System.Single,SharpNav.Area)">
            <summary>
            Marks all triangles above a specified height with a sepcified area ID.
            </summary>
            <param name="y">The height threshold of a triangle.</param>
            <param name="area">The area ID to set for triangles above the threshold.</param>
            <returns>The same instance.</returns>
        </member>
        <member name="M:SharpNav.AreaGenerator.MarkCustomFilter(System.Func{SharpNav.Geometry.Triangle3,System.Boolean},SharpNav.Area)">
            <summary>
            Marks all triangles that meet a specified condition with a specified area ID.
            </summary>
            <param name="func">The condition to be tested on each triangle.</param>
            <param name="area">The area ID to set for triangles that match the condition.</param>
            <returns>The same instance.</returns>
        </member>
        <member name="T:SharpNav.Cell">
            <summary>
            A cell is a column of voxels represented in <see cref="T:SharpNav.Span"/>s.
            </summary>
        </member>
        <member name="M:SharpNav.Cell.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Cell"/> class.
            </summary>
            <param name="height">The number of voxels in the column.</param>
        </member>
        <member name="P:SharpNav.Cell.Height">
            <summary>
            Gets the height of the cell in number of voxels.
            </summary>
        </member>
        <member name="P:SharpNav.Cell.SpanCount">
            <summary>
            Gets the number of spans in the cell.
            </summary>
        </member>
        <member name="P:SharpNav.Cell.WalkableSpanCount">
            <summary>
            Gets the number of spans that are in walkable <see cref="T:SharpNav.Area"/>s.
            </summary>
        </member>
        <member name="P:SharpNav.Cell.Spans">
            <summary>
            Gets a readonly list of all the <see cref="T:SharpNav.Span"/>s contained in the cell.
            </summary>
            <value>A readonly list of spans.</value>
        </member>
        <member name="P:SharpNav.Cell.MutableSpans">
            <summary>
            Gets a modifiable list of all the <see cref="T:SharpNav.Span"/>s contained in the cell.
            Should only be used for filtering in <see cref="T:SharpNav.Heightfield"/>.
            </summary>
            <value>A list of spans for modification.</value>
        </member>
        <member name="P:SharpNav.Cell.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SharpNav.Span"/> that contains the specified voxel.
            </summary>
            <param name="location">The voxel to search for.</param>
            <returns>The span containing the voxel. Null if the voxel is empty.</returns>
        </member>
        <member name="M:SharpNav.Cell.AddSpan(SharpNav.Span)">
            <summary>
            Adds a <see cref="T:SharpNav.Span"/> to the cell.
            </summary>
            <param name="span">A span.</param>
            <exception cref="T:System.ArgumentException">Thrown if an invalid span is provided.</exception>
        </member>
        <member name="T:SharpNav.Collections.Generic.BufferedQueue`1">
            <summary>
            Typical LIFO generic queue container that stores data inside of
            a fixed-size internal buffer (array).
            </summary>
            <typeparam name="T">Type of element that given BufferedQueue object stores. </typeparam>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Collections.Generic.BufferedQueue`1"/> class.
            </summary>
            <param name="size">The maximum number of items that will be stored.</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Collections.Generic.BufferedQueue`1"/> class as a copy of an
            <see cref="T:System.Collections.Generic.ICollection`1"/> of the same type.
            </summary>
            <param name="items">The collection to copy from.</param>
        </member>
        <member name="P:SharpNav.Collections.Generic.BufferedQueue`1.Count">
            <summary>
            Gets the number of elements in the queue.
            </summary>
        </member>
        <member name="P:SharpNav.Collections.Generic.BufferedQueue`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the queue is read-only (False for now)
            </summary>
        </member>
        <member name="P:SharpNav.Collections.Generic.BufferedQueue`1.Item(System.Int32)">
            <summary>
            Gets the value at specified index (valid ranges are from 0 to size-1)
            </summary>
            <param name="index">Index value</param>
            <returns>The value at the index</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.Enqueue(`0)">
            <summary>
            Adds a new element to the front of the queue.
            </summary>
            <param name="item">The element to be added to the queue</param>
            <returns>True if element was added to queue, False otherwise</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.Dequeue">
            <summary>
            Removes bottom element from queue and returns it (and updates "first" index)
            </summary>
            <returns>Bottom element</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.Peek">
            <summary>
            Returns last element in the queue
            </summary>
            <returns>size element</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.Clear">
            <summary>
            Resets queue pointer back to default, essentially clearing the queue. 
            </summary>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.Contains(`0)">
            <summary>
            Returns whether the queue contains a given item.
            </summary>
            <param name="item">Item to search for</param>
            <returns>True if item exists in queue, False if not</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the <see cref="T:SharpNav.Collections.Generic.BufferedQueue`1"/> to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index within the array to start copying to.</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.GetEnumerator">
            <summary>
            Gets the <see cref="!:BufferedQueue"/>'s enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Calls <see cref="M:SharpNav.Collections.Generic.BufferedQueue`1.Enqueue(`0)"/>.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Unsupported, but necessary to implement <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">An item.</param>
            <returns>Nothing. This method will always throw <see cref="T:System.InvalidOperationException"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Will always be thrown. This is not a valid operation.</exception>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            The non-generic version of <see cref="M:SharpNav.Collections.Generic.BufferedQueue`1.GetEnumerator"/>.
            </summary>
            <returns>A non-generic enumerator.</returns>
        </member>
        <member name="T:SharpNav.Collections.Generic.BufferedStack`1">
            <summary>
            Typical FIFO generic stack container that stores data inside of
            a fixed-size internal buffer (array). 
            </summary>
            <typeparam name="T">Type of element that given BufferedStack object stores. </typeparam>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Collections.Generic.BufferedStack`1"/> class.
            </summary>
            <param name="size">The maximum number of items that will be stored.</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.#ctor(System.Int32,System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Collections.Generic.BufferedStack`1"/> class as a copy of an
            <see cref="T:System.Collections.Generic.ICollection`1"/> of the same type.
            </summary>
            <param name="size">The number of elements to copy from the collection.</param>
            <param name="items">The collection to copy from.</param>
        </member>
        <member name="P:SharpNav.Collections.Generic.BufferedStack`1.Count">
            <summary>
            Gets the number of elements in the stack.
            </summary>
        </member>
        <member name="P:SharpNav.Collections.Generic.BufferedStack`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the stack is read-only (False for now)
            </summary>
        </member>
        <member name="P:SharpNav.Collections.Generic.BufferedStack`1.Item(System.Int32)">
            <summary>
            Gets the value at specified index (valid ranges are from 0 to size-1)
            </summary>
            <param name="index">Index value</param>
            <returns>The value at the index</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.Push(`0)">
            <summary>
            Pushes a new element to the top of the stack.
            </summary>
            <param name="item">The element to be added to the stack</param>
            <returns>True if element was added to stack, False otherwise</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.Pop">
            <summary>
            Removes most recent (top) element from stack and returns it.
            </summary>
            <returns>Top element</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.Peek">
            <summary>
            Returns copy of the top element of the stack.
            </summary>
            <returns>Top element</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.Clear">
            <summary>
            Resets stack pointer back to default, essentially clearing the stack. 
            </summary>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.Contains(`0)">
            <summary>
            Returns whether the stack contains a given item.
            </summary>
            <param name="item">Item to search for</param>
            <returns>True if item exists in stack, False if not</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the <see cref="T:SharpNav.Collections.Generic.BufferedStack`1"/> to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index within the array to start copying to.</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.GetEnumerator">
            <summary>
            Gets the <see cref="!:BufferedStack"/>'s enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Calls <see cref="M:SharpNav.Collections.Generic.BufferedStack`1.Push(`0)"/>.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Unsupported, but necessary to implement <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">An item.</param>
            <returns>Nothing. This method will always throw <see cref="T:System.InvalidOperationException"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Will always be thrown. This is not a valid operation.</exception>
        </member>
        <member name="M:SharpNav.Collections.Generic.BufferedStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            The non-generic version of <see cref="M:SharpNav.Collections.Generic.BufferedStack`1.GetEnumerator"/>.
            </summary>
            <returns>A non-generic enumerator.</returns>
        </member>
        <member name="T:SharpNav.Collections.Generic.IValueWithCost">
            <summary>
            An interface that defines a class containing a cost associated with the instance.
            Used in <see cref="T:SharpNav.Collections.Generic.PriorityQueue`1"/>
            </summary>
        </member>
        <member name="P:SharpNav.Collections.Generic.IValueWithCost.Cost">
            <summary>
            Gets the cost of this instance.
            </summary>
        </member>
        <member name="T:SharpNav.Collections.Generic.PriorityQueue`1">
            <summary>
            Use a priority queue (heap) to determine which node is more important.
            </summary>
            <typeparam name="T">
            A type that has a cost for each instance via the <see cref="T:SharpNav.Collections.Generic.IValueWithCost"/> interface.
            </typeparam>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Collections.Generic.PriorityQueue`1"/> class with a given capacity of size n.
            </summary>
            <param name="n">The maximum number of nodes that can be stored.</param>
        </member>
        <member name="P:SharpNav.Collections.Generic.PriorityQueue`1.Count">
            <summary>
            Gets the number of elements in the priority queue.
            </summary>
        </member>
        <member name="P:SharpNav.Collections.Generic.PriorityQueue`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only. For <see cref="T:SharpNav.Collections.Generic.PriorityQueue`1"/>, this is
            always <c>true</c>.
            </summary>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.Clear">
            <summary>
            Remove all the elements from the priority queue.
            </summary>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.Empty">
            <summary>
            Determines whether the priority queue is empty
            </summary>
            <returns>True if empty, false if not</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.Top">
            <summary>
            Return the node at the top of the heap.
            </summary>
            <returns>Top node in heap</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.Pop">
            <summary>
            Remove the node at the top of the heap. Then, move the bottommost node to the top and trickle down
            until the nodes are in order.
            </summary>
            <returns>Node with lowest value in heap</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.Push(`0)">
            <summary>
            Add the node at the bottom of the heap and move it up until the nodes ae in order.
            </summary>
            <param name="node">The node to add</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.Contains(`0)">
            <summary>
            Returns whether the given item exists in the heap. 
            </summary>
            <param name="item">Item to look for</param>
            <returns>True or False</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.Modify(`0)">
            <summary>
            Change the value of the node, which may involve some swapping of elements to maintain heap order.
            </summary>
            <param name="node">The node to modify</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the <see cref="T:SharpNav.Collections.Generic.PriorityQueue`1"/> to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index within the array to start copying to.</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.GetEnumerator">
            <summary>
            Gets the <see cref="!:PriorityQueue"/>'s enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Calls <see cref="M:SharpNav.Collections.Generic.PriorityQueue`1.Push(`0)"/>.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Unsupported, but necessary to implement <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">An item.</param>
            <returns>Nothing. This method will always throw <see cref="T:System.InvalidOperationException"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Will always be thrown. This is not a valid operation.</exception>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            The non-generic version of <see cref="M:SharpNav.Collections.Generic.PriorityQueue`1.GetEnumerator"/>.
            </summary>
            <returns>A non-generic enumerator.</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.BubbleUp(System.Int32,`0)">
            <summary>
            While going up a priority queue, keep swapping elements until the element reaches the top.
            </summary>
            <param name="i">Index of current node</param>
            <param name="node">The node itself</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.PriorityQueue`1.TrickleDown(System.Int32,`0)">
            <summary>
            While moving down the priority queue, keep swapping elements.
            </summary>
            <param name="i">Index of current node</param>
            <param name="node">The node itself</param>
        </member>
        <member name="T:SharpNav.Collections.Generic.ProximityGrid`1">
            <summary>
            A <see cref="T:SharpNav.Collections.Generic.ProximityGrid`1"/> is a uniform 2d grid that can efficiently retrieve items near a specified grid cell.
            </summary>
            <typeparam name="T">An equatable type.</typeparam>
        </member>
        <member name="M:SharpNav.Collections.Generic.ProximityGrid`1.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Collections.Generic.ProximityGrid`1"/> class.
            </summary>
            <param name="poolSize">The size of the item array</param>
            <param name="cellSize">The size of each cell</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.ProximityGrid`1.Clear">
            <summary>
            Reset all the data
            </summary>
        </member>
        <member name="M:SharpNav.Collections.Generic.ProximityGrid`1.AddItem(`0,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Take all the coordinates within a certain range and add them all to an array
            </summary>
            <param name="value">The value.</param>
            <param name="minX">Minimum x-coordinate</param>
            <param name="minY">Minimum y-coordinate</param>
            <param name="maxX">Maximum x-coordinate</param>
            <param name="maxY">Maximum y-coordinate</param>
        </member>
        <member name="M:SharpNav.Collections.Generic.ProximityGrid`1.QueryItems(System.Single,System.Single,System.Single,System.Single,`0[],System.Int32)">
            <summary>
            Take all the items within a certain range and add their ids to an array.
            </summary>
            <param name="minX">The minimum x-coordinate</param>
            <param name="minY">The minimum y-coordinate</param>
            <param name="maxX">The maximum x-coordinate</param>
            <param name="maxY">The maximum y-coordinate</param>
            <param name="values">The array of values</param>
            <param name="maxVals">The maximum number of values that can be stored</param>
            <returns>The number of unique values</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.ProximityGrid`1.GetItemCountAtLocation(System.Int32,System.Int32)">
            <summary>
            Gets the number of items at a specific location.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The number of items at the specified coordinates.</returns>
        </member>
        <member name="M:SharpNav.Collections.Generic.ProximityGrid`1.HashPos2(System.Int32,System.Int32,System.Int32)">
            <summary>
            Hash function
            </summary>
            <param name="x">The x-coordinate</param>
            <param name="y">The y-coordinate</param>
            <param name="n">Total size of hash table</param>
            <returns>A hash value</returns>
        </member>
        <member name="T:SharpNav.Collections.Generic.ProximityGrid`1.Item">
            <summary>
            An "item" is simply a coordinate on the proximity grid
            </summary>
        </member>
        <member name="T:SharpNav.Collections.BVTree">
            <summary>
            A tree of bounding volumes.
            </summary>
        </member>
        <member name="F:SharpNav.Collections.BVTree.nodes">
            <summary>
            Nodes in the tree
            </summary>
        </member>
        <member name="M:SharpNav.Collections.BVTree.#ctor(SharpNav.PolyVertex[],SharpNav.PolyMesh.Polygon[],System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Collections.BVTree"/> class.
            </summary>
            <param name="verts">A set of vertices.</param>
            <param name="polys">A set of polygons composed of the vertices in <c>verts</c>.</param>
            <param name="nvp">The maximum number of vertices per polygon.</param>
            <param name="cellSize">The size of a cell.</param>
            <param name="cellHeight">The height of a cell.</param>
        </member>
        <member name="M:SharpNav.Collections.BVTree.#ctor(System.Collections.Generic.IEnumerable{SharpNav.Collections.BVTree.Node})">
            <summary>
            Creates a copy of the tree from a group of enumerable nodes.
            </summary>
            <param name="nodes">The nodes to copy from.</param>
        </member>
        <member name="P:SharpNav.Collections.BVTree.Count">
            <summary>
            Gets the number of nodes in the tree.
            </summary>
        </member>
        <member name="P:SharpNav.Collections.BVTree.Item(System.Int32)">
            <summary>
            Gets the node at a specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The node at the index.</returns>
        </member>
        <member name="M:SharpNav.Collections.BVTree.CalcExtends(System.Collections.Generic.List{SharpNav.Collections.BVTree.Node},System.Int32,System.Int32,SharpNav.PolyBounds@)">
            <summary>
            Calculates the bounding box for a set of bounding boxes.
            </summary>
            <param name="items">The list of all the bounding boxes.</param>
            <param name="minIndex">The first bounding box in the list to get the extends of.</param>
            <param name="maxIndex">The last bounding box in the list to get the extends of.</param>
            <param name="bounds">The extends of all the bounding boxes.</param>
        </member>
        <member name="M:SharpNav.Collections.BVTree.LongestAxis(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determine whether the bounding x, y, or z axis contains the longest distance 
            </summary>
            <param name="x">Length of bounding x-axis</param>
            <param name="y">Length of bounding y-axis</param>
            <param name="z">Length of bounding z-axis</param>
            <returns>Returns the a specific axis (x, y, or z)</returns>
        </member>
        <member name="M:SharpNav.Collections.BVTree.Subdivide(System.Collections.Generic.List{SharpNav.Collections.BVTree.Node},System.Int32,System.Int32,System.Int32)">
            <summary>
            Subdivides a list of bounding boxes until it is a tree.
            </summary>
            <param name="items">A list of bounding boxes.</param>
            <param name="minIndex">The first index to consider (recursively).</param>
            <param name="maxIndex">The last index to consier (recursively).</param>
            <param name="curNode">The current node to look at.</param>
            <returns>The current node at the end of each method.</returns>
        </member>
        <member name="T:SharpNav.Collections.BVTree.Node">
            <summary>
            The data stored in a bounding volume node.
            </summary>
        </member>
        <member name="F:SharpNav.Collections.BVTree.Node.Bounds">
            <summary>
            The bounding box of the node.
            </summary>
        </member>
        <member name="F:SharpNav.Collections.BVTree.Node.Index">
            <summary>
            The index of this node in a <see cref="T:SharpNav.Collections.BVTree"/>.
            </summary>
        </member>
        <member name="T:SharpNav.Collections.BVTree.Node.CompareX">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation that only compares two <see cref="T:SharpNav.Collections.BVTree.Node"/>s on the X axis.
            </summary>
        </member>
        <member name="M:SharpNav.Collections.BVTree.Node.CompareX.Compare(SharpNav.Collections.BVTree.Node,SharpNav.Collections.BVTree.Node)">
            <summary>
            Compares two nodes's bounds on the X axis.
            </summary>
            <param name="x">A node.</param>
            <param name="y">Another node.</param>
            <returns>A negative value if a is less than b; 0 if they are equal; a positive value of a is greater than b.</returns>
        </member>
        <member name="T:SharpNav.Collections.BVTree.Node.CompareY">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation that only compares two <see cref="T:SharpNav.Collections.BVTree.Node"/>s on the Y axis.
            </summary>
        </member>
        <member name="M:SharpNav.Collections.BVTree.Node.CompareY.Compare(SharpNav.Collections.BVTree.Node,SharpNav.Collections.BVTree.Node)">
            <summary>
            Compares two nodes's bounds on the Y axis.
            </summary>
            <param name="x">A node.</param>
            <param name="y">Another node.</param>
            <returns>A negative value if a is less than b; 0 if they are equal; a positive value of a is greater than b.</returns>
        </member>
        <member name="T:SharpNav.Collections.BVTree.Node.CompareZ">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation that only compares two <see cref="T:SharpNav.Collections.BVTree.Node"/>s on the Z axis.
            </summary>
        </member>
        <member name="M:SharpNav.Collections.BVTree.Node.CompareZ.Compare(SharpNav.Collections.BVTree.Node,SharpNav.Collections.BVTree.Node)">
            <summary>
            Compares two nodes's bounds on the Z axis.
            </summary>
            <param name="x">A node.</param>
            <param name="y">Another node.</param>
            <returns>A negative value if a is less than b; 0 if they are equal; a positive value of a is greater than b.</returns>
        </member>
        <member name="T:SharpNav.CompactCell">
            <summary>
            Represents a cell in a <see cref="T:SharpNav.CompactHeightfield"/>.
            </summary>
        </member>
        <member name="F:SharpNav.CompactCell.StartIndex">
            <summary>
            The starting index of spans in a <see cref="T:SharpNav.CompactHeightfield"/> for this cell.
            </summary>
        </member>
        <member name="F:SharpNav.CompactCell.Count">
            <summary>
            The number of spans in a <see cref="T:SharpNav.CompactHeightfield"/> for this cell.
            </summary>
        </member>
        <member name="M:SharpNav.CompactCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.CompactCell"/> struct.
            </summary>
            <param name="start">The start index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="T:SharpNav.CompactSpan">
            <summary>
            Represents a voxel span in a <see cref="T:SharpNav.CompactHeightfield"/>.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpan.Minimum">
            <summary>
            The span minimum.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpan.Height">
            <summary>
            The number of voxels contained in the span.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpan.ConnectionWest">
            <summary>
            A byte representing the index of the connected span in the cell directly to the west.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpan.ConnectionNorth">
            <summary>
            A byte representing the index of the connected span in the cell directly to the north.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpan.ConnectionEast">
            <summary>
            A byte representing the index of the connected span in the cell directly to the east.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpan.ConnectionSouth">
            <summary>
            A byte representing the index of the connected span in the cell directly to the south.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpan.Region">
            <summary>
            The region the span belongs to.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpan.NotConnected">
            <summary>
            A constant that means there is no connection for the values <see cref="F:SharpNav.CompactSpan.ConnectionWest"/>,
            <see cref="F:SharpNav.CompactSpan.ConnectionNorth"/>, <see cref="F:SharpNav.CompactSpan.ConnectionEast"/>, and <see cref="F:SharpNav.CompactSpan.ConnectionSouth"/>.
            </summary>
        </member>
        <member name="M:SharpNav.CompactSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.CompactSpan"/> struct.
            </summary>
            <param name="minimum">The span minimum.</param>
            <param name="height">The number of voxels the span contains.</param>
        </member>
        <member name="P:SharpNav.CompactSpan.HasUpperBound">
            <summary>
            Gets a value indicating whether the span has an upper bound or goes to "infinity".
            </summary>
        </member>
        <member name="P:SharpNav.CompactSpan.Maximum">
            <summary>
            Gets the upper bound of the span.
            </summary>
        </member>
        <member name="P:SharpNav.CompactSpan.ConnectionCount">
            <summary>
            Gets the number of connections the current CompactSpan has with its neighbors.
            </summary>
        </member>
        <member name="M:SharpNav.CompactSpan.OverlapMin(SharpNav.CompactSpan@,SharpNav.CompactSpan@,System.Int32@)">
            <summary>
            If two CompactSpans overlap, find the minimum of the new overlapping CompactSpans.
            </summary>
            <param name="left">The first CompactSpan</param>
            <param name="right">The second CompactSpan</param>
            <param name="min">The minimum of the overlapping ComapctSpans</param>
        </member>
        <member name="M:SharpNav.CompactSpan.OverlapMax(SharpNav.CompactSpan@,SharpNav.CompactSpan@,System.Int32@)">
            <summary>
            If two CompactSpans overlap, find the maximum of the new overlapping CompactSpans.
            </summary>
            <param name="left">The first CompactSpan</param>
            <param name="right">The second CompactSpan</param>
            <param name="max">The maximum of the overlapping CompactSpans</param>
        </member>
        <member name="M:SharpNav.CompactSpan.FromMinMax(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:SharpNav.CompactSpan"/> from a minimum boundary and a maximum boundary.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>A <see cref="T:SharpNav.CompactSpan"/>.</returns>
        </member>
        <member name="M:SharpNav.CompactSpan.FromMinMax(System.Int32,System.Int32,SharpNav.CompactSpan@)">
            <summary>
            Creates a <see cref="T:SharpNav.CompactSpan"/> from a minimum boundary and a maximum boundary.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="span">A <see cref="T:SharpNav.CompactSpan"/>.</param>
        </member>
        <member name="M:SharpNav.CompactSpan.SetConnection(SharpNav.Direction,System.Int32,SharpNav.CompactSpan@)">
            <summary>
            Sets connection data to a span contained in a neighboring cell.
            </summary>
            <param name="dir">The direction of the cell.</param>
            <param name="i">The index of the span in the neighboring cell.</param>
            <param name="s">The <see cref="T:SharpNav.CompactSpan"/> to set the data for.</param>
        </member>
        <member name="M:SharpNav.CompactSpan.UnsetConnection(SharpNav.Direction,SharpNav.CompactSpan@)">
            <summary>
            Un-sets connection data from a neighboring cell.
            </summary>
            <param name="dir">The direction of the cell.</param>
            <param name="s">The <see cref="T:SharpNav.CompactSpan"/> to set the data for.</param>
        </member>
        <member name="M:SharpNav.CompactSpan.GetConnection(SharpNav.CompactSpan@,SharpNav.Direction)">
            <summary>
            Gets the connection data for a neighboring cell in a specified direction.
            </summary>
            <param name="s">The <see cref="T:SharpNav.CompactSpan"/> to get the connection data from.</param>
            <param name="dir">The direction.</param>
            <returns>The index of the span in the neighboring cell.</returns>
        </member>
        <member name="M:SharpNav.CompactSpan.GetConnection(SharpNav.Direction)">
            <summary>
            Gets the connection data for a neighboring call in a specified direction.
            </summary>
            <param name="dir">The direction.</param>
            <returns>The index of the span in the neighboring cell.</returns>
        </member>
        <member name="M:SharpNav.CompactSpan.IsConnected(SharpNav.Direction)">
            <summary>
            Gets a value indicating whether the span is connected to another span in a specified direction.
            </summary>
            <param name="dir">The direction.</param>
            <returns>A value indicating whether the specified direction has a connected span.</returns>
        </member>
        <member name="T:SharpNav.CompactSpanReference">
            <summary>
            A reference to a <see cref="T:SharpNav.CompactSpan"/> in a <see cref="T:SharpNav.CompactHeightfield"/>.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpanReference.Null">
            <summary>
            A "null" reference is one with a negative index.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpanReference.X">
            <summary>
            The X coordinate of the referenced span.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpanReference.Y">
            <summary>
            The Y coordinate of the referenced span.
            </summary>
        </member>
        <member name="F:SharpNav.CompactSpanReference.Index">
            <summary>
            The index of the referenced span in the spans array.
            </summary>
        </member>
        <member name="M:SharpNav.CompactSpanReference.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.CompactSpanReference"/> struct.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="i">The index of the span in the spans array.</param>
        </member>
        <member name="M:SharpNav.CompactSpanReference.op_Equality(SharpNav.CompactSpanReference,SharpNav.CompactSpanReference)">
            <summary>
            Compares two instances of <see cref="T:SharpNav.CompactSpanReference"/> for equality.
            </summary>
            <remarks>
            If both references have a negative <see cref="F:SharpNav.CompactSpanReference.Index"/>, they are considered equal, as both would be considered "null".
            </remarks>
            <param name="left">A reference.</param>
            <param name="right">Another reference.</param>
            <returns>A value indicating whether the two references are equal.</returns>
        </member>
        <member name="M:SharpNav.CompactSpanReference.op_Inequality(SharpNav.CompactSpanReference,SharpNav.CompactSpanReference)">
            <summary>
            Compare two instances of <see cref="T:SharpNav.CompactSpanReference"/> for inequality.
            </summary>
            <remarks>
            If both references have a negative <see cref="F:SharpNav.CompactSpanReference.Index"/>, they are considered equal, as both would be considered "null".
            </remarks>
            <param name="left">A reference.</param>
            <param name="right">Another reference.</param>
            <returns>A value indicating whether the two references are not equal.</returns>
        </member>
        <member name="M:SharpNav.CompactSpanReference.Equals(SharpNav.CompactSpanReference)">
            <summary>
            Compares this instance to another instance of <see cref="T:SharpNav.CompactSpanReference"/> for equality.
            </summary>
            <param name="other">Another instance of <see cref="T:SharpNav.CompactSpanReference"/>.</param>
            <returns>A value indicating whether this instance and another instance are equal.</returns>
        </member>
        <member name="M:SharpNav.CompactSpanReference.Equals(System.Object)">
            <summary>
            Compares this instance to another object for equality.
            </summary>
            <param name="obj">An object.</param>
            <returns>A value indicating whether the object is equal to this instance.</returns>
        </member>
        <member name="M:SharpNav.CompactSpanReference.GetHashCode">
            <summary>
            Gets a hash code unique to this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:SharpNav.Contour">
            <summary>
            A contour is formed from a region.
            </summary>
        </member>
        <member name="M:SharpNav.Contour.#ctor(System.Collections.Generic.List{SharpNav.ContourVertex},SharpNav.RegionId,SharpNav.Area,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Contour"/> class.
            </summary>
            <param name="verts">The raw vertices of the contour.</param>
            <param name="region">The region ID of the contour.</param>
            <param name="area">The area ID of the contour.</param>
            <param name="borderSize">The size of the border.</param>
        </member>
        <member name="P:SharpNav.Contour.Vertices">
            <summary>
            Gets the simplified vertices of the contour.
            </summary>
        </member>
        <member name="P:SharpNav.Contour.IsNull">
            <summary>
            Gets a value indicating whether the contour is "null" (has less than 3 vertices).
            </summary>
        </member>
        <member name="P:SharpNav.Contour.Area">
            <summary>
            Gets the area ID of the contour.
            </summary>
        </member>
        <member name="P:SharpNav.Contour.RegionId">
            <summary>
            Gets the region ID of the contour.
            </summary>
        </member>
        <member name="P:SharpNav.Contour.Area2D">
            <summary>
            Gets the 2D area of the contour. A positive area means the contour is going forwards, a negative
            area maens it is going backwards.
            </summary>
        </member>
        <member name="M:SharpNav.Contour.MergeWith(SharpNav.Contour)">
            <summary>
            Merges another contour into this instance.
            </summary>
            <param name="contour">The contour to merge.</param>
        </member>
        <member name="M:SharpNav.Contour.GetClosestIndices(SharpNav.Contour,SharpNav.Contour,System.Int32@,System.Int32@)">
            <summary>
            Finds the closest indices between two contours. Useful for merging contours.
            </summary>
            <param name="a">A contour.</param>
            <param name="b">Another contour.</param>
            <param name="indexA">The nearest index on contour A.</param>
            <param name="indexB">The nearest index on contour B.</param>
        </member>
        <member name="M:SharpNav.Contour.Simplify(System.Collections.Generic.List{SharpNav.ContourVertex},System.Collections.Generic.List{SharpNav.ContourVertex},System.Single,System.Int32,SharpNav.ContourBuildFlags)">
            <summary>
            Simplify the contours by reducing the number of edges
            </summary>
            <param name="rawVerts">Initial vertices</param>
            <param name="simplified">New and simplified vertices</param>
            <param name="maxError">Maximum error allowed</param>
            <param name="maxEdgeLen">The maximum edge length allowed</param>
            <param name="buildFlags">Flags determines how to split the long edges</param>
        </member>
        <member name="M:SharpNav.Contour.RemoveDegenerateSegments(System.Collections.Generic.List{SharpNav.ContourVertex})">
            <summary>
            Removes degenerate segments from a simplified contour.
            </summary>
            <param name="simplified">The simplified contour.</param>
        </member>
        <member name="T:SharpNav.ContourBuildFlags">
            <summary>
            A set of flags that control the way contours are built.
            </summary>
        </member>
        <member name="F:SharpNav.ContourBuildFlags.None">
            <summary>Build normally.</summary>
        </member>
        <member name="F:SharpNav.ContourBuildFlags.TessellateWallEdges">
            <summary>Tessellate solid edges during contour simplification.</summary>
        </member>
        <member name="F:SharpNav.ContourBuildFlags.TessellateAreaEdges">
            <summary>Tessellate edges between areas during contour simplification.</summary>
        </member>
        <member name="T:SharpNav.ContourSet">
            <summary>
            A set of contours around the regions of a <see cref="T:SharpNav.CompactHeightfield"/>, used as the edges of a
            <see cref="T:SharpNav.PolyMesh"/>.
            </summary>
        </member>
        <member name="M:SharpNav.ContourSet.#ctor(System.Collections.Generic.IEnumerable{SharpNav.Contour},SharpNav.Geometry.BBox3,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.ContourSet"/> class.
            </summary>
            <param name="contours">A collection of <see cref="T:SharpNav.Contour"/>s.</param>
            <param name="bounds">The bounding box that contains all of the <see cref="T:SharpNav.Contour"/>s.</param>
            <param name="width">The width, in voxel units, of the world.</param>
            <param name="height">The height, in voxel units, of the world.</param>
        </member>
        <member name="P:SharpNav.ContourSet.Count">
            <summary>
            Gets the number of <see cref="T:SharpNav.Contour"/>s in the set.
            </summary>
        </member>
        <member name="P:SharpNav.ContourSet.Bounds">
            <summary>
            Gets the world-space bounding box of the set.
            </summary>
        </member>
        <member name="P:SharpNav.ContourSet.Width">
            <summary>
            Gets the width of the set, not including the border size specified in <see cref="T:SharpNav.CompactHeightfield"/>.
            </summary>
        </member>
        <member name="P:SharpNav.ContourSet.Height">
            <summary>
            Gets the height of the set, not including the border size specified in <see cref="T:SharpNav.CompactHeightfield"/>.
            </summary>
        </member>
        <member name="P:SharpNav.ContourSet.System#Collections#Generic#ICollection{SharpNav#Contour}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:SharpNav.ContourSet"/> is read-only.
            </summary>
        </member>
        <member name="M:SharpNav.ContourSet.GetVertexLimits(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculates the maximum number of vertices, triangles, and vertices per contour in the
            set of contours.
            </summary>
            <param name="maxVertices">The maximum number of vertices possible from this contour set.</param>
            <param name="maxTris">The maximum number of triangles possible from this contour set.</param>
            <param name="maxVertsPerContour">The maximum number of vertices per contour within the set.</param>
        </member>
        <member name="M:SharpNav.ContourSet.Add(SharpNav.Contour)">
            <summary>
            Add a new contour to the set
            </summary>
            <param name="item">The contour to add</param>
        </member>
        <member name="M:SharpNav.ContourSet.Clear">
            <summary>
            Clear the set of contours.
            </summary>
        </member>
        <member name="M:SharpNav.ContourSet.Contains(SharpNav.Contour)">
            <summary>
            Checks if a specified <see cref="T:SharpNav.ContourSet"/> is contained in the <see cref="T:SharpNav.ContourSet"/>.
            </summary>
            <param name="item">A contour.</param>
            <returns>A value indicating whether the set contains the specified contour.</returns>
        </member>
        <member name="M:SharpNav.ContourSet.CopyTo(SharpNav.Contour[],System.Int32)">
            <summary>
            Copies the <see cref="T:SharpNav.Contour"/>s in the set to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:SharpNav.ContourSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the entire <see cref="T:SharpNav.ContourSet"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:SharpNav.ContourSet.System#Collections#Generic#ICollection{SharpNav#Contour}#Remove(SharpNav.Contour)">
            <summary>
            (Not implemented) Remove a contour from the set
            </summary>
            <param name="item">The contour to remove</param>
            <returns>throw InvalidOperatorException</returns>
        </member>
        <member name="M:SharpNav.ContourSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the set
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:SharpNav.ContourVertex">
            <summary>
            A <see cref="T:SharpNav.ContourVertex"/> is a vertex that stores 3 integer coordinates and a region ID, and is used to build <see cref="T:SharpNav.Contour"/>s.
            </summary>
        </member>
        <member name="F:SharpNav.ContourVertex.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="F:SharpNav.ContourVertex.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="F:SharpNav.ContourVertex.Z">
            <summary>
            The Z coordinate.
            </summary>
        </member>
        <member name="F:SharpNav.ContourVertex.RegionId">
            <summary>
            The region that the vertex belongs to.
            </summary>
        </member>
        <member name="M:SharpNav.ContourVertex.#ctor(System.Int32,System.Int32,System.Int32,SharpNav.RegionId)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.ContourVertex"/> struct.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
            <param name="region">The region ID.</param>
        </member>
        <member name="M:SharpNav.ContourVertex.#ctor(SharpNav.Geometry.Vector3,SharpNav.RegionId)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.ContourVertex"/> struct.
            </summary>
            <param name="vec">The array of X,Y,Z coordinates.</param>
            <param name="region">The Region ID.</param>
        </member>
        <member name="M:SharpNav.ContourVertex.#ctor(SharpNav.ContourVertex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.ContourVertex"/> struct as a copy.
            </summary>
            <param name="vert">The original vertex.</param>
            <param name="index">The index of the original vertex, which is temporarily stored in the <see cref="F:SharpNav.ContourVertex.RegionId"/> field.</param>
        </member>
        <member name="M:SharpNav.ContourVertex.#ctor(SharpNav.ContourVertex,SharpNav.RegionId)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.ContourVertex"/> struct as a copy.
            </summary>
            <param name="vert">The original vertex.</param>
            <param name="region">The region that the vertex belongs to.</param>
        </member>
        <member name="M:SharpNav.ContourVertex.IsLeft(SharpNav.ContourVertex@,SharpNav.ContourVertex@,SharpNav.ContourVertex@)">
            <summary>
            Gets the leftness of a triangle formed from 3 contour vertices.
            </summary>
            <param name="a">The first vertex.</param>
            <param name="b">The second vertex.</param>
            <param name="c">The third vertex.</param>
            <returns>A value indicating the leftness of the triangle.</returns>
        </member>
        <member name="M:SharpNav.ContourVertex.Area2D(SharpNav.ContourVertex@,SharpNav.ContourVertex@,SharpNav.ContourVertex@,System.Int32@)">
            <summary>
            Gets the 2D area of the triangle ABC.
            </summary>
            <param name="a">Point A of triangle ABC.</param>
            <param name="b">Point B of triangle ABC.</param>
            <param name="c">Point C of triangle ABC.</param>
            <param name="area">The 2D area of the triangle.</param>
        </member>
        <member name="T:SharpNav.Crowds.Agent">
            <summary>
            A crowd agent is a unit that moves across the navigation mesh
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.Agent.AgentMaxCorners">
            <summary>
            The maximum number of corners a crowd agent will look ahead in the path
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.Agent.Integrate(System.Single)">
            <summary>
            Update the position after a certain time 'dt'
            </summary>
            <param name="dt">Time that passed</param>
        </member>
        <member name="M:SharpNav.Crowds.Agent.RequestMoveTargetReplan(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3)">
            <summary>
            Change the move target
            </summary>
            <param name="reference">The polygon reference</param>
            <param name="pos">The target's coordinates</param>
        </member>
        <member name="M:SharpNav.Crowds.Agent.RequestMoveTarget(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3)">
            <summary>
            Request a new move target
            </summary>
            <param name="reference">The polygon reference</param>
            <param name="pos">The target's coordinates</param>
            <returns>True if request met, false if not</returns>
        </member>
        <member name="M:SharpNav.Crowds.Agent.RequestMoveVelocity(SharpNav.Geometry.Vector3)">
            <summary>
            Request a new move velocity
            </summary>
            <param name="vel">The agent's velocity</param>
        </member>
        <member name="M:SharpNav.Crowds.Agent.ResetMoveTarget">
            <summary>
            Reset the move target of an agent
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.Agent.UpdateAgentParameters(SharpNav.Crowds.AgentParams)">
            <summary>
            Modify the agent parameters
            </summary>
            <param name="parameters">The new parameters</param>
        </member>
        <member name="T:SharpNav.Crowds.Crowd">
            <summary>
            The Crowd class manages pathfinding for multiple agents simulatenously.
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.Crowd.AgentMaxObstacleAvoidanceParams">
            <summary>
            The maximum number of crowd avoidance configurations supported by the crowd manager
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.Crowd.AgentMaxNeighbors">
            <summary>
            The maximum number of neighbors that a crowd agent can take into account for steering decisions
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.Crowd.AgentMaxCorners">
            <summary>
            The maximum number of corners a crowd agent will look ahead in the path
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.#ctor(System.Int32,System.Single,SharpNav.TiledNavMesh@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Crowds.Crowd" /> class.
            </summary>
            <param name="maxAgents">The maximum agents allowed</param>
            <param name="maxAgentRadius">The maximum radius for an agent</param>
            <param name="navMesh">The navigation mesh</param>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.AddAgent(SharpNav.Geometry.Vector3,SharpNav.Crowds.AgentParams)">
            <summary>
            Add an agent to the crowd.
            </summary>
            <param name="pos">The agent's position</param>
            <param name="parameters">The settings</param>
            <returns>The id of the agent (-1 if there is no empty slot)</returns>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.RemoveAgent(System.Int32)">
            <summary>
            The agent is deactivated and will no longer be processed. It can still be reused later.
            </summary>
            <param name="index">The agent's id</param>
            <returns>A value indicating whether the agent was successfully removed.</returns>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.GetActiveAgents(SharpNav.Crowds.Agent[])">
            <summary>
            The crowd contains active and inactive agents. Only add all the active agents to a separate array.
            </summary>
            <param name="agents">The array of active agents</param>
            <returns>The number of active agents</returns>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.GetAgentIndex(SharpNav.Crowds.Agent)">
            <summary>
            Get the agent's index in the array
            </summary>
            <param name="agent">The agent</param>
            <returns>The index</returns>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.Update(System.Single)">
            <summary>
            Update the crowd pathfinding periodically 
            </summary>
            <param name="dt">Th time until the next update</param>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.UpdateMoveRequest">
            <summary>
            Change the move requests for all the agents
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.UpdateTopologyOptimization(SharpNav.Crowds.Agent[],System.Int32,System.Single)">
            <summary>
            Reoptimize the path corridor for all agents
            </summary>
            <param name="agents">The agents array</param>
            <param name="numAgents">The number of agents</param>
            <param name="dt">Time until next update</param>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.CheckPathValidity(SharpNav.Crowds.Agent[],System.Int32,System.Single)">
            <summary>
            Make sure that each agent is taking a valid path
            </summary>
            <param name="agents">The agent array</param>
            <param name="agentCount">The number of agents</param>
            <param name="dt">Time until next update</param>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.CalcSmoothSteerDirection(SharpNav.Crowds.Agent,SharpNav.Geometry.Vector3@)">
            <summary>
            Calculate a vector based off of the map
            </summary>
            <param name="ag">The agent</param>
            <param name="dir">The resulting steer direction</param>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.CalcStraightSteerDirection(SharpNav.Crowds.Agent,SharpNav.Geometry.Vector3@)">
            <summary>
            Calculate a straight vector to the destination
            </summary>
            <param name="ag">The agent</param>
            <param name="dir">The resulting steer direction</param>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.GetDistanceToGoal(SharpNav.Crowds.Agent,System.Single)">
            <summary>
            Find the crowd agent's distance to its goal
            </summary>
            <param name="ag">Thw crowd agent</param>
            <param name="range">The maximum range</param>
            <returns>Distance to goal</returns>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.GetNeighbors(SharpNav.Geometry.Vector3,System.Single,System.Single,SharpNav.Crowds.Agent,SharpNav.Crowds.CrowdNeighbor[],System.Int32,SharpNav.Crowds.Agent[],SharpNav.Collections.Generic.ProximityGrid{SharpNav.Crowds.Agent})">
            <summary>
            Get the crowd agent's neighbors.
            </summary>
            <param name="pos">Current position</param>
            <param name="height">The height</param>
            <param name="range">The range to search within</param>
            <param name="skip">The current crowd agent</param>
            <param name="result">The neihbors array</param>
            <param name="maxResult">The maximum number of neighbors that can be stored</param>
            <param name="agents">Array of all crowd agents</param>
            <param name="grid">The ProximityGrid</param>
            <returns>The number of neighbors</returns>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.AddNeighbor(SharpNav.Crowds.Agent,System.Single,SharpNav.Crowds.CrowdNeighbor[],System.Int32,System.Int32)">
            <summary>
            Add a CrowdNeighbor to the array
            </summary>
            <param name="agent">The neighbor</param>
            <param name="dist">Distance from current agent</param>
            <param name="neis">The neighbors array</param>
            <param name="nneis">The number of neighbors</param>
            <param name="maxNeis">The maximum number of neighbors allowed</param>
            <returns>An updated neighbor count</returns>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.AddToPathQueue(SharpNav.Crowds.Agent,SharpNav.Crowds.Agent[],System.Int32,System.Int32)">
            <summary>
            Add the CrowdAgent to the path queue
            </summary>
            <param name="newag">The new CrowdAgent</param>
            <param name="agents">The current CrowdAgent array</param>
            <param name="numAgents">The number of CrowdAgents</param>
            <param name="maxAgents">The maximum number of agents allowed</param>
            <returns>An updated agent count</returns>
        </member>
        <member name="M:SharpNav.Crowds.Crowd.AddToOptQueue(SharpNav.Crowds.Agent,SharpNav.Crowds.Agent[],System.Int32,System.Int32)">
            <summary>
            Add the CrowdAgent to the optimization queue
            </summary>
            <param name="newag">The new CrowdAgent</param>
            <param name="agents">The current CrowdAgent array</param>
            <param name="numAgents">The number of CrowdAgents</param>
            <param name="maxAgents">The maximum number of agents allowed</param>
            <returns>An updated agent count</returns>
        </member>
        <member name="T:SharpNav.Crowds.CrowdNeighbor">
            <summary>
            A neighboring crowd agent
            </summary>
        </member>
        <member name="T:SharpNav.Crowds.AgentParams">
            <summary>
            Settings for a particular crowd agent
            </summary>
        </member>
        <member name="T:SharpNav.Crowds.AgentState">
            <summary>
            Describes the current state of a crowd agent
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.AgentState.Invalid">
            <summary>
            Not in any state
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.AgentState.Walking">
            <summary>
            Walking on the navigation mesh
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.AgentState.Offmesh">
            <summary>
            Handling an offmesh connection
            </summary>
        </member>
        <member name="T:SharpNav.Crowds.Status">
            <summary>
            The status of an asynchronous task.
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.Status.InvalidData">
            <summary>Something is wrong with the input data</summary>
        </member>
        <member name="F:SharpNav.Crowds.Status.InvalidParam">
            <summary>A parameter was invalid</summary>
        </member>
        <member name="F:SharpNav.Crowds.Status.BufferTooSmall">
            <summary>Result buffer was too small for the output</summary>
        </member>
        <member name="F:SharpNav.Crowds.Status.OutOfNodes">
            <summary>Query ran out of nodes during search</summary>
        </member>
        <member name="F:SharpNav.Crowds.Status.PartialResult">
            <summary>Query didn't reach the end. Result is the best guess.</summary>
        </member>
        <member name="F:SharpNav.Crowds.Status.DetailMask">
            <summary>A bitmask for detailed status values</summary>
        </member>
        <member name="F:SharpNav.Crowds.Status.InProgress">
            <summary>Operation in progress</summary>
        </member>
        <member name="F:SharpNav.Crowds.Status.Success">
            <summary>Operation finished</summary>
        </member>
        <member name="F:SharpNav.Crowds.Status.Failure">
            <summary>Operation failed to complete</summary>
        </member>
        <member name="T:SharpNav.Crowds.StatusExtensions">
            <summary>
            A static class containing extension methods related to the <see cref="T:SharpNav.Crowds.Status"/> enum.
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.StatusExtensions.ToStatus(System.Boolean)">
            <summary>
            Converts a boolean value to a <see cref="T:SharpNav.Crowds.Status"/>.
            </summary>
            <param name="variable">The boolean value.</param>
            <returns>The equivalent status.</returns>
        </member>
        <member name="T:SharpNav.Crowds.TargetState">
            <summary>
            This state changes depending on what the crowd agent has to do next
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.TargetState.None">
            <summary>
            Not in any state
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.TargetState.Failed">
            <summary>
            Failed to find a new path
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.TargetState.Valid">
            <summary>
            Target destination reached.
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.TargetState.Requesting">
            <summary>
            Requesting a new path
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.TargetState.WaitingForQueue">
            <summary>
            Add this agent to the crowd manager's path queue
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.TargetState.WaitingForPath">
            <summary>
            The agent is in the path queue
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.TargetState.Velocity">
            <summary>
            Changing its velocity
            </summary>
        </member>
        <member name="T:SharpNav.Crowds.UpdateFlags">
            <summary>
            The UpdateFlag affects the way the agent moves acorss its path.
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.UpdateFlags.AnticipateTurns">
            <summary>
            The agent will be making turns in its path
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.UpdateFlags.ObstacleAvoidance">
            <summary>
            Avoid obstacles on the path
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.UpdateFlags.Separation">
            <summary>
            Separate this agent from other agents
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.UpdateFlags.OptimizeVis">
            <summary>
            Optimize if the agent can see the next corner
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.UpdateFlags.OptimizeTopo">
            <summary>
            Optimize the agent's path corridor
            </summary>
        </member>
        <member name="T:SharpNav.Crowds.LocalBoundary">
            <summary>
            The LocalBoundary class stores segments and polygon indices for temporary use.
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.LocalBoundary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Crowds.LocalBoundary" /> class.
            </summary>
        </member>
        <member name="P:SharpNav.Crowds.LocalBoundary.Center">
            <summary>
            Gets the center
            </summary>
        </member>
        <member name="P:SharpNav.Crowds.LocalBoundary.Segs">
            <summary>
            Gets the segments
            </summary>
        </member>
        <member name="P:SharpNav.Crowds.LocalBoundary.SegCount">
            <summary>
            Gets the number of segments
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.LocalBoundary.Reset">
            <summary>
            Reset all the internal data
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.LocalBoundary.AddSegment(System.Single,SharpNav.Crowds.LocalBoundary.Segment)">
            <summary>
            Add a line segment
            </summary>
            <param name="dist">The distance</param>
            <param name="s">The line segment</param>
        </member>
        <member name="M:SharpNav.Crowds.LocalBoundary.Update(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3,System.Single,SharpNav.NavMeshQuery)">
            <summary>
            Examine polygons in the NavMeshQuery and add polygon edges
            </summary>
            <param name="reference">The starting polygon reference</param>
            <param name="pos">Current position</param>
            <param name="collisionQueryRange">Range to query</param>
            <param name="navquery">The NavMeshQuery</param>
        </member>
        <member name="M:SharpNav.Crowds.LocalBoundary.IsValid(SharpNav.NavMeshQuery)">
            <summary>
            Determines whether the polygon reference is a part of the NavMeshQuery.
            </summary>
            <param name="navquery">The NavMeshQuery</param>
            <returns>True if valid, false if not</returns>
        </member>
        <member name="T:SharpNav.Crowds.LocalBoundary.Segment">
            <summary>
            A line segment contains two points
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.LocalBoundary.Segment.Start">
            <summary>
            Start and end points
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.LocalBoundary.Segment.End">
            <summary>
            Start and end points
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.LocalBoundary.Segment.Dist">
            <summary>
            Distance for pruning
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.ObstacleAvoidanceQuery.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Crowds.ObstacleAvoidanceQuery" /> class.
            </summary>
            <param name="maxCircles">The maximum number of circles</param>
            <param name="maxSegments">The maximum number of segments</param>
        </member>
        <member name="M:SharpNav.Crowds.ObstacleAvoidanceQuery.Reset">
            <summary>
            Resets the ObstacleAvoidanceQuery's internal data
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.ObstacleAvoidanceQuery.AddCircle(SharpNav.Geometry.Vector3,System.Single,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Add a new circle to the array
            </summary>
            <param name="pos">The position</param>
            <param name="rad">The radius</param>
            <param name="vel">The velocity</param>
            <param name="dvel">The desired velocity</param>
        </member>
        <member name="M:SharpNav.Crowds.ObstacleAvoidanceQuery.AddSegment(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Add a segment to the array
            </summary>
            <param name="p">One endpoint</param>
            <param name="q">The other endpoint</param>
        </member>
        <member name="M:SharpNav.Crowds.ObstacleAvoidanceQuery.Prepare(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Prepare the obstacles for further calculations
            </summary>
            <param name="position">Current position</param>
            <param name="desiredVel">Desired velocity</param>
        </member>
        <member name="F:SharpNav.Crowds.ObstacleAvoidanceQuery.ObstacleCircle.Position">
            <summary>
            The position of the obstacle
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.ObstacleAvoidanceQuery.ObstacleCircle.Vel">
            <summary>
            The velocity of the obstacle
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.ObstacleAvoidanceQuery.ObstacleCircle.DesiredVel">
            <summary>
            The desired velocity of the obstacle
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.ObstacleAvoidanceQuery.ObstacleCircle.Radius">
            <summary>
            The radius of the obstacle
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.ObstacleAvoidanceQuery.ObstacleCircle.Dp">
            <summary>
            Used for side selection during sampling
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.ObstacleAvoidanceQuery.ObstacleCircle.Np">
            <summary>
            Used for side selection during sampling
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.ObstacleAvoidanceQuery.ObstacleSegment.P">
            <summary>
            Endpoints of the obstacle segment
            </summary>
        </member>
        <member name="F:SharpNav.Crowds.ObstacleAvoidanceQuery.ObstacleSegment.Q">
            <summary>
            Endpoints of the obstacle segment
            </summary>
        </member>
        <member name="M:SharpNav.Crowds.PathCorridor.Reset(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3)">
            <summary>
            Resets the path to the first polygon.
            </summary>
            <param name="reference">The starting polygon reference</param>
            <param name="pos">Starting position</param>
        </member>
        <member name="M:SharpNav.Crowds.PathCorridor.SetCorridor(SharpNav.Geometry.Vector3,SharpNav.Pathfinding.Path)">
            <summary>
            The current corridor position is expected to be within the first polygon in the path. The target
            is expected to be in the last polygon.
            </summary>
            <param name="target">The target</param>
            <param name="path">The polygon path</param>
        </member>
        <member name="M:SharpNav.Crowds.PathCorridor.MovePosition(SharpNav.Geometry.Vector3,SharpNav.NavMeshQuery)">
            <summary>
            Move along the NavMeshQuery and update the position
            </summary>
            <param name="npos">Current position</param>
            <param name="navquery">The NavMeshQuery</param>
            <returns>True if position changed, false if not</returns>
        </member>
        <member name="M:SharpNav.Crowds.PathCorridor.OptimizePathTopology(SharpNav.NavMeshQuery,SharpNav.Pathfinding.NavQueryFilter)">
            <summary>
            Use a local area path search to try to reoptimize this corridor
            </summary>
            <param name="navquery">The NavMeshQuery</param>
            <returns>True if optimized, false if not</returns>
        </member>
        <member name="M:SharpNav.Crowds.PathCorridor.OptimizePathVisibility(SharpNav.Geometry.Vector3,System.Single,SharpNav.NavMeshQuery)">
            <summary>
            Use an efficient local visibility search to try to optimize the corridor between the current position and the next.
            </summary>
            <param name="next">The next postion</param>
            <param name="pathOptimizationRange">The range</param>
            <param name="navquery">The NavMeshQuery</param>
        </member>
        <member name="M:SharpNav.Crowds.PathCorridor.MergeCorridorStartMoved(SharpNav.Pathfinding.Path,System.Collections.Generic.List{SharpNav.Pathfinding.NavPolyId})">
            <summary>
            Merge two paths after the start is changed
            </summary>
            <param name="path">The current path</param>
            <param name="npath">Current path length</param>
            <param name="maxPath">Maximum path length allowed</param>
            <param name="visited">The visited polygons</param>
            <param name="nvisited">Visited path length</param>
            <returns>New path length</returns>
        </member>
        <member name="M:SharpNav.Crowds.PathCorridor.MergeCorridorStartShortcut(SharpNav.Pathfinding.Path,SharpNav.Pathfinding.Path)">
            <summary>
            Merge two paths when a shorter path is found
            </summary>
            <param name="path">The current path</param>
            <param name="npath">Current path length</param>
            <param name="maxPath">Maximum path length allowed</param>
            <param name="visited">The visited polygons</param>
            <param name="nvisited">Visited path length</param>
            <returns>New path length</returns>
        </member>
        <member name="M:SharpNav.Crowds.PathCorridor.FixPathStart(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3)">
            <summary>
            Adjust the beginning of the path
            </summary>
            <param name="safeRef">The starting polygon reference</param>
            <param name="safePos">The starting position</param>
            <returns>True if path start changed, false if not</returns>
        </member>
        <member name="M:SharpNav.Crowds.PathCorridor.IsValid(System.Int32,SharpNav.NavMeshQuery)">
            <summary>
            Determines whether all the polygons in the path are valid
            </summary>
            <param name="maxLookAhead">The amount of polygons to examine</param>
            <param name="navquery">The NavMeshQuery</param>
            <returns>True if all valid, false if otherwise</returns>
        </member>
        <member name="M:SharpNav.Crowds.PathQueue.Request(SharpNav.Pathfinding.NavPoint,SharpNav.Pathfinding.NavPoint)">
            <summary>
            Request an empty slot in the path queue
            </summary>
            <param name="start">Start position</param>
            <param name="end">End position</param>
            <returns>Index of empty slot</returns>
        </member>
        <member name="M:SharpNav.Crowds.PathQueue.GetRequestStatus(System.Int32)">
            <summary>
            Get the status of the polygon in the path queue
            </summary>
            <param name="reference">The polygon reference</param>
            <returns>The status in the queue</returns>
        </member>
        <member name="T:SharpNav.Direction">
            <summary>
            A set of cardinal directions.
            </summary>
        </member>
        <member name="F:SharpNav.Direction.West">
            <summary>
            The west direction.
            </summary>
        </member>
        <member name="F:SharpNav.Direction.North">
            <summary>
            The north direction.
            </summary>
        </member>
        <member name="F:SharpNav.Direction.East">
            <summary>
            The east direction.
            </summary>
        </member>
        <member name="F:SharpNav.Direction.South">
            <summary>
            The south direction.
            </summary>
        </member>
        <member name="T:SharpNav.DirectionExtensions">
            <summary>
            A set of extension methods to make using the Direction enum a lot simpler.
            </summary>
        </member>
        <member name="M:SharpNav.DirectionExtensions.GetHorizontalOffset(SharpNav.Direction)">
            <summary>
            Gets an X offset.
            </summary>
            <remarks>
            The directions cycle between the following, starting from 0: west, north, east, south.
            </remarks>
            <param name="dir">The direction.</param>
            <returns>The offset for the X coordinate.</returns>
        </member>
        <member name="M:SharpNav.DirectionExtensions.GetVerticalOffset(SharpNav.Direction)">
            <summary>
            Get a Y offset.
            </summary>
            <remarks>
            The directions cycle between the following, starting from 0: west, north, east, south.
            </remarks>
            <param name="dir">The direction.</param>
            <returns>The offset for the Y coordinate.</returns>
        </member>
        <member name="M:SharpNav.DirectionExtensions.NextClockwise(SharpNav.Direction)">
            <summary>
            Gets the next cardinal direction in clockwise order.
            </summary>
            <param name="dir">The current direction.</param>
            <returns>The next direction.</returns>
        </member>
        <member name="M:SharpNav.DirectionExtensions.NextCounterClockwise(SharpNav.Direction)">
            <summary>
            Gets the next cardinal direction in counter-clockwise order.
            </summary>
            <param name="dir">The current direction.</param>
            <returns>The next direction.</returns>
        </member>
        <member name="T:SharpNav.EdgeFlags">
            <summary>
            An enum similar to <see cref="T:SharpNav.Direction"/>, but with the ability to store multiple directions.
            </summary>
        </member>
        <member name="F:SharpNav.EdgeFlags.None">
            <summary>No edges are selected.</summary>
        </member>
        <member name="F:SharpNav.EdgeFlags.West">
            <summary>The west edge is selected.</summary>
        </member>
        <member name="F:SharpNav.EdgeFlags.North">
            <summary>The north edge is selected.</summary>
        </member>
        <member name="F:SharpNav.EdgeFlags.East">
            <summary>The east edge is selected.</summary>
        </member>
        <member name="F:SharpNav.EdgeFlags.South">
            <summary>The south edge is selected.</summary>
        </member>
        <member name="F:SharpNav.EdgeFlags.All">
            <summary>All of the edges are selected.</summary>
        </member>
        <member name="T:SharpNav.EdgeFlagsHelper">
            <summary>
            A static class with helper functions to modify instances of the <see cref="T:SharpNav.EdgeFlags"/> enum.
            </summary>
        </member>
        <member name="M:SharpNav.EdgeFlagsHelper.AddEdge(SharpNav.EdgeFlags@,SharpNav.Direction)">
            <summary>
            Adds an edge in a specified direction to an instance of <see cref="T:SharpNav.EdgeFlags"/>.
            </summary>
            <param name="edges">An existing set of edges.</param>
            <param name="dir">The direction to add.</param>
        </member>
        <member name="M:SharpNav.EdgeFlagsHelper.FlipEdges(SharpNav.EdgeFlags@)">
            <summary>
            Flips the set of edges in an instance of <see cref="T:SharpNav.EdgeFlags"/>.
            </summary>
            <param name="edges">An existing set of edges.</param>
        </member>
        <member name="M:SharpNav.EdgeFlagsHelper.IsConnected(SharpNav.EdgeFlags@,SharpNav.Direction)">
            <summary>
            Determines whether an instance of <see cref="T:SharpNav.EdgeFlags"/> includes an edge in a specified direction.
            </summary>
            <param name="edges">A set of edges.</param>
            <param name="dir">The direction to check for an edge.</param>
            <returns>A value indicating whether the set of edges contains an edge in the specified direction.</returns>
        </member>
        <member name="M:SharpNav.EdgeFlagsHelper.RemoveEdge(SharpNav.EdgeFlags@,SharpNav.Direction)">
            <summary>
            Removes an edge from an instance of <see cref="T:SharpNav.EdgeFlags"/>.
            </summary>
            <param name="edges">A set of edges.</param>
            <param name="dir">The direction to remove.</param>
        </member>
        <member name="T:SharpNav.Geometry.BBox2i">
            <summary>
            A 2d bounding box represeted by integers.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.BBox2i.Min">
            <summary>
            The minimum of the bounding box.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.BBox2i.Max">
            <summary>
            The maximum of the bounding box.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.BBox2i.#ctor(SharpNav.Geometry.Vector2i,SharpNav.Geometry.Vector2i)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Geometry.BBox2i"/> struct.
            </summary>
            <param name="min">A minimum bound.</param>
            <param name="max">A maximum bound.</param>
        </member>
        <member name="M:SharpNav.Geometry.BBox2i.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Geometry.BBox2i"/> struct.
            </summary>
            <param name="minX">The minimum X bound.</param>
            <param name="minY">The minimum Y bound.</param>
            <param name="maxX">The maximum X bound.</param>
            <param name="maxY">The maximum Y bound.</param>
        </member>
        <member name="M:SharpNav.Geometry.BBox2i.op_Equality(SharpNav.Geometry.BBox2i,SharpNav.Geometry.BBox2i)">
            <summary>
            Compares two instances of <see cref="T:SharpNav.Geometry.BBox2i"/> for equality.
            </summary>
            <param name="left">An instance of <see cref="T:SharpNav.Geometry.BBox2i"/>.</param>
            <param name="right">Another instance of <see cref="T:SharpNav.Geometry.BBox2i"/>.</param>
            <returns>A value indicating whether the two instances are equal.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox2i.op_Inequality(SharpNav.Geometry.BBox2i,SharpNav.Geometry.BBox2i)">
            <summary>
            Compares two instances of <see cref="T:SharpNav.Geometry.BBox2i"/> for inequality.
            </summary>
            <param name="left">An instance of <see cref="T:SharpNav.Geometry.BBox2i"/>.</param>
            <param name="right">Another instance of <see cref="T:SharpNav.Geometry.BBox2i"/>.</param>
            <returns>A value indicating whether the two instances are unequal.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox2i.ToString">
            <summary>
            Turns the instance into a human-readable string.
            </summary>
            <returns>A string representing the instance.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox2i.GetHashCode">
            <summary>
            Gets a unique hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox2i.Equals(System.Object)">
            <summary>
            Checks for equality between this instance and a specified object.
            </summary>
            <param name="obj">An object.</param>
            <returns>A value indicating whether this instance and the object are equal.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox2i.Equals(SharpNav.Geometry.BBox2i)">
            <summary>
            Checks for equality between this instance and a specified instance of <see cref="T:SharpNav.Geometry.BBox2i"/>.
            </summary>
            <param name="other">An instance of <see cref="T:SharpNav.Geometry.BBox2i"/>.</param>
            <returns>A value indicating whether this instance and the other instance are equal.</returns>
        </member>
        <member name="T:SharpNav.Geometry.Containment">
            <summary>
            Contains helper methods to check for containment of points or shapes.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Containment.PointInPoly(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3[],System.Int32)">
            <summary>
            Determines whether a point is inside a polygon.
            </summary>
            <param name="pt">A point.</param>
            <param name="verts">A set of vertices that define a polygon.</param>
            <param name="nverts">The number of vertices to use from <c>verts</c>.</param>
            <returns>A value indicating whether the point is contained within the polygon.</returns>
        </member>
        <member name="T:SharpNav.Geometry.Distance">
            <summary>
            Contains helper methods to calculate the distance between two objects.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Distance.PointToSegmentSquared(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Find the 3D distance between a point (x, y, z) and a segment PQ
            </summary>
            <param name="pt">The coordinate of the point.</param>
            <param name="p">The coordinate of point P in the segment PQ.</param>
            <param name="q">The coordinate of point Q in the segment PQ.</param>
            <returns>The distance between the point and the segment.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Distance.PointToSegment2DSquared(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the 2d distance between a point (x, z) and a segment PQ, where P is (px, pz) and Q is (qx, qz).
            </summary>
            <param name="x">The X coordinate of the point.</param>
            <param name="z">The Z coordinate of the point.</param>
            <param name="px">The X coordinate of point P in the segment PQ.</param>
            <param name="pz">The Z coordinate of point P in the segment PQ.</param>
            <param name="qx">The X coordinate of point Q in the segment PQ.</param>
            <param name="qz">The Z coordinate of point Q in the segment PQ.</param>
            <returns>The distance between the point and the segment.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Distance.PointToSegment2DSquared(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Find the 2d distance between a point and a segment PQ
            </summary>
            <param name="pt">The coordinate of the point.</param>
            <param name="p">The coordinate of point P in the segment PQ.</param>
            <param name="q">The coordinate of point Q in the segment PQ.</param>
            <returns>The distance between the point and the segment.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Distance.PointToSegment2DSquared(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single@)">
            <summary>
            Find the 2d distance between a point and a segment PQ
            </summary>
            <param name="pt">The coordinate of the point.</param>
            <param name="p">The coordinate of point P in the segment PQ.</param>
            <param name="q">The coordinate of point Q in the segment PQ.</param>
            <param name="t">Parameterization ratio t</param>
            <returns>The distance between the point and the segment.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Distance.PointToPolygonEdgeSquared(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3[],System.Int32)">
            <summary>
            Finds the squared distance between a point and the nearest edge of a polygon.
            </summary>
            <param name="pt">A point.</param>
            <param name="verts">A set of vertices that define a polygon.</param>
            <param name="nverts">The number of vertices to use from <c>verts</c>.</param>
            <returns>The squared distance between a point and the nearest edge of a polygon.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Distance.PointToPolygonEdgeSquared(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3[],System.Int32,System.Single[],System.Single[])">
            <summary>
            Finds the distance between a point and the nearest edge of a polygon.
            </summary>
            <param name="pt">A point.</param>
            <param name="verts">A set of vertices that define a polygon.</param>
            <param name="nverts">The number of vertices to use from <c>verts</c>.</param>
            <param name="edgeDist">A buffer for edge distances to be stored in.</param>
            <param name="edgeT">A buffer for parametrization ratios to be stored in.</param>
            <returns>A value indicating whether the point is contained in the polygon.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Distance.PointToTriangle(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Finds the distance between a point and triangle ABC.
            </summary>
            <param name="p">A point.</param>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
            <returns>The distnace between the point and the triangle.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Distance.PointToTriangle(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,System.Single@)">
            <summary>
            Finds the distance between a point and triangle ABC.
            </summary>
            <param name="p">A point.</param>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
            <param name="height">The height between the point and the triangle.</param>
            <returns>A value indicating whether the point is contained within the triangle.</returns>
        </member>
        <member name="T:SharpNav.Geometry.Intersection">
            <summary>
            Contains helper methods to check for intersection between two objects.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Intersection.RaySegment(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,System.Single@)">
            <summary>
            Determine whether a ray (origin, dir) is intersecting a segment AB.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="dir">The direction of the ray.</param>
            <param name="a">The endpoint A of segment AB.</param>
            <param name="b">The endpoint B of segment AB.</param>
            <param name="t">The parameter t</param>
            <returns>A value indicating whether the ray is intersecting with the segment.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Intersection.SegmentSegment2D(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Determines whether two 2D segments AB and CD are intersecting.
            </summary>
            <param name="a">The endpoint A of segment AB.</param>
            <param name="b">The endpoint B of segment AB.</param>
            <param name="c">The endpoint C of segment CD.</param>
            <param name="d">The endpoint D of segment CD.</param>
            <returns>A value indicating whether the two segments are intersecting.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Intersection.SegmentSegment2D(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single@,System.Single@)">
            <summary>
            Determines whether two 2D segments AB and CD are intersecting.
            </summary>
            <param name="a">The endpoint A of segment AB.</param>
            <param name="b">The endpoint B of segment AB.</param>
            <param name="c">The endpoint C of segment CD.</param>
            <param name="d">The endpoint D of segment CD.</param>
            <param name="s">The normalized dot product between CD and AC on the XZ plane.</param>
            <param name="t">The normalized dot product between AB and AC on the XZ plane.</param>
            <returns>A value indicating whether the two segments are intersecting.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Intersection.PolyPoly2D(SharpNav.Geometry.Vector3[],System.Int32,SharpNav.Geometry.Vector3[],System.Int32)">
            <summary>
            Determines whether two polygons A and B are intersecting
            </summary>
            <param name="polya">Polygon A's vertices</param>
            <param name="npolya">Number of vertices for polygon A</param>
            <param name="polyb">Polygon B's vertices</param>
            <param name="npolyb">Number of vertices for polygon B</param>
            <returns>True if intersecting, false if not</returns>
        </member>
        <member name="M:SharpNav.Geometry.Intersection.SegmentPoly2D(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3[],System.Int32,System.Single@,System.Single@,System.Int32@,System.Int32@)">
            <summary>
            Determines whether the segment interesects with the polygon.
            </summary>
            <param name="p0">Segment's first endpoint</param>
            <param name="p1">Segment's second endpoint</param>
            <param name="verts">Polygon's vertices</param>
            <param name="nverts">The number of vertices in the polygon</param>
            <param name="tmin">Parameter t minimum</param>
            <param name="tmax">Parameter t maximum</param>
            <param name="segMin">Minimum vertex index</param>
            <param name="segMax">Maximum vertex index</param>
            <returns>True if intersect, false if not</returns>
        </member>
        <member name="T:SharpNav.Geometry.TriangleEnumerable">
            <summary>
            A static class that generates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:SharpNav.Geometry.Triangle3"/> using iterator blocks.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.FromTriangle(SharpNav.Geometry.Triangle3[],System.Int32,System.Int32)">
            <summary>
            Iterates over an array of <see cref="T:SharpNav.Geometry.Triangle3"/> with a specified offset and length.
            </summary>
            <param name="triangles">An array of triangles.</param>
            <param name="triOffset">The index of the first triangle to be enumerated.</param>
            <param name="triCount">The number of triangles to enumerate.</param>
            <returns>An enumerable collection of triangles.</returns>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.FromVector3(SharpNav.Geometry.Vector3[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Iterates over an array of <see cref="T:SharpNav.Geometry.Vector3"/> with a specified offset, stride, and length.
            </summary>
            <param name="vertices">An array of vertices.</param>
            <param name="vertOffset">The index of the first vertex to be enumerated.</param>
            <param name="vertStride">The distance between the start of two triangles. A value of 0 means the data is tightly packed.</param>
            <param name="triCount">The number of triangles to enumerate.</param>
            <returns>An enumerable collection of triangles.</returns>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.FromFloat(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Iterates over an array of <see cref="T:System.Single"/> with a specified offset, stride, and length.
            </summary>
            <param name="vertices">An array of vertices.</param>
            <param name="floatOffset">The index of the first float to be enumerated.</param>
            <param name="floatStride">The distance between the start of two vertices. A value of 0 means the data is tightly packed.</param>
            <param name="triCount">The number of triangles to enumerate.</param>
            <returns>An enumerable collection of triangles.</returns>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.FromIndexedVector3(SharpNav.Geometry.Vector3[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Iterates over an array of <see cref="T:SharpNav.Geometry.Vector3"/> indexed by an array of <see cref="T:System.Int32"/> with a specified offset, stride, and length.
            </summary>
            <param name="vertices">An array of vertices.</param>
            <param name="indices">An array of indices.</param>
            <param name="vertOffset">The index of the first vertex to be enumerated.</param>
            <param name="vertStride">The distance between the start of two triangles. A value of 0 means the data is tightly packed.</param>
            <param name="indexOffset">The index of the first index to be enumerated.</param>
            <param name="triCount">The number of triangles to enumerate.</param>
            <returns>An enumerable collection of triangles.</returns>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.FromIndexedFloat(System.Single[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Iterates over an array of <see cref="T:System.Single"/> indexed by an array of <see cref="T:System.Int32"/> with a specified offset, stride, and length.
            </summary>
            <param name="vertices">An array of vertices.</param>
            <param name="indices">An array of indices.</param>
            <param name="floatOffset">The index of the first float to be enumerated.</param>
            <param name="floatStride">The distance between the start of two vertices. A value of 0 means the data is tightly packed.</param>
            <param name="indexOffset">The index of the first index to be enumerated.</param>
            <param name="triCount">The number of triangles to enumerate.</param>
            <returns>An enumerable collection of triangles.</returns>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.GetBoundingBox(System.Collections.Generic.IEnumerable{SharpNav.Geometry.Triangle3})">
            <summary>
            Generates a bounding box for a collection of triangles.
            </summary>
            <param name="tris">The triangles to create a bounding box from.</param>
            <returns>A bounding box containing every triangle.</returns>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.GetBoundingBox(System.Collections.Generic.IEnumerable{SharpNav.Geometry.Triangle3},System.Single)">
            <summary>
            Generates a bounding box for a collection of triangles.
            </summary>
            <param name="tris">The triangles to create a bounding box from.</param>
            <param name="padding">Padding to the bounding box</param>
            <returns>A bounding box containing every triangle.</returns>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.GetBoundingBox(System.Collections.Generic.IEnumerable{SharpNav.Geometry.Vector3})">
            <summary>
            Generates a bounding box for a collection of vectors.
            </summary>
            <param name="vecs">The vectors to create a bounding box from.</param>
            <returns>A bounding box containing every vector.</returns>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.ApplyVertexToBounds(SharpNav.Geometry.Vector3@,SharpNav.Geometry.BBox3@)">
            <summary>
            Adjusts a bounding box to include a vertex.
            </summary>
            <param name="v">The vertex to include.</param>
            <param name="b">The bounding box to adjust.</param>
        </member>
        <member name="M:SharpNav.Geometry.TriangleEnumerable.ApplyPaddingToBounds(System.Single,SharpNav.Geometry.BBox3@)">
            <summary>
            Applies a padding to the bounding box.
            </summary>
            <param name="pad">The amount to pad the bounding box on all sides.</param>
            <param name="b">The bounding box to pad.</param>
        </member>
        <member name="T:SharpNav.Geometry.Vector2i">
            <summary>
            A 2d vector represented by integers.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2i.Min">
            <summary>
            A vector where both X and Y are <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2i.Max">
            <summary>
            A vector where both X and Y are <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2i.Zero">
            <summary>
            A vector where both X and Y are 0.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2i.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2i.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Geometry.Vector2i"/> struct with a specified coordinate.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2i.op_Equality(SharpNav.Geometry.Vector2i,SharpNav.Geometry.Vector2i)">
            <summary>
            Compares two instances of <see cref="T:SharpNav.Geometry.Vector2i"/> for equality.
            </summary>
            <param name="left">An instance of <see cref="T:SharpNav.Geometry.Vector2i"/>.</param>
            <param name="right">Another instance of <see cref="T:SharpNav.Geometry.Vector2i"/>.</param>
            <returns>A value indicating whether the two instances are equal.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2i.op_Inequality(SharpNav.Geometry.Vector2i,SharpNav.Geometry.Vector2i)">
            <summary>
            Compares two instances of <see cref="T:SharpNav.Geometry.Vector2i"/> for inequality.
            </summary>
            <param name="left">An instance of <see cref="T:SharpNav.Geometry.Vector2i"/>.</param>
            <param name="right">Another instance of <see cref="T:SharpNav.Geometry.Vector2i"/>.</param>
            <returns>A value indicating whether the two instances are unequal.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2i.GetHashCode">
            <summary>
            Gets a unique hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2i.ToString">
            <summary>
            Turns the instance into a human-readable string.
            </summary>
            <returns>A string representing the instance.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2i.Equals(System.Object)">
            <summary>
            Checks for equality between this instance and a specified object.
            </summary>
            <param name="obj">An object.</param>
            <returns>A value indicating whether this instance and the object are equal.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2i.Equals(SharpNav.Geometry.Vector2i)">
            <summary>
            Checks for equality between this instance and a specified instance of <see cref="T:SharpNav.Geometry.Vector2i"/>.
            </summary>
            <param name="other">An instance of <see cref="T:SharpNav.Geometry.Vector2i"/>.</param>
            <returns>A value indicating whether this instance and the other instance are equal.</returns>
        </member>
        <member name="T:SharpNav.Geometry.BBox3">
            <summary>
            A 3d axis-aligned bounding box.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.BBox3.Min">
            <summary>
            The minimum bounds.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.BBox3.Max">
            <summary>
            The maximum bounds.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.#ctor(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Geometry.BBox3"/> struct.
            </summary>
            <param name="min">The minimum bounds.</param>
            <param name="max">The maximum bounds.</param>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Geometry.BBox3"/> struct.
            </summary>
            <param name="minX">The minimum on the X axis.</param>
            <param name="minY">The minimum on the Y axis.</param>
            <param name="minZ">The minimum on the Z axis.</param>
            <param name="maxX">The maximum on the X axis.</param>
            <param name="maxY">The maximum on the Y axis.</param>
            <param name="maxZ">The maximum on the Z axis.</param>
        </member>
        <member name="P:SharpNav.Geometry.BBox3.Center">
            <summary>
            Gets the center of the box.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.BBox3.Size">
            <summary>
            Gets the size of the box.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.Overlapping(SharpNav.Geometry.BBox3@,SharpNav.Geometry.BBox3@)">
            <summary>
            Checks whether two boudning boxes are intersecting.
            </summary>
            <param name="a">The first bounding box.</param>
            <param name="b">The second bounding box.</param>
            <returns>A value indicating whether the two bounding boxes are overlapping.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.IsValid(SharpNav.Geometry.BBox3@)">
            <summary>
            Determines whether a bounding box is valid. Validity consists of having no NaN values and the Min vector
            to be less than the Max vector on all axes.
            </summary>
            <param name="b">The bounding box to validate.</param>
            <returns>A value indicating whether the bounding box is valid.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.op_Equality(SharpNav.Geometry.BBox3,SharpNav.Geometry.BBox3)">
            <summary>
            Compares two bounding boxes for equality.
            </summary>
            <param name="left">The first bounding box.</param>
            <param name="right">The second bounding box.</param>
            <returns>A value indicating the equality of the two boxes.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.op_Inequality(SharpNav.Geometry.BBox3,SharpNav.Geometry.BBox3)">
            <summary>
            Compares two bounding boxes for inequality.
            </summary>
            <param name="left">The first bounding box.</param>
            <param name="right">The second bounding box.</param>
            <returns>A value indicating the inequality of the two boxes.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.Equals(SharpNav.Geometry.BBox3)">
            <summary>
            Compares this instance with another bounding box for equality.
            </summary>
            <param name="other">Another bounding box.</param>
            <returns>A value indicating the equality of the two boxes.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.Equals(System.Object)">
            <summary>
            Compares this instance with another object for equality.
            </summary>
            <param name="obj">An object.</param>
            <returns>A value indicating equality between the two objects.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.GetHashCode">
            <summary>
            Generates a unique hashcode for this bouding box instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:SharpNav.Geometry.BBox3.ToString">
            <summary>
            Returns a string containing the important information for this instance of <see cref="T:SharpNav.Geometry.BBox3"/>.
            </summary>
            <returns>A human-readable string representation of this instance.</returns>
        </member>
        <member name="T:SharpNav.Geometry.Triangle3">
            <summary>
            A 3d triangle.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Triangle3.A">
            <summary>
            The first point.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Triangle3.B">
            <summary>
            The second point.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Triangle3.C">
            <summary>
            The third point.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.#ctor(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Geometry.Triangle3"/> struct.
            </summary>
            <param name="a">The second point.</param>
            <param name="b">The first point.</param>
            <param name="c">The third point.</param>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.AB">
            <summary>
            Gets the directed line segment from <see cref="F:SharpNav.Geometry.Triangle3.A"/> to <see cref="F:SharpNav.Geometry.Triangle3.B"/>.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.AC">
            <summary>
            Gets the directed line segment from <see cref="F:SharpNav.Geometry.Triangle3.A"/> to <see cref="F:SharpNav.Geometry.Triangle3.C"/>.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.BA">
            <summary>
            Gets the directed line segment from <see cref="F:SharpNav.Geometry.Triangle3.B"/> to <see cref="F:SharpNav.Geometry.Triangle3.A"/>.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.BC">
            <summary>
            Gets the directed line segment from <see cref="F:SharpNav.Geometry.Triangle3.B"/> to <see cref="F:SharpNav.Geometry.Triangle3.C"/>.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.CA">
            <summary>
            Gets the directed line segment from <see cref="F:SharpNav.Geometry.Triangle3.C"/> to <see cref="F:SharpNav.Geometry.Triangle3.A"/>.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.CB">
            <summary>
            Gets the directed line segment from <see cref="F:SharpNav.Geometry.Triangle3.C"/> to <see cref="F:SharpNav.Geometry.Triangle3.B"/>.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.Area">
            <summary>
            Gets the area of the triangle.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.Perimeter">
            <summary>
            Gets the perimeter of the triangle.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.Centroid">
            <summary>
            Gets the centroid of the triangle.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Triangle3.Normal">
            <summary>
            Gets the <see cref="T:SharpNav.Geometry.Triangle3"/>'s surface normal. Assumes clockwise ordering of A, B, and C.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.op_Equality(SharpNav.Geometry.Triangle3,SharpNav.Geometry.Triangle3)">
            <summary>
            Compares two <see cref="T:SharpNav.Geometry.Triangle3"/>'s for equality.
            </summary>
            <param name="left">The first triangle.</param>
            <param name="right">The second triangle.</param>
            <returns>A value indicating whether the two triangles are equal.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.op_Inequality(SharpNav.Geometry.Triangle3,SharpNav.Geometry.Triangle3)">
            <summary>
            Compares two <see cref="T:SharpNav.Geometry.Triangle3"/>'s for inequality.
            </summary>
            <param name="left">The first triangle.</param>
            <param name="right">The second triangle.</param>
            <returns>A value indicating whether the two triangles are not equal.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.GetBoundingBox(SharpNav.Geometry.Triangle3)">
            <summary>
            Calculates the bounding box of a triangle.
            </summary>
            <param name="tri">A triangle.</param>
            <returns>The triangle's bounding box.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.GetBoundingBox(SharpNav.Geometry.Triangle3@,SharpNav.Geometry.BBox3@)">
            <summary>
            Calculates the bounding box of a triangle.
            </summary>
            <param name="tri">A triangle.</param>
            <param name="bbox">The triangle's bounding box.</param>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.GetBoundingBox(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.BBox3@)">
            <summary>
            Calculates the bounding box of a triangle from its vertices.
            </summary>
            <param name="a">The first vertex.</param>
            <param name="b">The second vertex.</param>
            <param name="c">The third vertex.</param>
            <param name="bbox">The bounding box between the points.</param>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.Area2D(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single@)">
            <summary>
            Gets the area of the triangle projected onto the XZ-plane.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
            <param name="area">The calculated area.</param>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.Area2D(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Gets the area of the triangle projected onto the XZ-plane.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
            <returns>The calculated area.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.Equals(SharpNav.Geometry.Triangle3)">
            <summary>
            Checks for equality with another <see cref="T:SharpNav.Geometry.Triangle3"/>.
            </summary>
            <param name="other">The other triangle.</param>
            <returns>A value indicating whether other is equivalent to the triangle.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.Equals(System.Object)">
            <summary>
            Checks for equality with another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>A value indicating whether other is equivalent to the triangle.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.GetHashCode">
            <summary>
            Gets a unique hash code for the triangle.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Triangle3.ToString">
            <summary>
            Converts the triangle's data into a human-readable format.
            </summary>
            <returns>A string containing the triangle's data.</returns>
        </member>
        <member name="T:SharpNav.Geometry.Vector2">
            <summary>Represents a 2D vector using two single-precision floating-point numbers.</summary>
            <remarks>
            The Vector2 structure is suitable for interoperation with unmanaged code requiring two consecutive floats.
            </remarks>
        </member>
        <member name="F:SharpNav.Geometry.Vector2.X">
            <summary>
            The X component of the Vector2.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2.Y">
            <summary>
            The Y component of the Vector2.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.#ctor(System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new Vector2.
            </summary>
            <param name="x">The x coordinate of the net Vector2.</param>
            <param name="y">The y coordinate of the net Vector2.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.#ctor(SharpNav.Geometry.Vector2)">
            <summary>
            Constructs a new Vector2 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.#ctor(SharpNav.Geometry.Vector3)">
            <summary>
            Constructs a new Vector2 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from. Z is discarded.</param>
        </member>
        <member name="P:SharpNav.Geometry.Vector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:SharpNav.Geometry.Vector2.LengthSquared"/>
        </member>
        <member name="P:SharpNav.Geometry.Vector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:SharpNav.Geometry.Vector2.Length"/>
        </member>
        <member name="P:SharpNav.Geometry.Vector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Vector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the index of the Vector.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Normalized">
            <summary>
            Returns a copy of the Vector2 scaled to unit length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2.UnitX">
            <summary>
            Defines a unit-length Vector2 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2.UnitY">
            <summary>
            Defines a unit-length Vector2 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2.Zero">
            <summary>
            Defines a zero-length Vector2.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector2.SizeInBytes">
            <summary>
            Defines the size of the Vector2 struct in bytes.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Add(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Add(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Subtract(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Subtract(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Multiply(SharpNav.Geometry.Vector2,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Multiply(SharpNav.Geometry.Vector2@,System.Single,SharpNav.Geometry.Vector2@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Multiply(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Multiply(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Divide(SharpNav.Geometry.Vector2,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Divide(SharpNav.Geometry.Vector2@,System.Single,SharpNav.Geometry.Vector2@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Divide(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Divide(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.ComponentMin(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.ComponentMin(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.ComponentMax(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.ComponentMax(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Min(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Max(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Clamp(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Clamp(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Normalize(SharpNav.Geometry.Vector2)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Normalize(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Dot(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Dot(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.PerpDot(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Calculate the perpendicular dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The perpendicular dot product of the two inputs</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.PerpDot(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,System.Single@)">
            <summary>
            Calculate the perpendicular dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The perpendicular dot product of the two inputs</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Lerp(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Lerp(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,System.Single,SharpNav.Geometry.Vector2@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.BaryCentric(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.BaryCentric(SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,SharpNav.Geometry.Vector2@,System.Single,System.Single,SharpNav.Geometry.Vector2@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="P:SharpNav.Geometry.Vector2.Yx">
            <summary>
            Gets or sets an OpenTK.Vector2 with the Y and X components of this instance.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.op_Addition(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Adds the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of addition.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.op_Subtraction(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Subtracts the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of subtraction.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.op_UnaryNegation(SharpNav.Geometry.Vector2)">
            <summary>
            Negates the specified instance.
            </summary>
            <param name="vec">Operand.</param>
            <returns>Result of negation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.op_Multiply(SharpNav.Geometry.Vector2,System.Single)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.op_Multiply(System.Single,SharpNav.Geometry.Vector2)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.op_Multiply(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Component-wise multiplication between the specified instance by a scale vector.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.op_Division(SharpNav.Geometry.Vector2,System.Single)">
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.op_Equality(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Compares the specified instances for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.op_Inequality(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2)">
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.ToString">
            <summary>
            Returns a System.String that represents the current Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector2.Equals(SharpNav.Geometry.Vector2)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:SharpNav.Geometry.Vector3">
            <summary>
            Represents a 3D vector using three single-precision floating-point numbers.
            </summary>
            <remarks>
            The Vector3 structure is suitable for interoperation with unmanaged code requiring three consecutive floats.
            </remarks>
        </member>
        <member name="F:SharpNav.Geometry.Vector3.X">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector3.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector3.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.#ctor(System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.#ctor(SharpNav.Geometry.Vector3)">
            <summary>
            Constructs a new Vector3 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="P:SharpNav.Geometry.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the value at the index of the Vector.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Add(SharpNav.Geometry.Vector3)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Add(SharpNav.Geometry.Vector3@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Sub(SharpNav.Geometry.Vector3)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Sub(SharpNav.Geometry.Vector3@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="M:SharpNav.Geometry.Vector3.LengthSquared"/>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="M:SharpNav.Geometry.Vector3.Length"/>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Normalized">
            <summary>
            Returns a copy of the Vector3 scaled to unit length.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Normalize">
            <summary>
            Scales the Vector3 to unit length.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector3 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Scale(SharpNav.Geometry.Vector3)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Scale(SharpNav.Geometry.Vector3@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:SharpNav.Geometry.Vector3.UnitX">
            <summary>
            Defines a unit-length Vector3 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector3.UnitY">
            <summary>
            Defines a unit-length Vector3 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector3.UnitZ">
            <summary>
            /// Defines a unit-length Vector3 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector3.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector3.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:SharpNav.Geometry.Vector3.SizeInBytes">
            <summary>
            Defines the size of the Vector3 struct in bytes.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Sub(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Sub(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Mult(SharpNav.Geometry.Vector3,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Mult(SharpNav.Geometry.Vector3@,System.Single,SharpNav.Geometry.Vector3@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Div(SharpNav.Geometry.Vector3,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Div(SharpNav.Geometry.Vector3@,System.Single,SharpNav.Geometry.Vector3@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Add(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Add(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Subtract(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Subtract(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Multiply(SharpNav.Geometry.Vector3,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Multiply(SharpNav.Geometry.Vector3@,System.Single,SharpNav.Geometry.Vector3@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Multiply(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Multiply(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Divide(SharpNav.Geometry.Vector3,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Divide(SharpNav.Geometry.Vector3@,System.Single,SharpNav.Geometry.Vector3@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Divide(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Divide(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.ComponentMin(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.ComponentMin(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.ComponentMax(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.ComponentMax(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Min(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Max(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Clamp(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Clamp(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Normalize(SharpNav.Geometry.Vector3)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Normalize(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Dot(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Dot(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Cross(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Cross(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Lerp(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Lerp(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single,SharpNav.Geometry.Vector3@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.BaryCentric(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.BaryCentric(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single,System.Single,SharpNav.Geometry.Vector3@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.CalculateAngle(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.CalculateAngle(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="P:SharpNav.Geometry.Vector3.Xzy">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Z, and Y components of this instance.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Vector3.Yxz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the Y, X, and Z components of this instance.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Vector3.Yzx">
            <summary>
            Gets or sets an OpenTK.Vector3 with the Y, Z, and X components of this instance.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Vector3.Zxy">
            <summary>
            Gets or sets an OpenTK.Vector3 with the Z, X, and Y components of this instance.
            </summary>
        </member>
        <member name="P:SharpNav.Geometry.Vector3.Zyx">
            <summary>
            Gets or sets an OpenTK.Vector3 with the Z, Y, and X components of this instance.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.op_Addition(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.op_Subtraction(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.op_UnaryNegation(SharpNav.Geometry.Vector3)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.op_Multiply(SharpNav.Geometry.Vector3,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.op_Multiply(System.Single,SharpNav.Geometry.Vector3)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.op_Multiply(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Component-wise multiplication between the specified instance by a scale vector.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.op_Division(SharpNav.Geometry.Vector3,System.Single)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.op_Equality(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.op_Inequality(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3.Equals(SharpNav.Geometry.Vector3)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:SharpNav.Geometry.Vector3Extensions">
            <summary>
            A class that provides extension methods to fix discrepancies between Vector3 implementations.
            </summary>
        </member>
        <member name="M:SharpNav.Geometry.Vector3Extensions.ComponentMin(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Calculates the component-wise minimum of two vectors.
            </summary>
            <param name="left">A vector.</param>
            <param name="right">Another vector.</param>
            <param name="result">The component-wise minimum of the two vectors.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3Extensions.ComponentMax(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Calculates the component-wise maximum of two vectors.
            </summary>
            <param name="left">A vector.</param>
            <param name="right">Another vector.</param>
            <param name="result">The component-wise maximum of the two vectors.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3Extensions.Distance2D(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Calculates the distance between two points on the XZ plane.
            </summary>
            <param name="a">A point.</param>
            <param name="b">Another point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3Extensions.Distance2D(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two points on the XZ plane.
            </summary>
            <param name="a">A point.</param>
            <param name="b">Another point.</param>
            <param name="dist">The distance between the two points.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3Extensions.Dot2D(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors projected onto the XZ plane.
            </summary>
            <param name="left">A vector.</param>
            <param name="right">Another vector</param>
            <param name="result">The dot product of the two vectors.</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3Extensions.Dot2D(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Calculates the dot product of two vectors projected onto the XZ plane.
            </summary>
            <param name="left">A vector.</param>
            <param name="right">Another vector</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3Extensions.Cross2D(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Calculates the cross product of two vectors (formed from three points)
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <param name="p3">The third point</param>
            <returns>The 2d cross product</returns>
        </member>
        <member name="M:SharpNav.Geometry.Vector3Extensions.Cross2D(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single@)">
            <summary>
            Calculates the cross product of two vectors (formed from three points)
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <param name="p3">The third point</param>
            <param name="result">The 2d cross product</param>
        </member>
        <member name="M:SharpNav.Geometry.Vector3Extensions.PerpDotXZ(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Single@)">
            <summary>
            Calculates the perpendicular dot product of two vectors projected onto the XZ plane.
            </summary>
            <param name="a">A vector.</param>
            <param name="b">Another vector.</param>
            <param name="result">The perpendicular dot product on the XZ plane.</param>
        </member>
        <member name="T:SharpNav.Heightfield">
            <content>
            This file contains various methods to rasterize objects into voxel data.
            </content>
            <summary>
            A Heightfield represents a "voxel" grid represented as a 2-dimensional grid of <see cref="T:SharpNav.Cell"/>s.
            </summary>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexedWithAreas(SharpNav.Geometry.Vector3[],System.Int32[],SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once from an indexed array with per-triangle area flags.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexedWithAreas(SharpNav.Geometry.Vector3[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once from an indexed array with per-triangle area flags.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="vertOffset">An offset into the vertex array.</param>
            <param name="vertStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (one Vector3 per vertex).</param>
            <param name="indexOffset">An offset into the index array.</param>
            <param name="triCount">The number of triangles to rasterize.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexedWithAreas(System.Single[],System.Int32[],SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once from an indexed array with per-triangle area flags.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexedWithAreas(System.Single[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once from an indexed array with per-triangle area flags.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="floatOffset">An offset into the vertex array.</param>
            <param name="floatStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (3 floats per vertex).</param>
            <param name="indexOffset">An offset into the index array.</param>
            <param name="triCount">The number of triangles to rasterize.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesWithAreas(SharpNav.Geometry.Triangle3[],SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once with per-triangle area flags.
            </summary>
            <param name="tris">An array of triangles.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesWithAreas(SharpNav.Geometry.Triangle3[],System.Int32,System.Int32,SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once with per-triangle area flags.
            </summary>
            <param name="tris">An array of triangles.</param>
            <param name="triOffset">An offset into the array.</param>
            <param name="triCount">The number of triangles to rasterize, starting from the offset.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesWithAreas(SharpNav.Geometry.Vector3[],SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once with per-triangle area flags.
            </summary>
            <remarks>
            If the length of the array is not a multiple of 3, the extra vertices at the end will be skipped.
            </remarks>
            <param name="verts">An array of vertices.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesWithAreas(SharpNav.Geometry.Vector3[],System.Int32,System.Int32,System.Int32,SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once with per-triangle area flags.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="vertOffset">An offset into the array.</param>
            <param name="vertStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (1 Vector3 per vertex).</param>
            <param name="triCount">The number of triangles to rasterize, starting from the offset.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesWithAreas(System.Single[],SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once with per-triangle area flags.
            </summary>
            <remarks>
            If the length of the array is not a multiple of 9, the extra floats at the end will be skipped.
            </remarks>
            <param name="verts">An array of vertices.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesWithAreas(System.Single[],System.Int32,System.Int32,System.Int32,SharpNav.Area[])">
            <summary>
            Rasterizes several triangles at once with per-triangle area flags.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="floatOffset">An offset into the array.</param>
            <param name="floatStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (3 floats per vertex).</param>
            <param name="triCount">The number of triangles to rasterize.</param>
            <param name="areas">An array of area flags, one for each triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[],System.Int32[])">
            <summary>
            Rasterizes several triangles at once from an indexed array.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[],System.Int32[],SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once from an indexed array.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="area">The area flags for all the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rasterizes several triangles at once from an indexed array.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="vertOffset">An offset into the vertex array.</param>
            <param name="vertStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (one Vector3 per vertex).</param>
            <param name="indexOffset">An offset into the index array.</param>
            <param name="triCount">The number of triangles to rasterize.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once from an indexed array.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="vertOffset">An offset into the vertex array.</param>
            <param name="vertStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (one Vector3 per vertex).</param>
            <param name="indexOffset">An offset into the index array.</param>
            <param name="triCount">The number of triangles to rasterize.</param>
            <param name="area">The area flags for all of the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexed(System.Single[],System.Int32[])">
            <summary>
            Rasterizes several triangles at once from an indexed array.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexed(System.Single[],System.Int32[],SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once from an indexed array.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="area">The area flags for all the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexed(System.Single[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rasterizes several triangles at once from an indexed array.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="floatOffset">An offset into the vertex array.</param>
            <param name="floatStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (3 floats per vertex).</param>
            <param name="indexOffset">An offset into the index array.</param>
            <param name="triCount">The number of triangles to rasterize.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTrianglesIndexed(System.Single[],System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once from an indexed array.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="inds">An array of indices.</param>
            <param name="floatOffset">An offset into the vertex array.</param>
            <param name="floatStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (3 floats per vertex).</param>
            <param name="indexOffset">An offset into the index array.</param>
            <param name="triCount">The number of triangles to rasterize.</param>
            <param name="area">The area flags for all of the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(System.Collections.Generic.IEnumerable{SharpNav.Geometry.Triangle3})">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="tris">A collection of triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(System.Collections.Generic.IEnumerable{SharpNav.Geometry.Triangle3},SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="tris">A collection of triangles.</param>
            <param name="area">The area flags for all of the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(SharpNav.Geometry.Triangle3[])">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="tris">An array of triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(SharpNav.Geometry.Triangle3[],SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="tris">An array of triangles.</param>
            <param name="area">The area flags for all of the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(SharpNav.Geometry.Triangle3[],System.Int32,System.Int32)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="tris">An array of triangles.</param>
            <param name="triOffset">An offset into the array.</param>
            <param name="triCount">The number of triangles to rasterize, starting from the offset.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(SharpNav.Geometry.Triangle3[],System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="tris">An array of triangles.</param>
            <param name="triOffset">An offset into the array.</param>
            <param name="triCount">The number of triangles to rasterize, starting from the offset.</param>
            <param name="area">The area flags for all of the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(SharpNav.Geometry.Vector3[])">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <remarks>
            If the length of the array is not a multiple of 3, the extra vertices at the end will be skipped.
            </remarks>
            <param name="verts">An array of vertices.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(SharpNav.Geometry.Vector3[],SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <remarks>
            If the length of the array is not a multiple of 3, the extra vertices at the end will be skipped.
            </remarks>
            <param name="verts">An array of vertices.</param>
            <param name="area">The area flags for all of the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(SharpNav.Geometry.Vector3[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="vertOffset">An offset into the array.</param>
            <param name="vertStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (1 Vector3 per vertex).</param>
            <param name="triCount">The number of triangles to rasterize, starting from the offset.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(SharpNav.Geometry.Vector3[],System.Int32,System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="vertOffset">An offset into the array.</param>
            <param name="vertStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (1 Vector3 per vertex).</param>
            <param name="triCount">The number of triangles to rasterize, starting from the offset.</param>
            <param name="area">The area flags for all of the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(System.Single[])">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <remarks>
            If the length of the array is not a multiple of 9, the extra floats at the end will be skipped.
            </remarks>
            <param name="verts">An array of vertices.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(System.Single[],SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <remarks>
            If the length of the array is not a multiple of 9, the extra floats at the end will be skipped.
            </remarks>
            <param name="verts">An array of vertices.</param>
            <param name="area">The area flags for all of the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="floatOffset">An offset into the array.</param>
            <param name="floatStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (3 floats per vertex).</param>
            <param name="triCount">The number of triangles to rasterize.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangles(System.Single[],System.Int32,System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Rasterizes several triangles at once.
            </summary>
            <param name="verts">An array of vertices.</param>
            <param name="floatOffset">An offset into the array.</param>
            <param name="floatStride">The number of array elements that make up a vertex. A value of 0 is interpreted as tightly-packed data (3 floats per vertex).</param>
            <param name="triCount">The number of triangles to rasterize.</param>
            <param name="area">The area flags for all of the triangles.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangle(SharpNav.Geometry.Triangle3@)">
            <summary>
            Rasterizes a triangle using conservative voxelization.
            </summary>
            <param name="tri">The triangle as a <see cref="T:SharpNav.Geometry.Triangle3"/> struct.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangle(SharpNav.Geometry.Triangle3@,SharpNav.Area)">
            <summary>
            Rasterizes a triangle using conservative voxelization.
            </summary>
            <param name="tri">The triangle as a <see cref="T:SharpNav.Geometry.Triangle3"/> struct.</param>
            <param name="area">The area flags for the triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Rasterizes a triangle using conservative voxelization.
            </summary>
            <param name="ax">The X component of the first vertex of the triangle.</param>
            <param name="ay">The Y component of the first vertex of the triangle.</param>
            <param name="az">The Z component of the first vertex of the triangle.</param>
            <param name="bx">The X component of the second vertex of the triangle.</param>
            <param name="by">The Y component of the second vertex of the triangle.</param>
            <param name="bz">The Z component of the second vertex of the triangle.</param>
            <param name="cx">The X component of the third vertex of the triangle.</param>
            <param name="cy">The Y component of the third vertex of the triangle.</param>
            <param name="cz">The Z component of the third vertex of the triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpNav.Area)">
            <summary>
            Rasterizes a triangle using conservative voxelization.
            </summary>
            <param name="ax">The X component of the first vertex of the triangle.</param>
            <param name="ay">The Y component of the first vertex of the triangle.</param>
            <param name="az">The Z component of the first vertex of the triangle.</param>
            <param name="bx">The X component of the second vertex of the triangle.</param>
            <param name="by">The Y component of the second vertex of the triangle.</param>
            <param name="bz">The Z component of the second vertex of the triangle.</param>
            <param name="cx">The X component of the third vertex of the triangle.</param>
            <param name="cy">The Y component of the third vertex of the triangle.</param>
            <param name="cz">The Z component of the third vertex of the triangle.</param>
            <param name="area">The area flags for the triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangle(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Rasterizes a triangle using conservative voxelization.
            </summary>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.RasterizeTriangle(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Area)">
            <summary>
            Rasterizes a triangle using conservative voxelization.
            </summary>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
            <param name="area">The area flags for the triangle.</param>
        </member>
        <member name="M:SharpNav.Heightfield.#ctor(SharpNav.Geometry.BBox3,SharpNav.NavMeshGenerationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Heightfield"/> class.
            </summary>
            <param name="b">The world-space bounds.</param>
            <param name="settings">The settings to build with.</param>
        </member>
        <member name="M:SharpNav.Heightfield.#ctor(SharpNav.Geometry.BBox3,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Heightfield"/> class.
            </summary>
            <param name="b">The world-space bounds.</param>
            <param name="cellSize">The world-space size of each cell in the XZ plane.</param>
            <param name="cellHeight">The world-space height of each cell.</param>
        </member>
        <member name="P:SharpNav.Heightfield.Bounds">
            <summary>
            Gets the bounding box of the heightfield.
            </summary>
        </member>
        <member name="P:SharpNav.Heightfield.Minimum">
            <summary>
            Gets the world-space minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:SharpNav.Heightfield.Maximum">
            <summary>
            Gets the world-space maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:SharpNav.Heightfield.Width">
            <summary>
            Gets the number of cells in the X direction.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SharpNav.Heightfield.Height">
            <summary>
            Gets the number of cells in the Y (up) direction.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SharpNav.Heightfield.Length">
            <summary>
            Gets the number of cells in the Z direction.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:SharpNav.Heightfield.CellSize">
            <summary>
            Gets the size of a cell (voxel).
            </summary>
            <value>The size of the cell.</value>
        </member>
        <member name="P:SharpNav.Heightfield.CellSizeXZ">
            <summary>
            Gets the size of a cell on the X and Z axes.
            </summary>
        </member>
        <member name="P:SharpNav.Heightfield.CellHeight">
            <summary>
            Gets the size of a cell on the Y axis.
            </summary>
        </member>
        <member name="P:SharpNav.Heightfield.SpanCount">
            <summary>
            Gets the total number of spans.
            </summary>
        </member>
        <member name="P:SharpNav.Heightfield.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:SharpNav.Cell"/> at the specified coordinate.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The cell at [x, y].</returns>
        </member>
        <member name="P:SharpNav.Heightfield.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SharpNav.Cell"/> at the specified index.
            </summary>
            <param name="i">The index.</param>
            <returns>The cell at index i.</returns>
        </member>
        <member name="P:SharpNav.Heightfield.Item(SharpNav.SpanReference)">
            <summary>
            Gets the <see cref="T:SharpNav.Span"/> at the reference.
            </summary>
            <param name="spanRef">A reference to a span.</param>
            <returns>The span at the reference.</returns>
        </member>
        <member name="M:SharpNav.Heightfield.FilterLowHangingWalkableObstacles(System.Int32)">
            <summary>
            Filters the heightmap to allow two neighboring spans have a small difference in maximum height (such as
            stairs) to be walkable.
            </summary>
            <remarks>
            This filter may override the results of <see cref="M:SharpNav.Heightfield.FilterLedgeSpans(System.Int32,System.Int32)"/>.
            </remarks>
            <param name="walkableClimb">The maximum difference in height to filter.</param>
        </member>
        <member name="M:SharpNav.Heightfield.FilterWalkableLowHeightSpans(System.Int32)">
            <summary>
            If two spans have little vertical space in between them, 
            then span is considered unwalkable
            </summary>
            <param name="walkableHeight">The clearance.</param>
        </member>
        <member name="M:SharpNav.Heightfield.FilterLedgeSpans(System.Int32,System.Int32)">
            <summary>
            A ledge is unwalkable because the difference between the maximum height of two spans
            is too large of a drop (i.e. greater than walkableClimb).
            </summary>
            <param name="walkableHeight">The maximum walkable height to filter.</param>
            <param name="walkableClimb">The maximum walkable climb to filter.</param>
        </member>
        <member name="T:SharpNav.HeightPatch">
            <summary>
            Stores height data in a grid.
            </summary>
        </member>
        <member name="F:SharpNav.HeightPatch.UnsetHeight">
            <summary>
            The value used when a height value has not yet been set.
            </summary>
        </member>
        <member name="M:SharpNav.HeightPatch.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.HeightPatch"/> class.
            </summary>
            <param name="x">The initial X coordinate of the patch.</param>
            <param name="y">The initial Y coordinate of the patch.</param>
            <param name="width">The width of the patch.</param>
            <param name="length">The length of the patch.</param>
        </member>
        <member name="P:SharpNav.HeightPatch.X">
            <summary>
            Gets the X coordinate of the patch.
            </summary>
        </member>
        <member name="P:SharpNav.HeightPatch.Y">
            <summary>
            Gets the Y coordinate of the patch.
            </summary>
        </member>
        <member name="P:SharpNav.HeightPatch.Width">
            <summary>
            Gets the width of the patch.
            </summary>
        </member>
        <member name="P:SharpNav.HeightPatch.Length">
            <summary>
            Gets the length of the patch.
            </summary>
        </member>
        <member name="P:SharpNav.HeightPatch.Item(System.Int32)">
            <summary>
            Gets or sets the height at a specified index.
            </summary>
            <param name="index">The index inside the patch.</param>
            <returns>The height at the specified index.</returns>
        </member>
        <member name="P:SharpNav.HeightPatch.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the height at a specified coordinate (x, y).
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The height at the specified index.</returns>
        </member>
        <member name="M:SharpNav.HeightPatch.IsSet(System.Int32)">
            <summary>
            Checks an index to see whether or not it's height value has been set.
            </summary>
            <param name="index">The index to check.</param>
            <returns>A value indicating whether or not the height value at the index is set.</returns>
        </member>
        <member name="M:SharpNav.HeightPatch.TryGetHeight(System.Int32,System.Int32@)">
            <summary>
            Gets the height value at a specified index. A return value indicates whether the height value is set.
            </summary>
            <param name="index">The index to use.</param>
            <param name="value">Contains the height at the value.</param>
            <returns>A value indicating whether the value at the specified index is set.</returns>
        </member>
        <member name="M:SharpNav.HeightPatch.TryGetHeight(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the height value at a specified index. A return value indicates whether the height value is set.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="value">Contains the height at the value.</param>
            <returns>A value indicating whether the value at the specified index is set.</returns>
        </member>
        <member name="M:SharpNav.HeightPatch.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the patch. Only works if the new size is smaller than or equal to the initial size.
            </summary>
            <param name="x">The new X coordinate.</param>
            <param name="y">The new Y coordinate.</param>
            <param name="width">The new width.</param>
            <param name="length">The new length.</param>
        </member>
        <member name="M:SharpNav.HeightPatch.Clear">
            <summary>
            Clears the <see cref="T:SharpNav.HeightPatch"/> by unsetting every value.
            </summary>
        </member>
        <member name="M:SharpNav.HeightPatch.SetAll(System.Int32)">
            <summary>
            Sets all of the height values to the same value.
            </summary>
            <param name="h">The height to apply to all values.</param>
        </member>
        <member name="T:SharpNav.IO.Json.NavMeshJsonSerializer">
            <summary>
            Subclass of NavMeshSerializer that implements 
            serialization/deserializtion in text files with json format
            </summary>
        </member>
        <member name="T:SharpNav.IO.NavMeshSerializer">
            <summary>
            Abstract class for nav mesh serializers
            </summary>
        </member>
        <member name="M:SharpNav.IO.NavMeshSerializer.Serialize(System.String,SharpNav.TiledNavMesh)">
            <summary>
            Serialize navigation mesh into external file
            </summary>
            <param name="path">path of file to serialize into</param>
            <param name="mesh">mesh to serialize</param>
        </member>
        <member name="M:SharpNav.IO.NavMeshSerializer.Deserialize(System.String)">
            <summary>
            Deserialize navigation mesh from external file
            </summary>
            <param name="path">file to deserialize from</param>
            <returns>deserialized mesh</returns>
        </member>
        <member name="T:SharpNav.NavMesh">
            <summary>
            A TiledNavMesh generated from a collection of triangles and some settings
            </summary>
        </member>
        <member name="M:SharpNav.NavMesh.#ctor(SharpNav.NavMeshBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.NavMesh" /> class.
            </summary>
            <param name="builder">The NavMeshBuilder data</param>
        </member>
        <member name="M:SharpNav.NavMesh.Generate(System.Collections.Generic.IEnumerable{SharpNav.Geometry.Triangle3},SharpNav.NavMeshGenerationSettings)">
            <summary>
            Generates a <see cref="T:SharpNav.NavMesh"/> given a collection of triangles and some settings.
            </summary>
            <param name="triangles">The triangles that form the level.</param>
            <param name="settings">The settings to generate with.</param>
            <returns>A <see cref="T:SharpNav.NavMesh"/>.</returns>
        </member>
        <member name="T:SharpNav.NavMeshGenerationSettings">
            <summary>
            Contains all the settings necessary to convert a mesh to a navmesh.
            </summary>
        </member>
        <member name="M:SharpNav.NavMeshGenerationSettings.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SharpNav.NavMeshGenerationSettings"/> class from being created.
            Use <see cref="P:SharpNav.NavMeshGenerationSettings.Default"/> instead.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.Default">
            <summary>
            Gets the "default" generation settings for a model where 1 unit represents 1 meter.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.CellSize">
            <summary>
            Gets or sets the size of a cell in the X and Z axes in world units.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.CellHeight">
            <summary>
            Gets or sets the height of a cell in world units.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.MaxClimb">
            <summary>
            Gets or sets the maximum climb height.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.AgentHeight">
            <summary>
            Gets or sets the height of the agents traversing the <see cref="T:SharpNav.NavMesh"/>.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.AgentRadius">
            <summary>
            Gets or sets the radius of the agents traversing the <see cref="T:SharpNav.NavMesh"/>.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.MinRegionSize">
            <summary>
            Gets or sets the minimum number of spans that can form a region. Any less than this, and they will be
            merged with another region.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.MergedRegionSize">
            <summary>
            Gets or sets the size of the merged regions
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.MaxEdgeLength">
            <summary>
            Gets or sets the maximum edge length allowed
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.MaxEdgeError">
            <summary>
            Gets or sets the maximum error allowed
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.ContourFlags">
            <summary>
            Gets or sets the flags that determine how the <see cref="T:SharpNav.ContourSet"/> is generated.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.VertsPerPoly">
            <summary>
            Gets or sets the number of vertices a polygon can have.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.SampleDistance">
            <summary>
            Gets or sets the sampling distance for the PolyMeshDetail
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.MaxSampleError">
            <summary>
            Gets or sets the maximium error allowed in sampling for the PolyMeshDetail
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.BuildBoundingVolumeTree">
            <summary>
            Gets or sets a value indicating whether a bounding volume tree is generated for the mesh.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.VoxelAgentHeight">
            <summary>
            Gets the height of the agents traversing the <see cref="T:SharpNav.NavMesh"/> in voxel (cell) units.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.VoxelMaxClimb">
            <summary>
            Gets the maximum clim height in voxel (cell) units.
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshGenerationSettings.VoxelAgentRadius">
            <summary>
            Gets the radius of the agents traversing the <see cref="T:SharpNav.NavMesh"/> in voxel (cell) units.
            </summary>
        </member>
        <member name="T:SharpNav.Pathfinding.BoundarySide">
            <summary>
            An enumeration of the different places a point can be relative to a rectangular boundary on the XZ plane.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.BoundarySide.Internal">
            <summary>
            Not outside of the defined boundary.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.BoundarySide.PlusX">
            <summary>
            Only outside of the defined bondary on the X axis, in the positive direction.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.BoundarySide.PlusXPlusZ">
            <summary>
            Outside of the defined boundary on both the X and Z axes, both in the positive direction.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.BoundarySide.PlusZ">
            <summary>
            Only outside of the defined bondary on the Z axis, in the positive direction.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.BoundarySide.MinusXPlusZ">
            <summary>
            Outside of the defined boundary on both the X and Z axes, in the negative and positive directions respectively.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.BoundarySide.MinusX">
            <summary>
            Only outside of the defined bondary on the X axis, in the negative direction.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.BoundarySide.MinusXMinusZ">
            <summary>
            Outside of the defined boundary on both the X and Z axes, both in the negative direction.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.BoundarySide.MinusZ">
            <summary>
            Only outside of the defined bondary on the Z axis, in the negative direction.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.BoundarySide.PlusXMinusZ">
            <summary>
            Outside of the defined boundary on both the X and Z axes, in the positive and negative directions respectively.
            </summary>
        </member>
        <member name="T:SharpNav.Pathfinding.BoundarySideExtensions">
            <summary>
            Extension methods for the <see cref="T:SharpNav.Pathfinding.BoundarySide"/> enumeration.
            </summary>
        </member>
        <member name="M:SharpNav.Pathfinding.BoundarySideExtensions.GetOpposite(SharpNav.Pathfinding.BoundarySide)">
            <summary>
            Gets the side in the exact opposite direction as a specified side.
            </summary>
            <remarks>
            The value <see cref="F:SharpNav.Pathfinding.BoundarySide.Internal"/> will always return <see cref="F:SharpNav.Pathfinding.BoundarySide.Internal"/>.
            </remarks>
            <param name="side">A side.</param>
            <returns>The opposite side.</returns>
        </member>
        <member name="M:SharpNav.Pathfinding.BoundarySideExtensions.FromPoint(SharpNav.Geometry.Vector3,SharpNav.Geometry.BBox3)">
            <summary>
            Gets the boundary side of a point relative to a bounding box.
            </summary>
            <param name="pt">A point.</param>
            <param name="bounds">A bounding box.</param>
            <returns>The point's position relative to the bounding box.</returns>
        </member>
        <member name="T:SharpNav.Pathfinding.Link">
            <summary>
            A link is formed between two polygons in a TiledNavMesh
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.Link.External">
            <summary>
            Entity links to external entity.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.Link.Null">
            <summary>
            Doesn't link to anything.
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.Link.Reference">
            <summary>
            Gets or sets the neighbor reference (the one it's linked to)
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.Link.Edge">
            <summary>
            Gets or sets the index of polygon edge
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.Link.Side">
            <summary>
            Gets or sets the polygon side
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.Link.BMin">
            <summary>
            Gets or sets the minimum Vector3 of the bounding box
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.Link.BMax">
            <summary>
            Gets or sets the maximum Vector3 of the bounding box
            </summary>
        </member>
        <member name="T:SharpNav.Pathfinding.NavTile">
            <summary>
            The MeshTile contains the map data for pathfinding
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavTile.Salt">
            <summary>
            Gets or sets the counter describing modifications to the tile
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavTile.Polys">
            <summary>
            Gets or sets the PolyMesh polygons
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavTile.Verts">
            <summary>
            Gets or sets the PolyMesh vertices
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavTile.DetailMeshes">
            <summary>
            Gets or sets the PolyMeshDetail data
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavTile.DetailVerts">
            <summary>
            Gets or sets the PolyMeshDetail vertices
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavTile.DetailTris">
            <summary>
            Gets or sets the PolyMeshDetail triangles
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavTile.OffMeshConnections">
            <summary>
            Gets or sets the OffmeshConnections
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavTile.BVTree">
            <summary>
            Gets or sets the bounding volume tree
            </summary>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.ConnectIntLinks">
            <summary>
            Allocate links for each of the tile's polygons' vertices
            </summary>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.BaseOffMeshLinks">
            <summary>
            Begin creating off-mesh links between the tile polygons.
            </summary>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.ConnectExtLinks(SharpNav.Pathfinding.NavTile,SharpNav.Pathfinding.BoundarySide)">
            <summary>
            Connect polygons from two different tiles.
            </summary>
            <param name="target">Target Tile</param>
            <param name="side">Polygon edge</param>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.ConnectExtOffMeshLinks(SharpNav.Pathfinding.NavTile,SharpNav.Pathfinding.BoundarySide)">
            <summary>
            Connect Off-Mesh links between polygons from two different tiles.
            </summary>
            <param name="target">Target Tile</param>
            <param name="side">Polygon edge</param>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.FindConnectingPolys(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Pathfinding.BoundarySide,System.Collections.Generic.List{SharpNav.Pathfinding.NavPolyId},System.Collections.Generic.List{System.Single})">
            <summary>
            Search for neighbor polygons in the tile.
            </summary>
            <param name="va">Vertex A</param>
            <param name="vb">Vertex B</param>
            <param name="side">Polygon edge</param>
            <param name="con">Resulting Connection polygon</param>
            <param name="conarea">Resulting Connection area</param>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.FindNearestPoly(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3@)">
            <summary>
            Find the closest polygon possible in the tile under certain constraints.
            </summary>
            <param name="tile">Current tile</param>
            <param name="center">Center starting point</param>
            <param name="extents">Range of search</param>
            <param name="nearestPt">Resulting nearest point</param>
            <returns>Polygon Reference which contains nearest point</returns>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.QueryPolygons(SharpNav.Geometry.BBox3,System.Collections.Generic.List{SharpNav.Pathfinding.NavPolyId})">
            <summary>
            Find all the polygons within a certain bounding box.
            </summary>
            <param name="tile">Current tile</param>
            <param name="qbounds">The bounds</param>
            <param name="polys">List of polygons</param>
            <returns>Number of polygons found</returns>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.CalcSlabEndPoints(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2,SharpNav.Pathfinding.BoundarySide)">
            <summary>
            Find the slab endpoints based off of the 'side' value.
            </summary>
            <param name="va">Vertex A</param>
            <param name="vb">Vertex B</param>
            <param name="bmin">Minimum bounds</param>
            <param name="bmax">Maximum bounds</param>
            <param name="side">The side</param>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.GetSlabCoord(SharpNav.Geometry.Vector3,SharpNav.Pathfinding.BoundarySide)">
            <summary>
            Return the proper slab coordinate value depending on the 'side' value.
            </summary>
            <param name="va">Vertex A</param>
            <param name="side">The side</param>
            <returns>Slab coordinate value</returns>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.OverlapSlabs(SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2,SharpNav.Geometry.Vector2,System.Single,System.Single)">
            <summary>
            Check if two slabs overlap.
            </summary>
            <param name="amin">Minimum bounds A</param>
            <param name="amax">Maximum bounds A</param>
            <param name="bmin">Minimum bounds B</param>
            <param name="bmax">Maximum bounds B</param>
            <param name="px">Point's x</param>
            <param name="py">Point's y</param>
            <returns>True if slabs overlap</returns>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.ClosestPointOnPoly(SharpNav.Pathfinding.NavPoly,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3@)">
            <summary>
            Given a point, find the closest point on that poly.
            </summary>
            <param name="poly">The current polygon.</param>
            <param name="pos">The current position</param>
            <param name="closest">Reference to the closest point</param>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.ClosestPointOnPoly(System.Int32,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3@)">
            <summary>
            Given a point, find the closest point on that poly.
            </summary>
            <param name="indexPoly">The current poly's index</param>
            <param name="pos">The current position</param>
            <param name="closest">Reference to the closest point</param>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.ClosestPointOnPolyBoundary(SharpNav.Pathfinding.NavPoly,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3@)">
            <summary>
            Given a point, find the closest point on that poly.
            </summary>
            <param name="poly">The current polygon.</param>
            <param name="pos">The current position</param>
            <param name="closest">Reference to the closest point</param>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.ClosestHeight(System.Int32,SharpNav.Geometry.Vector3,System.Single@)">
            <summary>
            Find the distance from a point to a triangle.
            </summary>
            <param name="indexPoly">Current polygon's index</param>
            <param name="pos">Current position</param>
            <param name="h">Resulting height</param>
            <returns>True, if a height is found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.Pathfinding.NavTile.ClosestPointOnPolyOffMeshConnection(SharpNav.Pathfinding.NavPoly,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3@)">
            <summary>
            Find the closest point on an offmesh connection, which is in between the two points.
            </summary>
            <param name="poly">Current polygon</param>
            <param name="pos">Current position</param>
            <param name="closest">Resulting point that is closest.</param>
        </member>
        <member name="T:SharpNav.Pathfinding.OffMeshConnectionFlags">
            <summary>
            A set of flags that define properties about an off-mesh connection.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.OffMeshConnectionFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.OffMeshConnectionFlags.Bidirectional">
            <summary>
            The connection is bi-directional.
            </summary>
        </member>
        <member name="T:SharpNav.Pathfinding.OffMeshConnection">
            <summary>
            An offmesh connection links two polygons, which are not directly adjacent, but are accessibly through
            other means (jumping, climbing, etc...).
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.OffMeshConnection.Pos0">
            <summary>
            Gets or sets the first endpoint of the connection
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.OffMeshConnection.Pos1">
            <summary>
            Gets or sets the second endpoint of the connection
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.OffMeshConnection.Radius">
            <summary>
            Gets or sets the radius
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.OffMeshConnection.Poly">
            <summary>
            Gets or sets the polygon's index
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.OffMeshConnection.Flags">
            <summary>
            Gets or sets the polygon flag
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.OffMeshConnection.Side">
            <summary>
            Gets or sets the endpoint's side
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.OffMeshConnection.Tag">
            <summary>
            Gets or sets user data for this connection.
            </summary>
        </member>
        <member name="T:SharpNav.Pathfinding.NavPoint">
            <summary>
            A point in a navigation mesh.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.NavPoint.Null">
            <summary>
            A null point that isn't associated with any polygon.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.NavPoint.Polygon">
            <summary>
            A reference to the polygon this point is on.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.NavPoint.Position">
            <summary>
            The 3d position of the point.
            </summary>
        </member>
        <member name="M:SharpNav.Pathfinding.NavPoint.#ctor(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Pathfinding.NavPoint"/> struct.
            </summary>
            <param name="poly">The polygon that the point is on.</param>
            <param name="pos">The 3d position of the point.</param>
        </member>
        <member name="T:SharpNav.Pathfinding.PathBuildFlags">
            <summary>
            Flags for choosing how the path is built.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.PathBuildFlags.None">
            <summary>
            Build normally.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.PathBuildFlags.AreaCrossingVertices">
            <summary>
            Adds a vertex to the path at each polygon edge crossing, but only when the areas of the two polygons are
            different.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.PathBuildFlags.AllCrossingVertices">
            <summary>
            Adds a vertex to the path at each polygon edge crossing.
            </summary>
        </member>
        <member name="T:SharpNav.Pathfinding.NavPolyType">
            <summary>
            Flags representing the type of a navmesh polygon.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.NavPolyType.Ground">
            <summary>A polygon that is part of the navmesh.</summary>
        </member>
        <member name="F:SharpNav.Pathfinding.NavPolyType.OffMeshConnection">
            <summary>An off-mesh connection consisting of two vertices.</summary>
        </member>
        <member name="T:SharpNav.Pathfinding.NavPoly">
            <summary>
            Uses the PolyMesh polygon data for pathfinding
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavPoly.PolyType">
            <summary>
            Gets or sets the polygon type (ground or offmesh)
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavPoly.Verts">
            <summary>
            Gets or sets the indices of polygon's vertices
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavPoly.Neis">
            <summary>
            Gets or sets packed data representing neighbor polygons references and flags for each edge
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavPoly.Tag">
            <summary>
            Gets or sets a user defined polygon flags
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavPoly.VertCount">
            <summary>
            Gets or sets the number of vertices
            </summary>
        </member>
        <member name="P:SharpNav.Pathfinding.NavPoly.Area">
            <summary>
            Gets or sets the AreaId
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.NavPolyId.Null">
            <summary>
            A null ID that isn't associated with any polygon or tile.
            </summary>
        </member>
        <member name="T:SharpNav.Pathfinding.NavPolyIdManager">
            <summary>
            Helps encode and decode <see cref="T:SharpNav.Pathfinding.NavPolyId"/> by storing the number of
            bits the salt, tile, and poly sections of an ID.
            </summary>
            <remarks>
            IDs should not be used between different instances of
            <see cref="T:SharpNav.Pathfinding.NavPolyIdManager"/> as the bits for each section may be
            diffrent, causing incorrect decoded values.
            </remarks>
        </member>
        <member name="M:SharpNav.Pathfinding.NavPolyIdManager.Encode(System.Int32,System.Int32,System.Int32,SharpNav.Pathfinding.NavPolyId@)">
            <summary>
            Derive a standard polygon reference, which compresses salt, tile index, and poly index together.
            </summary>
            <param name="polyBits">The number of bits to use for the polygon value.</param>
            <param name="tileBits">The number of bits to use for the tile value.</param>
            <param name="salt">Salt value</param>
            <param name="tileIndex">Tile index</param>
            <param name="polyIndex">Poly index</param>
            <returns>Polygon reference</returns>
        </member>
        <member name="M:SharpNav.Pathfinding.NavPolyIdManager.Decode(SharpNav.Pathfinding.NavPolyId@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Decode a standard polygon reference.
            </summary>
            <param name="polyBits">The number of bits to use for the polygon value.</param>
            <param name="tileBits">The number of bits to use for the tile value.</param>
            <param name="saltBits">The number of bits to use for the salt.</param>
            <param name="polyIndex">Resulting poly index.</param>
            <param name="tileIndex">Resulting tile index.</param>
            <param name="salt">Resulting salt value.</param>
        </member>
        <member name="M:SharpNav.Pathfinding.NavPolyIdManager.DecodePolyIndex(SharpNav.Pathfinding.NavPolyId@)">
            <summary>
            Extract a polygon's index (within its tile) from the specified polygon reference.
            </summary>
            <param name="polyBits">The number of bits to use for the polygon value.</param>
            <returns>The value's poly index.</returns>
        </member>
        <member name="M:SharpNav.Pathfinding.NavPolyIdManager.DecodeTileIndex(SharpNav.Pathfinding.NavPolyId@)">
            <summary>
            Extract a tile's index from the specified polygon reference.
            </summary>
            <param name="polyBits">The number of bits to use for the polygon value.</param>
            <param name="tileBits">The number of bits to use for the tile value.</param>
            <returns>The value's tile index.</returns>
        </member>
        <member name="M:SharpNav.Pathfinding.NavPolyIdManager.DecodeSalt(SharpNav.Pathfinding.NavPolyId@)">
            <summary>
            Extract a tile's salt value from the specified polygon reference.
            </summary>
            <param name="polyBits">The number of bits to use for the polygon value.</param>
            <param name="tileBits">The number of bits to use for the tile value.</param>
            <param name="saltBits">The number of bits to use for the salt.</param>
            <returns>The value's salt.</returns>
        </member>
        <member name="T:SharpNav.Pathfinding.RaycastOptions">
            <summary>
            Options for raycasting.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.RaycastOptions.UseCosts">
            <summary>
            Calculate and use movement costs across the ray.
            </summary>
        </member>
        <member name="T:SharpNav.Pathfinding.StraightPathFlags">
            <summary>
            Flags returned by NavMeshQuery.FindStraightPath.
            </summary>
        </member>
        <member name="F:SharpNav.Pathfinding.StraightPathFlags.Start">
            <summary> The vertex is the start position of the path.</summary>
        </member>
        <member name="F:SharpNav.Pathfinding.StraightPathFlags.End">
            <summary> The vertex is the end position of the path.</summary>
        </member>
        <member name="F:SharpNav.Pathfinding.StraightPathFlags.OffMeshConnection">
            <summary> The vertex is the start of an off-mesh connection.</summary>
        </member>
        <member name="T:SharpNav.Pathfinding.PathfindingCommon">
            <summary>
            Store constants, structs, methods in this single class so that other classes can access this information.
            </summary>
        </member>
        <member name="M:SharpNav.Pathfinding.PathfindingCommon.RandomPointInConvexPoly(SharpNav.Geometry.Vector3[],System.Single,System.Single,SharpNav.Geometry.Vector3@)">
            <summary>
            Generate an accurate sample of random points in the convex polygon and pick a point.
            </summary>
            <param name="pts">The polygon's points data</param>
            <param name="s">A random float</param>
            <param name="t">Another random float</param>
            <param name="pt">The resulting point</param>
        </member>
        <member name="T:SharpNav.Pathfinding.PathfindingCommon.NavMeshInfo">
            <summary>
            Contains information about a navigation mesh
            </summary>
        </member>
        <member name="T:SharpNav.PolyBounds">
            <summary>
            A bounding box for vertices in a <see cref="T:SharpNav.PolyMesh"/>.
            </summary>
        </member>
        <member name="F:SharpNav.PolyBounds.Min">
            <summary>
            The lower bound of the bounding box.
            </summary>
        </member>
        <member name="F:SharpNav.PolyBounds.Max">
            <summary>
            The upper bound of the bounding box.
            </summary>
        </member>
        <member name="M:SharpNav.PolyBounds.#ctor(SharpNav.PolyVertex,SharpNav.PolyVertex)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyBounds"/> struct.
            </summary>
            <param name="min">The lower bound of the bounding box.</param>
            <param name="max">The upper bound of the bounding box.</param>
        </member>
        <member name="M:SharpNav.PolyBounds.Overlapping(SharpNav.PolyBounds@,SharpNav.PolyBounds@)">
            <summary>
            Checks whether two boudning boxes are intersecting.
            </summary>
            <param name="a">The first bounding box.</param>
            <param name="b">The second bounding box.</param>
            <returns>A value indicating whether the two bounding boxes are overlapping.</returns>
        </member>
        <member name="M:SharpNav.PolyBounds.op_Equality(SharpNav.PolyBounds,SharpNav.PolyBounds)">
            <summary>
            Compares two <see cref="T:SharpNav.PolyBounds"/> instances for equality.
            </summary>
            <param name="left">A bounding box.</param>
            <param name="right">Another bounding box.</param>
            <returns>A value indicating whether the two bounding boxes are equal.</returns>
        </member>
        <member name="M:SharpNav.PolyBounds.op_Inequality(SharpNav.PolyBounds,SharpNav.PolyBounds)">
            <summary>
            Compares two <see cref="T:SharpNav.PolyBounds"/> instances for inequality.
            </summary>
            <param name="left">A bounding box.</param>
            <param name="right">Another bounding box.</param>
            <returns>A value indicating whether the two bounding boxes are not equal.</returns>
        </member>
        <member name="M:SharpNav.PolyBounds.Equals(SharpNav.PolyBounds)">
            <summary>
            Compares another <see cref="T:SharpNav.PolyBounds"/> instance with this instance for equality.
            </summary>
            <param name="other">A bounding box.</param>
            <returns>A value indicating whether the bounding box is equal to this instance.</returns>
        </member>
        <member name="M:SharpNav.PolyBounds.Equals(System.Object)">
            <summary>
            Compares another object with this instance for equality.
            </summary>
            <param name="obj">An object.</param>
            <returns>A value indicating whether the object is equal to this instance.</returns>
        </member>
        <member name="M:SharpNav.PolyBounds.GetHashCode">
            <summary>
            Calculates a hash code unique to the contents of this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:SharpNav.PolyBounds.ToString">
            <summary>
            Creates a human-readable string with the contents of this instance.
            </summary>
            <returns>A human-readable string.</returns>
        </member>
        <member name="T:SharpNav.PolyMesh">
            <summary>
            The class of Poly mesh.
            </summary>
        </member>
        <member name="M:SharpNav.PolyMesh.#ctor(SharpNav.ContourSet,SharpNav.NavMeshGenerationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMesh"/> class.
            </summary>
            <param name="contSet">The <see cref="T:SharpNav.ContourSet"/> to generate polygons from.</param>
            <param name="settings">The settings to build with.</param>
        </member>
        <member name="M:SharpNav.PolyMesh.#ctor(SharpNav.ContourSet,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMesh"/> class by creating polygons from contours.
            </summary>
            <param name="contSet">The <see cref="T:SharpNav.ContourSet"/> to generate polygons from.</param>
            <param name="cellSize">The size of one voxel/cell.</param>
            <param name="cellHeight">The height of one voxel/cell.</param>
            <param name="borderSize">The size of the border around the mesh.</param>
            <param name="numVertsPerPoly">The maximum number of vertices per polygon.</param>
        </member>
        <member name="P:SharpNav.PolyMesh.VertCount">
            <summary>
            Gets the number of vertices
            </summary>
        </member>
        <member name="P:SharpNav.PolyMesh.PolyCount">
            <summary>
            Gets the number of polygons
            </summary>
        </member>
        <member name="P:SharpNav.PolyMesh.NumVertsPerPoly">
            <summary>
            Gets the number of vertices per polygon
            </summary>
        </member>
        <member name="P:SharpNav.PolyMesh.Verts">
            <summary>
            Gets the vertex data
            </summary>
        </member>
        <member name="P:SharpNav.PolyMesh.Polys">
            <summary>
            Gets the polygon data
            </summary>
        </member>
        <member name="P:SharpNav.PolyMesh.Bounds">
            <summary>
            Gets the bounds.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:SharpNav.PolyMesh.CellSize">
            <summary>
            Gets the cell size
            </summary>
        </member>
        <member name="P:SharpNav.PolyMesh.CellHeight">
            <summary>
            Gets the cell height
            </summary>
        </member>
        <member name="P:SharpNav.PolyMesh.BorderSize">
            <summary>
            Gets the border size
            </summary>
        </member>
        <member name="M:SharpNav.PolyMesh.IsBoundaryEdge(System.Int32)">
            <summary>
            Determines if it is a boundary edge with the specified flag.
            </summary>
            <returns><c>true</c> if is boundary edge the specified flag; otherwise, <c>false</c>.</returns>
            <param name="flag">The flag.</param>
        </member>
        <member name="M:SharpNav.PolyMesh.IsInteriorEdge(System.Int32)">
            <summary>
            Determines if it is an interior edge with the specified flag.
            </summary>
            <returns><c>true</c> if is interior edge the specified flag; otherwise, <c>false</c>.</returns>
            <param name="flag">The flag.</param>
        </member>
        <member name="M:SharpNav.PolyMesh.HasDiagonalFlag(System.Int32)">
            <summary>
            Determines if it is a diagonal flag on the specified index.
            </summary>
            <param name="index">The index</param>
            <returns><c>true</c> if it is a diagonal flag on the specified index; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.Diagonal(System.Int32,System.Int32,SharpNav.PolyVertex[],System.Int32[])">
            <summary>
            True if and only if (v[i], v[j]) is a proper internal diagonal of polygon.
            </summary>
            <param name="i">Vertex index i</param>
            <param name="j">Vertex index j</param>
            <param name="verts">Contour vertices</param>
            <param name="indices">PolyMesh indices</param>
            <returns>True, if internal diagonal. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.InCone(System.Int32,System.Int32,SharpNav.PolyVertex[],System.Int32[])">
            <summary>
            True if and only if diagonal (i, j) is strictly internal to polygon 
            in neighborhood of i endpoint.
            </summary>
            <param name="i">Vertex index i</param>
            <param name="j">Vertex index j</param>
            <param name="verts">Contour vertices</param>
            <param name="indices">PolyMesh indices</param>
            <returns>True, if internal. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.Diagonalie(System.Int32,System.Int32,SharpNav.PolyVertex[],System.Int32[])">
            <summary>
            True if and only if (v[i], v[j]) is internal or external diagonal
            ignoring edges incident to v[i] or v[j].
            </summary>
            <param name="i">Vertex index i</param>
            <param name="j">Vertex index j</param>
            <param name="verts">Contour vertices</param>
            <param name="indices">PolyMesh indices</param>
            <returns>True, if internal or external diagonal. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.Prev(System.Int32,System.Int32)">
            <summary>
            Gets the previous vertex index
            </summary>
            <param name="i">The current index</param>
            <param name="n">The max number of vertices</param>
            <returns>The previous index</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.Next(System.Int32,System.Int32)">
            <summary>
            Gets the next vertex index
            </summary>
            <param name="i">The current index</param>
            <param name="n">The max number of vertices</param>
            <returns>The next index</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.ULeft(SharpNav.PolyVertex,SharpNav.PolyVertex,SharpNav.PolyVertex)">
            <summary>
            Determines whether the vertices follow a certain order
            </summary>
            <param name="a">Vertex A</param>
            <param name="b">Vertex B</param>
            <param name="c">Vertex C</param>
            <returns>True if conditions met, false if not</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.SetDiagonalFlag(System.Int32@)">
            <summary>
            Sets the diagonal flag for a vertex
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="M:SharpNav.PolyMesh.RemoveDiagonalFlag(System.Int32)">
            <summary>
            Remove the diagonal flag for a vertex
            </summary>
            <param name="index">The vertex index</param>
            <returns>The new index</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.RemoveDiagonalFlag(System.Int32@)">
            <summary>
            Remove the diagonal flag for a vertex
            </summary>
            <param name="index">The vertex index</param>
        </member>
        <member name="M:SharpNav.PolyMesh.Triangulate(System.Int32,SharpNav.PolyVertex[],System.Int32[],SharpNav.PolyMesh.Triangle[])">
            <summary>
            Walk the edges of a contour to determine whether a triangle can be formed.
            Form as many triangles as possible.
            </summary>
            <param name="verts">Vertices array</param>
            <param name="indices">Indices array</param>
            <param name="tris">Triangles array</param>
            <returns>The number of triangles.</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.AddVertex(System.Collections.Generic.Dictionary{SharpNav.PolyVertex,System.Int32},SharpNav.PolyVertex,System.Collections.Generic.List{SharpNav.PolyVertex})">
            <summary>
            Generate a new vertices with (x, y, z) coordiates and return the hash code index 
            </summary>
            <param name="vertDict">Vertex dictionary that maps coordinates to index</param>
            <param name="v">A vertex.</param>
            <param name="verts">The list of vertices</param>
            <returns>The vertex index</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.GetPolyMergeValue(System.Collections.Generic.List{SharpNav.PolyMesh.Polygon},System.Int32,System.Int32,System.Collections.Generic.List{SharpNav.PolyVertex},System.Int32@,System.Int32@)">
            <summary>
            Try to merge two polygons. If possible, return the distance squared between two vertices.
            </summary>
            <param name="polys">Polygon list</param>
            <param name="polyA">Polygon A</param>
            <param name="polyB">Polygon B</param>
            <param name="verts">Vertex list</param>
            <param name="edgeA">Shared edge's endpoint A</param>
            <param name="edgeB">Shared edge's endpoint B</param>
            <returns>The distance between two vertices</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.CanRemoveVertex(System.Collections.Generic.List{SharpNav.PolyMesh.Polygon},System.Int32)">
            <summary>
            If vertex can't be removed, there is no need to spend time deleting it.
            </summary>
            <param name="polys">The polygon list</param>
            <param name="remove">The vertex index</param>
            <returns>True, if vertex can be removed. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.PolyMesh.BuildMeshAdjacency(System.Collections.Generic.List{SharpNav.PolyVertex},System.Collections.Generic.List{SharpNav.PolyMesh.Polygon},System.Int32)">
            <summary>
            Connect two adjacent vertices with edges.
            </summary>
            <param name="vertices">The vertex list</param>
            <param name="polys">The polygon list</param>
            <param name="numVertsPerPoly">Number of vertices per polygon</param>
        </member>
        <member name="M:SharpNav.PolyMesh.RemoveVertex(System.Collections.Generic.List{SharpNav.PolyVertex},System.Collections.Generic.List{SharpNav.PolyMesh.Polygon},System.Int32)">
            <summary>
            Removing vertices will leave holes that have to be triangulated again.
            </summary>
            <param name="verts">A list of vertices</param>
            <param name="polys">A list of polygons</param>
            <param name="vertex">The vertex to remove</param>
        </member>
        <member name="T:SharpNav.PolyMesh.Triangle">
            <summary>
            A triangle contains three indices.
            </summary>
        </member>
        <member name="T:SharpNav.PolyMesh.AdjacencyEdge">
            <summary>
            Two adjacent vertices form an edge.
            </summary>
        </member>
        <member name="T:SharpNav.PolyMesh.Edge">
            <summary>
            Another edge structure, but this one contains the RegionId and AreaId.
            </summary>
        </member>
        <member name="M:SharpNav.PolyMesh.Edge.#ctor(System.Int32,System.Int32,SharpNav.RegionId,SharpNav.Area)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMesh.Edge"/> struct.
            </summary>
            <param name="vert0">Vertex A</param>
            <param name="vert1">Vertex B</param>
            <param name="region">Region id</param>
            <param name="area">Area id</param>
        </member>
        <member name="T:SharpNav.PolyMesh.Polygon">
            <summary>
            Each polygon is a collection of vertices. It is the basic unit of the PolyMesh
            </summary>
        </member>
        <member name="M:SharpNav.PolyMesh.Polygon.#ctor(System.Int32,SharpNav.Area,SharpNav.RegionId)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMesh.Polygon" /> class.
            </summary>
            <param name="numVertsPerPoly">The number of vertices per polygon.</param>
            <param name="area">The AreaId</param>
            <param name="regionId">The RegionId</param>
        </member>
        <member name="P:SharpNav.PolyMesh.Polygon.Vertices">
            <summary>
            Gets the indices for the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:SharpNav.PolyMesh.Polygon.NeighborEdges">
            <summary>
            Gets the neighbor edges.
            </summary>
            <value>The neighbor edges.</value>
        </member>
        <member name="P:SharpNav.PolyMesh.Polygon.Area">
            <summary>
            Gets or sets the area id
            </summary>
        </member>
        <member name="P:SharpNav.PolyMesh.Polygon.RegionId">
            <summary>
            Gets or sets the region identifier.
            </summary>
            <value>The region identifier.</value>
        </member>
        <member name="P:SharpNav.PolyMesh.Polygon.Tag">
            <summary>
            Gets or sets a tag for this instance.
            </summary>
            <value>Any object to tag this instance with.</value>
        </member>
        <member name="P:SharpNav.PolyMesh.Polygon.VertexCount">
            <summary>
            Gets the the number of vertex.
            </summary>
            <value>The vertex count.</value>
        </member>
        <member name="M:SharpNav.PolyMesh.Polygon.ContainsVertex(System.Int32)">
            <summary>
            Determine if the vertex is in polygon.
            </summary>
            <returns><c>true</c>, if vertex was containsed, <c>false</c> otherwise.</returns>
            <param name="vertex">The Vertex.</param>
        </member>
        <member name="M:SharpNav.PolyMesh.Polygon.MergeWith(SharpNav.PolyMesh.Polygon,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Merges another polygon with this one.
            </summary>
            <param name="other">The other polygon to merge into this one.</param>
            <param name="startEdge">This starting edge for this polygon.</param>
            <param name="otherStartEdge">The starting edge for the other polygon.</param>
            <param name="temp">A temporary vertex buffer. Must be at least <c>numVertsPerPoly</c> long.</param>
        </member>
        <member name="T:SharpNav.NavMeshBuilder">
            <summary>
            The NavMeshBuilder class converst PolyMesh and PolyMeshDetail into a different data structure suited for 
            pathfinding. This class will create tiled data.
            </summary>
        </member>
        <member name="M:SharpNav.NavMeshBuilder.#ctor(SharpNav.PolyMesh,SharpNav.PolyMeshDetail,SharpNav.Pathfinding.OffMeshConnection[],SharpNav.NavMeshGenerationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.NavMeshBuilder" /> class.
            Add all the PolyMesh and PolyMeshDetail attributes to the Navigation Mesh.
            Then, add Off-Mesh connection support.
            </summary>
            <param name="polyMesh">The PolyMesh</param>
            <param name="polyMeshDetail">The PolyMeshDetail</param>
            <param name="offMeshCons">Offmesh connection data</param>
            <param name="settings">The settings used to build.</param>
        </member>
        <member name="P:SharpNav.NavMeshBuilder.Header">
            <summary>
            Gets the file header
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshBuilder.NavVerts">
            <summary>
            Gets the PolyMesh vertices
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshBuilder.NavPolys">
            <summary>
            Gets the PolyMesh polygons
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshBuilder.NavDMeshes">
            <summary>
            Gets the PolyMeshDetail mesh data (the indices of the vertices and triagles)
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshBuilder.NavDVerts">
            <summary>
            Gets the PolyMeshDetail vertices
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshBuilder.NavDTris">
            <summary>
            Gets the PolyMeshDetail triangles
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshBuilder.NavBvTree">
            <summary>
            Gets the bounding volume tree
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshBuilder.OffMeshCons">
            <summary>
            Gets the offmesh connection data
            </summary>
        </member>
        <member name="T:SharpNav.PolyMeshDetail">
            <summary>
            The PolyMeshDetail class is a combination of a PolyMesh and a CompactHeightfield merged together
            </summary>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.#ctor(SharpNav.PolyMesh,SharpNav.CompactHeightfield,SharpNav.NavMeshGenerationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMeshDetail"/> class.
            </summary>
            <param name="mesh">The <see cref="T:SharpNav.PolyMesh"/>.</param>
            <param name="compactField">The <see cref="T:SharpNav.CompactHeightfield"/> used to add height detail.</param>
            <param name="settings">The settings to build with.</param>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.#ctor(SharpNav.PolyMesh,SharpNav.CompactHeightfield,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMeshDetail"/> class.
            </summary>
            <remarks>
            <see cref="T:SharpNav.PolyMeshDetail"/> uses a <see cref="T:SharpNav.CompactHeightfield"/> to add in details to a
            <see cref="T:SharpNav.PolyMesh"/>. This detail is triangulated into a new mesh and can be used to approximate height in the walkable
            areas of a scene.
            </remarks>
            <param name="mesh">The <see cref="T:SharpNav.PolyMesh"/>.</param>
            <param name="compactField">The <see cref="T:SharpNav.CompactHeightfield"/> used to add height detail.</param>
            <param name="sampleDist">The sampling distance.</param>
            <param name="sampleMaxError">The maximum sampling error allowed.</param>
        </member>
        <member name="T:SharpNav.PolyMeshDetail.EdgeValues">
            <summary>
            Determines whether an edge has been created or not.
            </summary>
        </member>
        <member name="F:SharpNav.PolyMeshDetail.EdgeValues.Undefined">
            <summary>
            Edge has not been initialized
            </summary>
        </member>
        <member name="F:SharpNav.PolyMeshDetail.EdgeValues.Hull">
            <summary>
            Edge is hull
            </summary>
        </member>
        <member name="P:SharpNav.PolyMeshDetail.MeshCount">
            <summary>
            Gets the number of meshes (MeshData)
            </summary>
        </member>
        <member name="P:SharpNav.PolyMeshDetail.VertCount">
            <summary>
            Gets the number of vertices
            </summary>
        </member>
        <member name="P:SharpNav.PolyMeshDetail.TrisCount">
            <summary>
            Gets the number of triangles
            </summary>
        </member>
        <member name="P:SharpNav.PolyMeshDetail.Meshes">
            <summary>
            Gets the mesh data		
            </summary>
        </member>
        <member name="P:SharpNav.PolyMeshDetail.Verts">
            <summary>
            Gets the vertex data
            </summary>
        </member>
        <member name="P:SharpNav.PolyMeshDetail.Tris">
            <summary>
            Gets the triangle data
            </summary>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.GetJitterX(System.Int32)">
            <summary>
            Offset for the x-coordinate
            </summary>
            <param name="i">Starting number</param>
            <returns>A new offset</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.GetJitterY(System.Int32)">
            <summary>
            Offset for the y-coordinate
            </summary>
            <param name="i">Starting number</param>
            <returns>A new offset</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.GetEdgeFlags(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3[],System.Int32)">
            <summary>
            Determine whether an edge of the triangle is part of the polygon (1 if true, 0 if false)
            </summary>
            <param name="va">Triangle vertex A</param>
            <param name="vb">Triangle vertex B</param>
            <param name="vpoly">Polygon vertex data</param>
            <returns>1 if the vertices are close, 0 if otherwise</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.GetHeightDataSeedsFromVertices(SharpNav.CompactHeightfield,SharpNav.PolyMesh.Polygon,System.Int32,SharpNav.PolyVertex[],System.Int32,SharpNav.HeightPatch,System.Collections.Generic.List{SharpNav.CompactSpanReference})">
            <summary>
            Floodfill heightfield to get 2D height data, starting at vertex locations
            </summary>
            <param name="compactField">Original heightfield data</param>
            <param name="poly">Polygon in PolyMesh</param>
            <param name="polyCount">Number of vertices per polygon</param>
            <param name="verts">PolyMesh Vertices</param>
            <param name="borderSize">Heightfield border size</param>
            <param name="hp">HeightPatch which extracts heightfield data</param>
            <param name="stack">Temporary stack of CompactSpanReferences</param>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.BuildPolyDetail(SharpNav.Geometry.Vector3[],System.Int32,System.Single,System.Single,SharpNav.CompactHeightfield,SharpNav.HeightPatch,System.Collections.Generic.List{SharpNav.Geometry.Vector3},System.Collections.Generic.List{SharpNav.PolyMeshDetail.TriangleData},System.Collections.Generic.List{SharpNav.PolyMeshDetail.EdgeInfo},System.Collections.Generic.List{SharpNav.PolyMeshDetail.SamplingData})">
            <summary>
            Generate the PolyMeshDetail using the PolyMesh and HeightPatch
            </summary>
            <param name="polyMeshVerts">PolyMesh Vertex data</param>
            <param name="numMeshVerts">Number of PolyMesh vertices</param>
            <param name="sampleDist">Sampling distance</param>
            <param name="sampleMaxError">Maximum sampling error</param>
            <param name="compactField">THe compactHeightfield</param>
            <param name="hp">The heightPatch</param>
            <param name="verts">Detail verts</param>
            <param name="tris">Detail triangles</param>
            <param name="edges">The edge array</param>
            <param name="samples">The samples array</param>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.GetHeight(SharpNav.Geometry.Vector3,System.Single,System.Single,SharpNav.HeightPatch)">
            <summary>
            Use the HeightPatch data to obtain a height for a certain location.
            </summary>
            <param name="loc">The location</param>
            <param name="invCellSize">Reciprocal of cell size</param>
            <param name="cellHeight">Cell height</param>
            <param name="hp">Height patch</param>
            <returns>The height</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.Prev(System.Int32,System.Int32)">
            <summary>
            Gets the previous vertex index
            </summary>
            <param name="i">The current index</param>
            <param name="n">The max number of vertices</param>
            <returns>The previous index</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.Next(System.Int32,System.Int32)">
            <summary>
            Gets the next vertex index
            </summary>
            <param name="i">The current index</param>
            <param name="n">The max number of vertices</param>
            <returns>The next index</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.DelaunayHull(System.Collections.Generic.List{SharpNav.Geometry.Vector3},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{SharpNav.PolyMeshDetail.TriangleData},System.Collections.Generic.List{SharpNav.PolyMeshDetail.EdgeInfo})">
            <summary>
            Delaunay triangulation is used to triangulate the polygon after adding detail to the edges. The result is a mesh.
            </summary>
            <param name="pts">Vertex data (each vertex has 3 elements x,y,z)</param>
            <param name="hull">The hull (purpose?)</param>
            <param name="tris">The triangles formed.</param>
            <param name="edges">The edge connections formed.</param>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.CompleteFacet(System.Collections.Generic.List{SharpNav.Geometry.Vector3},System.Collections.Generic.List{SharpNav.PolyMeshDetail.EdgeInfo},System.Int32@,System.Int32)">
            <summary>
            If a face has missing edges, then fill in those edges
            </summary>
            <param name="pts">List of points</param>
            <param name="edges">List of edges</param>
            <param name="nfaces">The total number of faces</param>
            <param name="curEdge">The current index in the edge list</param>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.AddEdge(System.Collections.Generic.List{SharpNav.PolyMeshDetail.EdgeInfo},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an edge to the edge list if it hasn't been done so already
            </summary>
            <param name="edges">Edge list</param>
            <param name="s">Endpt 0</param>
            <param name="t">Endpt 1</param>
            <param name="leftFace">Left face value</param>
            <param name="rightFace">Right face value</param>
            <returns>The index of the edge (edge can already exist in the list).</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.FindEdge(System.Collections.Generic.List{SharpNav.PolyMeshDetail.EdgeInfo},System.Int32,System.Int32)">
            <summary>
            Search for an edge within the edge list
            </summary>
            <param name="edges">Edge list</param>
            <param name="s">Endpt 0</param>
            <param name="t">Endpt 1</param>
            <returns>If found, return the edge's index. Otherwise, return -1.</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.OverlapEdges(System.Collections.Generic.List{SharpNav.Geometry.Vector3},System.Collections.Generic.List{SharpNav.PolyMeshDetail.EdgeInfo},System.Int32,System.Int32)">
            <summary>
            Determine whether edges overlap with the points
            </summary>
            <param name="pts">Individual points</param>
            <param name="edges">Edge list</param>
            <param name="s1">An edge's endpt 0</param>
            <param name="t1">An edge's endpt1</param>
            <returns>True if there is overlap, false if not</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.CircumCircle(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3@,System.Single@)">
            <summary>
            Form a triangle ABC out of the three vectors and calculate the center and radius 
            of the resulting circumcircle
            </summary>
            <param name="p1">Point A</param>
            <param name="p2">Point B</param>
            <param name="p3">point C</param>
            <param name="c">Circumcirlce center</param>
            <param name="r">Circumcircle radius</param>
            <returns>True, if a circumcirle can be found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.DistanceToTriMesh(SharpNav.Geometry.Vector3,System.Collections.Generic.List{SharpNav.Geometry.Vector3},System.Collections.Generic.List{SharpNav.PolyMeshDetail.TriangleData})">
            <summary>
            Find the distance from a point to a triangle mesh.
            </summary>
            <param name="p">Individual point</param>
            <param name="verts">Vertex array</param>
            <param name="tris">Triange list</param>
            <returns>The distance</returns>
        </member>
        <member name="T:SharpNav.PolyMeshDetail.MeshData">
            <summary>
            The MeshData struct contains information about vertex and triangle base and offset values for array indices
            </summary>
        </member>
        <member name="T:SharpNav.PolyMeshDetail.TriangleData">
            <summary>
            The triangle info contains three vertex hashes and a flag
            </summary>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.TriangleData.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMeshDetail.TriangleData" /> struct.
            </summary>
            <param name="hash0">Vertex A</param>
            <param name="hash1">Vertex B</param>
            <param name="hash2">Vertex C</param>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.TriangleData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMeshDetail.TriangleData" /> struct.
            </summary>
            <param name="hash0">Vertex A</param>
            <param name="hash1">Vertex B</param>
            <param name="hash2">Vertex C</param>
            <param name="flags">The triangle flags</param>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.TriangleData.#ctor(SharpNav.PolyMeshDetail.TriangleData,System.Collections.Generic.List{SharpNav.Geometry.Vector3},SharpNav.Geometry.Vector3[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMeshDetail.TriangleData" /> struct.
            </summary>
            <param name="data">The triangle itself</param>
            <param name="verts">The list of all the vertices</param>
            <param name="vpoly">The list of the polygon's vertices</param>
        </member>
        <member name="P:SharpNav.PolyMeshDetail.TriangleData.Item(System.Int32)">
            <summary>
            Gets a triangle's particular vertex
            </summary>
            <param name="index">Vertex index</param>
            <returns>Triangle vertex hash</returns>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.TriangleData.GetTriFlags(SharpNav.PolyMeshDetail.TriangleData@,System.Collections.Generic.List{SharpNav.Geometry.Vector3},SharpNav.Geometry.Vector3[],System.Int32)">
            <summary>
            Determine which edges of the triangle are part of the polygon
            </summary>
            <param name="t">A triangle.</param>
            <param name="verts">The vertex buffer that the triangle is referencing.</param>
            <param name="vpoly">Polygon vertex data.</param>
            <returns>The triangle's flags.</returns>
        </member>
        <member name="T:SharpNav.PolyMeshDetail.EdgeInfo">
            <summary>
            The EdgeInfo struct contains two enpoints and the faces/polygons to the left and right of that edge.
            </summary>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.EdgeInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMeshDetail.EdgeInfo"/> struct.
            </summary>
            <param name="endPt0">Point A</param>
            <param name="endPt1">Point B</param>
            <param name="rightFace">The face to the left of the edge</param>
            <param name="leftFace">The face to the right of the edge</param>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.EdgeInfo.UpdateLeftFace(SharpNav.PolyMeshDetail.EdgeInfo@,System.Int32,System.Int32,System.Int32)">
            <summary>
            If the left face is undefined, assign it a value
            </summary>
            <param name="e">The current edge</param>
            <param name="s">Endpoint A</param>
            <param name="t">Endpoint B</param>
            <param name="f">The face value</param>
        </member>
        <member name="T:SharpNav.PolyMeshDetail.SamplingData">
            <summary>
            The SamplingData struct contains information about sampled vertices from the PolyMesh
            </summary>
        </member>
        <member name="M:SharpNav.PolyMeshDetail.SamplingData.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyMeshDetail.SamplingData"/> struct.
            </summary>
            <param name="x">The x-coordinate</param>
            <param name="y">The y-coordinate</param>
            <param name="z">The z-coordinate</param>
            <param name="isSampled">Whether or not the vertex has been sampled</param>
        </member>
        <member name="T:SharpNav.NavMeshQuery">
            <summary>
            Do pathfinding calculations on the TiledNavMesh
            </summary>
        </member>
        <member name="P:SharpNav.NavMeshQuery.NavMesh">
            <summary>
            Gets the mesh that this query is using for data.
            </summary>
        </member>
        <member name="M:SharpNav.NavMeshQuery.#ctor(SharpNav.TiledNavMesh,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.NavMeshQuery"/> class.
            </summary>
            <param name="nav">The navigation mesh to query.</param>
            <param name="maxNodes">The maximum number of nodes that can be queued in a query.</param>
        </member>
        <member name="M:SharpNav.NavMeshQuery.#ctor(SharpNav.TiledNavMesh,System.Int32,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.NavMeshQuery"/> class.
            </summary>
            <param name="nav">The navigation mesh to query.</param>
            <param name="maxNodes">The maximum number of nodes that can be queued in a query.</param>
            <param name="rand">A random number generator for use in methods like <see cref="M:SharpNav.NavMeshQuery.FindRandomPoint"/></param>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindRandomPointOnPoly(SharpNav.Pathfinding.NavPolyId)">
            <summary>
            Finds a random point on a polygon.
            </summary>
            <param name="poly">Polygon to find a random point on.</param>
            <returns>Resulting random point</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindRandomPointOnPoly(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3@)">
            <summary>
            Finds a random point on a polygon.
            </summary>
            <param name="polyId">Polygon to find a radom point on.</param>
            <param name="randomPt">Resulting random point.</param>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindRandomPoint">
            <summary>
            Finds a random point somewhere in the navigation mesh.
            </summary>
            <returns>Resulting random point.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindRandomPoint(SharpNav.Pathfinding.NavPoint@)">
            <summary>
            Finds a random point somewhere in the navigation mesh.
            </summary>
            <param name="randomPoint">Resulting random point.</param>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindRandomConnectedPoint(SharpNav.Pathfinding.NavPoint)">
            <summary>
            Finds a random point in a NavMesh connected to a specified point on the same mesh.
            </summary>
            <param name="connectedTo">The point that the random point will be connected to.</param>
            <returns>A random point connected to <c>connectedTo</c>.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindRandomConnectedPoint(SharpNav.Pathfinding.NavPoint@,SharpNav.Pathfinding.NavPoint@)">
            <summary>
            Finds a random point in a NavMesh connected to a specified point on the same mesh.
            </summary>
            <param name="connectedTo">The point that the random point will be connected to.</param>
            <param name="randomPoint">A random point connected to <c>connectedTo</c>.</param>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindRandomPointAroundCircle(SharpNav.Pathfinding.NavPoint,System.Single)">
            <summary>
            Finds a random point in a NavMesh within a specified circle.
            </summary>
            <param name="center">The center point.</param>
            <param name="radius">The maximum distance away from the center that the random point can be. If 0, any point on the mesh can be returned.</param>
            <returns>A random point within the specified circle.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindRandomPointAroundCircle(SharpNav.Pathfinding.NavPoint@,System.Single,SharpNav.Pathfinding.NavPoint@)">
            <summary>
            Finds a random point in a NavMesh within a specified circle.
            </summary>
            <param name="center">The center point.</param>
            <param name="radius">The maximum distance away from the center that the random point can be. If 0, any connected point on the mesh can be returned.</param>
            <param name="randomPoint">A random point within the specified circle.</param>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindPath(SharpNav.Pathfinding.NavPoint@,SharpNav.Pathfinding.NavPoint@,SharpNav.Pathfinding.NavQueryFilter,SharpNav.Pathfinding.Path)">
            <summary>
            Find a path from the start polygon to the end polygon.
            -If the end polygon can't be reached, the last polygon will be nearest the end polygon
            -If the path array is too small, it will be filled as far as possible 
            -start and end positions are used to calculate traversal costs
            </summary>
            <param name="startPt">The start point.</param>
            <param name="endPt">The end point.</param>
            <param name="filter">A filter for the navmesh data.</param>
            <param name="path">The path of polygon references</param>
            <returns>True, if path found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindStraightPath(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3,SharpNav.Pathfinding.Path,SharpNav.Pathfinding.StraightPath,SharpNav.Pathfinding.PathBuildFlags)">
            <summary>
            Add vertices and portals to a regular path computed from the method FindPath().
            </summary>
            <param name="startPos">Starting position</param>
            <param name="endPos">Ending position</param>
            <param name="path">Path of polygon references</param>
            <param name="pathSize">Length of path</param>
            <param name="straightPath">An array of points on the straight path</param>
            <param name="straightPathFlags">An array of flags</param>
            <param name="straightPathRefs">An array of polygon references</param>
            <param name="straightPathCount">The number of points on the path</param>
            <param name="maxStraightPath">The maximum length allowed for the straight path</param>
            <param name="options">Options flag</param>
            <returns>True, if path found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.MoveAlongSurface(SharpNav.Pathfinding.NavPoint@,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Collections.Generic.List{SharpNav.Pathfinding.NavPolyId})">
            <summary>
            This method is optimized for small delta movement and a small number of polygons.
            If movement distance is too large, the result will form an incomplete path.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPos">End position</param>
            <param name="resultPos">Intermediate point</param>
            <param name="visited">Visited polygon references</param>
            <returns>True, if point found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.InitSlicedFindPath(SharpNav.Pathfinding.NavPoint@,SharpNav.Pathfinding.NavPoint@,SharpNav.Pathfinding.NavQueryFilter,SharpNav.Pathfinding.FindPathOptions)">
            <summary>
            Initialize a sliced path, which is used mostly for crowd pathfinding.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="filter">A filter for the navigation mesh.</param>
            <param name="options">Options for how the path should be found.</param>
            <returns>True if path initialized, false otherwise</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.UpdateSlicedFindPath(System.Int32,System.Int32@)">
            <summary>
            Update the sliced path as agents move across the path.
            </summary>
            <param name="maxIter">Maximum iterations</param>
            <param name="doneIters">Number of times iterated through</param>
            <returns>True if updated, false if not</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FinalizeSlicedFindPath(SharpNav.Pathfinding.Path)">
            <summary>
            Save the sliced path 
            </summary>
            <param name="path">The path in terms of polygon references</param>
            <param name="pathCount">The path length</param>
            <param name="maxPath">The maximum path length allowed</param>
            <returns>True if the path is saved, false if not</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FinalizedSlicedPathPartial(SharpNav.Pathfinding.Path,SharpNav.Pathfinding.Path)">
            <summary>
            Save a partial path
            </summary>
            <param name="existing">Existing path</param>
            <param name="existingSize">Existing path's length</param>
            <param name="path">New path</param>
            <param name="pathCount">New path's length</param>
            <param name="maxPath">Maximum path length allowed</param>
            <returns>True if path saved, false if not</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindLocalNeighborhood(SharpNav.Pathfinding.NavPoint@,System.Single,SharpNav.Pathfinding.NavPolyId[],SharpNav.Pathfinding.NavPolyId[],System.Int32@,System.Int32)">
            <summary>
            Store polygons that are within a certain range from the current polygon
            </summary>
            <param name="centerPoint">Starting position</param>
            <param name="radius">Range to search within</param>
            <param name="resultRef">All the polygons within range</param>
            <param name="resultParent">Polygon's parents</param>
            <param name="resultCount">Number of polygons stored</param>
            <param name="maxResult">Maximum number of polygons allowed</param>
            <returns>True, unless input is invalid</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.GetPolyWallSegments(SharpNav.Pathfinding.NavPolyId,SharpNav.Crowds.LocalBoundary.Segment[],SharpNav.Pathfinding.NavPolyId[],System.Int32@,System.Int32)">
            <summary>
            Collect all the edges from a polygon.
            </summary>
            <param name="reference">The polygon reference</param>
            <param name="segmentVerts">Segment vertices</param>
            <param name="segmentRefs">The polygon reference containing the segment</param>
            <param name="segmentCount">The number of segments stored</param>
            <param name="maxSegments">The maximum number of segments allowed</param>
            <returns>True, unless the polygon reference is invalid</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.InsertInterval(SharpNav.NavMeshQuery.SegInterval[],System.Int32@,System.Int32,System.Int32,System.Int32,SharpNav.Pathfinding.NavPolyId)">
            <summary>
            Insert a segment into the array
            </summary>
            <param name="ints">The array of segments</param>
            <param name="nints">The number of segments</param>
            <param name="maxInts">The maximium number of segments allowed</param>
            <param name="tmin">Parameter t minimum</param>
            <param name="tmax">Parameter t maximum</param>
            <param name="reference">Polygon reference</param>
        </member>
        <member name="M:SharpNav.NavMeshQuery.GetEdgeMidPoint(SharpNav.Pathfinding.NavPolyId,SharpNav.Pathfinding.NavPoly,SharpNav.Pathfinding.NavTile,SharpNav.Pathfinding.NavPolyId,SharpNav.Pathfinding.NavPoly,SharpNav.Pathfinding.NavTile,SharpNav.Geometry.Vector3@)">
            <summary>
            Get edge midpoint between two prolygons
            </summary>
            <param name="from">"From" polygon reference</param>
            <param name="fromPoly">"From" polygon data</param>
            <param name="fromTile">"From" mesh tile</param>
            <param name="to">"To" polygon reference</param>
            <param name="toPoly">"To" polygon data</param>
            <param name="toTile">"To" mesh tile</param>
            <param name="mid">Edge midpoint</param>
            <returns>True, if midpoint found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.GetPortalPoints(SharpNav.Pathfinding.NavPolyId,SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Pathfinding.NavPolyType@,SharpNav.Pathfinding.NavPolyType@)">
            <summary>
            Find points on the left and right side.
            </summary>
            <param name="from">"From" polygon reference</param>
            <param name="to">"To" polygon reference</param>
            <param name="left">Point on the left side</param>
            <param name="right">Point on the right side</param>
            <param name="fromType">Polygon type of "From" polygon</param>
            <param name="toType">Polygon type of "To" polygon</param>
            <returns>True, if points found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.GetPortalPoints(SharpNav.Pathfinding.NavPolyId,SharpNav.Pathfinding.NavPoly,SharpNav.Pathfinding.NavTile,SharpNav.Pathfinding.NavPolyId,SharpNav.Pathfinding.NavPoly,SharpNav.Pathfinding.NavTile,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Find points on the left and right side.
            </summary>
            <param name="from">"From" polygon reference</param>
            <param name="fromPoly">"From" polygon data</param>
            <param name="fromTile">"From" mesh tile</param>
            <param name="to">"To" polygon reference</param>
            <param name="toPoly">"To" polygon data</param>
            <param name="toTile">"To" mesh tile</param>
            <param name="left">Resulting point on the left side</param>
            <param name="right">Resulting point on the right side</param>
            <returns>True, if points found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.ClosestPointOnPoly(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3@)">
            <summary>
            Given a point on the polygon, find the closest point
            </summary>
            <param name="reference">Polygon reference</param>
            <param name="pos">Given point</param>
            <param name="closest">Resulting closest point</param>
            <returns>True, if point found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.ClosestPointOnPoly(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3@,System.Boolean@)">
            <summary>
            Given a point on the polygon, find the closest point
            </summary>
            <param name="reference">Polygon reference</param>
            <param name="pos">Current position</param>
            <param name="closest">Resulting closest position</param>
            <param name="posOverPoly">Determines whether the position can be found on the polygon</param>
            <returns>True, if the closest point is found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.ClosestPointOnPolyBoundary(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3@)">
            <summary>
            Given a point on a polygon, find the closest point which lies on the polygon boundary.
            </summary>
            <param name="reference">Polygon reference</param>
            <param name="pos">Current position</param>
            <param name="closest">Resulting closest point</param>
            <returns>True, if the closest point is found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.AppendPortals(System.Int32,System.Int32,SharpNav.Geometry.Vector3,SharpNav.Pathfinding.Path,SharpNav.Pathfinding.StraightPath,SharpNav.Pathfinding.PathBuildFlags)">
            <summary>
            Update the vertices on the straight path
            </summary>
            <param name="startIdx">Original path's starting index</param>
            <param name="endIdx">Original path's end index</param>
            <param name="endPos">The end position</param>
            <param name="path">The original path of polygon references</param>
            <param name="straightPath">An array of points on the straight path</param>
            <param name="straightPathFlags">An array of flags</param>
            <param name="straightPathRefs">An array of polygon references</param>
            <param name="straightPathCount">The number of points on the path</param>
            <param name="maxStraightPath">The maximum length allowed for the straight path</param>
            <param name="options">Options flag</param>
            <returns></returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.GetPolyHeight(SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3,System.Single@)">
            <summary>
            Return false if the provided position is outside the xz-bounds.
            </summary>
            <param name="reference">Polygon reference</param>
            <param name="pos">Current position</param>
            <param name="height">Resulting polygon height</param>
            <returns>True, if height found. False, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindNearestPoly(SharpNav.Geometry.Vector3,SharpNav.Geometry.Vector3)">
            <summary>
            Find the nearest poly within a certain range.
            </summary>
            <param name="center">Center.</param>
            <param name="extents">Extents.</param>
            <returns>The neareast point.</returns>
        </member>
        <member name="M:SharpNav.NavMeshQuery.FindNearestPoly(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,SharpNav.Pathfinding.NavPoint@)">
            <summary>
            Find the nearest poly within a certain range.
            </summary>
            <param name="center">Center.</param>
            <param name="extents">Extents.</param>
            <param name="nearestPt">The neareast point.</param>
        </member>
        <member name="M:SharpNav.NavMeshQuery.QueryPolygons(SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@,System.Collections.Generic.List{SharpNav.Pathfinding.NavPolyId})">
            <summary>
            Finds nearby polygons within a certain range.
            </summary>
            <param name="center">The starting point</param>
            <param name="extent">The range to search within</param>
            <param name="polys">A list of polygons</param>
            <returns>True, if successful. False, if otherwise.</returns>
        </member>
        <member name="T:SharpNav.NavNode">
            <summary>
            Every polygon becomes a Node, which contains a position and cost.
            </summary>
        </member>
        <member name="F:SharpNav.NavNode.PolyCost">
            <summary>
            Cost from previous node/poly to current.
            </summary>
        </member>
        <member name="F:SharpNav.NavNode.TotalCost">
            <summary>
            Total cost up to this node
            </summary>
        </member>
        <member name="T:SharpNav.NodePool">
            <summary>
            Link all nodes together. Store indices in hash map.
            </summary>
        </member>
        <member name="M:SharpNav.NodePool.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.NodePool"/> class.
            </summary>
            <param name="maxNodes">The maximum number of nodes that can be stored</param>
            <param name="hashSize">The maximum number of elements in the hash table</param>
        </member>
        <member name="M:SharpNav.NodePool.Clear">
            <summary>
            Reset all the data.
            </summary>
        </member>
        <member name="M:SharpNav.NodePool.FindNode(SharpNav.Pathfinding.NavPolyId)">
            <summary>
            Try to find a node.
            </summary>
            <param name="id">Node's id</param>
            <returns>The node, if found. Null, if otherwise.</returns>
        </member>
        <member name="M:SharpNav.NodePool.GetNode(SharpNav.Pathfinding.NavPolyId)">
            <summary>
            Try to find the node. If it doesn't exist, create a new node.
            </summary>
            <param name="id">Node's id</param>
            <returns>The node</returns>
        </member>
        <member name="M:SharpNav.NodePool.GetNodeIdx(SharpNav.NavNode)">
            <summary>
            Gets the id of the node.
            </summary>
            <param name="node">The node</param>
            <returns>The id</returns>
        </member>
        <member name="M:SharpNav.NodePool.GetNodeAtIdx(System.Int32)">
            <summary>
            Return a node at a certain index. If index is out-of-bounds, return null.
            </summary>
            <param name="idx">Node index</param>
            <returns></returns>
        </member>
        <member name="T:SharpNav.NodeFlags">
            <summary>
            Determine which list the node is in.
            </summary>
        </member>
        <member name="F:SharpNav.NodeFlags.Open">
            <summary>
            Open list contains nodes to examine.
            </summary>
        </member>
        <member name="F:SharpNav.NodeFlags.Closed">
            <summary>
            Closed list stores path.
            </summary>
        </member>
        <member name="F:SharpNav.NodeFlags.ParentDetached">
            <summary>
            Parent of the node is not adjacent. Found using raycast.
            </summary>
        </member>
        <member name="T:SharpNav.PolyVertex">
            <summary>
            A vertex inside a <see cref="T:SharpNav.PolyMesh"/>.
            </summary>
        </member>
        <member name="F:SharpNav.PolyVertex.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="F:SharpNav.PolyVertex.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="F:SharpNav.PolyVertex.Z">
            <summary>
            The Z coordinate.
            </summary>
        </member>
        <member name="M:SharpNav.PolyVertex.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyVertex"/> struct.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
        </member>
        <member name="M:SharpNav.PolyVertex.ComponentMin(SharpNav.PolyVertex,SharpNav.PolyVertex)">
            <summary>
            Calculates the component-wise minimum of two vertices.
            </summary>
            <param name="a">A vertex.</param>
            <param name="b">Another vertex.</param>
            <returns>The component-wise minimum of the two vertices.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.ComponentMin(SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@)">
            <summary>
            Calculates the component-wise minimum of two vertices.
            </summary>
            <param name="a">A vertex.</param>
            <param name="b">Another vertex.</param>
            <param name="result">The component-wise minimum of the two vertices.</param>
        </member>
        <member name="M:SharpNav.PolyVertex.ComponentMax(SharpNav.PolyVertex,SharpNav.PolyVertex)">
            <summary>
            Calculates the component-wise maximum of two vertices.
            </summary>
            <param name="a">A vertex.</param>
            <param name="b">Another vertex.</param>
            <returns>The component-wise maximum of the two vertices.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.ComponentMax(SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@)">
            <summary>
            Calculates the component-wise maximum of two vertices.
            </summary>
            <param name="a">A vertex.</param>
            <param name="b">Another vertex.</param>
            <param name="result">The component-wise maximum of the two vertices.</param>
        </member>
        <member name="M:SharpNav.PolyVertex.IsLeft(SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@)">
            <summary>
            Gets the leftness of a triangle formed from 3 contour vertices.
            </summary>
            <param name="a">The first vertex.</param>
            <param name="b">The second vertex.</param>
            <param name="c">The third vertex.</param>
            <returns>A value indicating the leftness of the triangle.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.IsLeftOn(SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@)">
            <summary>
            Gets the leftness (left or on) of a triangle formed from 3 contour vertices.
            </summary>
            <param name="a">The first vertex.</param>
            <param name="b">The second vertex.</param>
            <param name="c">The third vertex.</param>
            <returns>A value indicating whether the triangle is left or on.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.Equal2D(SharpNav.PolyVertex@,SharpNav.PolyVertex@)">
            <summary>
            Compares vertex equality in 2D.
            </summary>
            <param name="a">A vertex.</param>
            <param name="b">Another vertex.</param>
            <returns>A value indicating whether the X and Z components of both vertices are equal.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.Intersect(SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@)">
            <summary>
            True if and only if segments AB and CD intersect, properly or improperly.
            </summary>
            <param name="a">Point A of segment AB.</param>
            <param name="b">Point B of segment AB.</param>
            <param name="c">Point C of segment CD.</param>
            <param name="d">Point D of segment CD.</param>
            <returns>A value indicating whether segments AB and CD intersect.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.IntersectProp(SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@)">
            <summary>
            True if and only if segments AB and CD intersect properly.
            </summary>
            <remarks>
            Proper intersection: A point interior to both segments is shared. Properness determined by strict leftness.
            </remarks>
            <param name="a">Point A of segment AB.</param>
            <param name="b">Point B of segment AB.</param>
            <param name="c">Point C of segment CD.</param>
            <param name="d">Point D of segment CD.</param>
            <returns>A value indicating whether segements AB and CD are intersecting properly.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.IsBetween(SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@)">
            <summary>
            True if and only if A, B, and C are collinear and point C lies on closed segment AB
            </summary>
            <param name="a">Point A of segment AB.</param>
            <param name="b">Point B of segment AB.</param>
            <param name="c">Point C.</param>
            <returns>A value indicating whether the three points are collinear with C in the middle.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.IsCollinear(SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@)">
            <summary>
            True if and only if points A, B, and C are collinear.
            </summary>
            <param name="a">Point A.</param>
            <param name="b">Point B.</param>
            <param name="c">Point C.</param>
            <returns>A value indicating whether the points are collinear.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.Area2D(SharpNav.PolyVertex@,SharpNav.PolyVertex@,SharpNav.PolyVertex@,System.Int32@)">
            <summary>
            Gets the 2D area of the triangle ABC.
            </summary>
            <param name="a">Point A of triangle ABC.</param>
            <param name="b">Point B of triangle ABC.</param>
            <param name="c">Point C of triangle ABC.</param>
            <param name="area">The 2D area of the triangle.</param>
        </member>
        <member name="M:SharpNav.PolyVertex.Area2D(SharpNav.ContourVertex@,SharpNav.ContourVertex@,SharpNav.ContourVertex@,System.Int32@)">
            <summary>
            Gets the 2D area of the triangle ABC.
            </summary>
            <param name="a">Point A of triangle ABC.</param>
            <param name="b">Point B of triangle ABC.</param>
            <param name="c">Point C of triangle ABC.</param>
            <param name="area">The 2D area of the triangle.</param>
        </member>
        <member name="M:SharpNav.PolyVertex.op_Equality(SharpNav.PolyVertex,SharpNav.PolyVertex)">
            <summary>
            Compares two vertices for equality.
            </summary>
            <param name="left">A vertex.</param>
            <param name="right">Another vertex.</param>
            <returns>A value indicating whether the two vertices are equal.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.op_Inequality(SharpNav.PolyVertex,SharpNav.PolyVertex)">
            <summary>
            Compares two vertices for inequality.
            </summary>
            <param name="left">A vertex.</param>
            <param name="right">Another vertex.</param>
            <returns>A value indicating whether the two vertices are not equal.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.Equals(SharpNav.PolyVertex)">
            <summary>
            Compares another <see cref="T:SharpNav.PolyVertex"/> with this instance for equality.
            </summary>
            <param name="other">The other instance.</param>
            <returns>A value indicating whether the two vertices are equal.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.Equals(System.Object)">
            <summary>
            Compares an object with this instance for equality.
            </summary>
            <param name="obj">An object.</param>
            <returns>A value indicating whether the object is equal to this instance.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.GetHashCode">
            <summary>
            Gets a hash code unique to the contents of this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.ToString">
            <summary>
            Gets a human-readable version of the vertex.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:SharpNav.PolyVertex.RoughYEqualityComparer">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> of <see cref="T:SharpNav.PolyVertex"/> that allows for the
            Y coordinates of two vertices to be within a specified range and still be considered equal.
            </summary>
        </member>
        <member name="M:SharpNav.PolyVertex.RoughYEqualityComparer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.PolyVertex.RoughYEqualityComparer"/> class.
            </summary>
            <param name="epsilonY">The range of Y values in which two vertices are considered equal.</param>
        </member>
        <member name="M:SharpNav.PolyVertex.RoughYEqualityComparer.Equals(SharpNav.PolyVertex,SharpNav.PolyVertex)">
            <summary>
            Compares two vertices for equality.
            </summary>
            <param name="left">A vertex.</param>
            <param name="right">Another vertex.</param>
            <returns>A value indicating whether the two vertices are equal.</returns>
        </member>
        <member name="M:SharpNav.PolyVertex.RoughYEqualityComparer.GetHashCode(SharpNav.PolyVertex)">
            <summary>
            Gets a unique hash code for the contents of a <see cref="T:SharpNav.PolyVertex"/> instance.
            </summary>
            <param name="obj">A vertex.</param>
            <returns>A hash code.</returns>
        </member>
        <member name="T:SharpNav.RegionFlags">
            <summary>
            Flags that can be applied to a region.
            </summary>
        </member>
        <member name="F:SharpNav.RegionFlags.Border">
            <summary>
            The border flag
            </summary>
        </member>
        <member name="F:SharpNav.RegionFlags.VertexBorder">
            <summary>
            The vertex border flag
            </summary>
        </member>
        <member name="F:SharpNav.RegionFlags.AreaBorder">
            <summary>
            The area border flag
            </summary>
        </member>
        <member name="T:SharpNav.RegionId">
            <summary>
            A <see cref="T:SharpNav.RegionId"/> is an identifier with flags marking borders.
            </summary>
        </member>
        <member name="F:SharpNav.RegionId.Null">
            <summary>
            A null region is one with an ID of 0.
            </summary>
        </member>
        <member name="F:SharpNav.RegionId.MaskId">
            <summary>
            A bitmask 
            </summary>
        </member>
        <member name="F:SharpNav.RegionId.bits">
            <summary>
            The internal storage of a <see cref="T:SharpNav.RegionId"/>. The <see cref="T:SharpNav.RegionFlags"/> portion are the most
            significant bits, the integer identifier are the least significant bits, marked by <see cref="F:SharpNav.RegionId.MaskId"/>.
            </summary>
        </member>
        <member name="M:SharpNav.RegionId.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.RegionId"/> struct without any flags.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:SharpNav.RegionId.#ctor(System.Int32,SharpNav.RegionFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.RegionId"/> struct.
            </summary>
            <param name="id"></param>
            <param name="flags"></param>
        </member>
        <member name="P:SharpNav.RegionId.Id">
            <summary>
            Gets the ID of the region without any flags.
            </summary>
        </member>
        <member name="P:SharpNav.RegionId.Flags">
            <summary>
            Gets the flags set for this region.
            </summary>
        </member>
        <member name="P:SharpNav.RegionId.IsNull">
            <summary>
            Gets a value indicating whether the region is the null region (ID == 0).
            </summary>
        </member>
        <member name="M:SharpNav.RegionId.FromRawBits(System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpNav.RegionId"/> from a value that contains both the region ID and the flags.
            </summary>
            <param name="bits">The int containing <see cref="T:SharpNav.RegionId"/> data.</param>
            <returns>A new instance of the <see cref="T:SharpNav.RegionId"/> struct with the specified data.</returns>
        </member>
        <member name="M:SharpNav.RegionId.WithFlags(SharpNav.RegionId,SharpNav.RegionFlags)">
            <summary>
            Creates a new <see cref="T:SharpNav.RegionId"/> with extra flags.
            </summary>
            <param name="region">The region to add flags to.</param>
            <param name="flags">The flags to add.</param>
            <returns>A new instance of the <see cref="T:SharpNav.RegionId"/> struct with extra flags.</returns>
        </member>
        <member name="M:SharpNav.RegionId.WithoutFlags(SharpNav.RegionId)">
            <summary>
            Creates a new instance of the <see cref="T:SharpNav.RegionId"/> class without any flags set.
            </summary>
            <param name="region">The region to use.</param>
            <returns>A new instance of the <see cref="T:SharpNav.RegionId"/> struct without any flags set.</returns>
        </member>
        <member name="M:SharpNav.RegionId.WithoutFlags(SharpNav.RegionId,SharpNav.RegionFlags)">
            <summary>
            Creates a new instance of the <see cref="T:SharpNav.RegionId"/> class without certain flags set.
            </summary>
            <param name="region">The region to use.</param>
            <param name="flags">The flags to unset.</param>
            <returns>A new instnace of the <see cref="T:SharpNav.RegionId"/> struct without certain flags set.</returns>
        </member>
        <member name="M:SharpNav.RegionId.HasFlags(SharpNav.RegionId,SharpNav.RegionFlags)">
            <summary>
            Checks if a region has certain flags.
            </summary>
            <param name="region">The region to check.</param>
            <param name="flags">The flags to check.</param>
            <returns>A value indicating whether the region has all of the specified flags.</returns>
        </member>
        <member name="M:SharpNav.RegionId.op_Equality(SharpNav.RegionId,System.Int32)">
            <summary>
            Compares an instance of <see cref="T:SharpNav.RegionId"/> with an integer for equality.
            </summary>
            <remarks>
            This checks for both the ID and flags set on the region. If you want to only compare the IDs, use the
            following code:
            <code>
            RegionId left = ...;
            int right = ...;
            if (left.Id == right)
            {
               // ...
            }
            </code>
            </remarks>
            <param name="left">An instance of <see cref="T:SharpNav.RegionId"/>.</param>
            <param name="right">An integer.</param>
            <returns>A value indicating whether the two values are equal.</returns>
        </member>
        <member name="M:SharpNav.RegionId.op_Inequality(SharpNav.RegionId,System.Int32)">
            <summary>
            Compares an instance of <see cref="T:SharpNav.RegionId"/> with an integer for inequality.
            </summary>
            <remarks>
            This checks for both the ID and flags set on the region. If you want to only compare the IDs, use the
            following code:
            <code>
            RegionId left = ...;
            int right = ...;
            if (left.Id != right)
            {
               // ...
            }
            </code>
            </remarks>
            <param name="left">An instance of <see cref="T:SharpNav.RegionId"/>.</param>
            <param name="right">An integer.</param>
            <returns>A value indicating whether the two values are unequal.</returns>
        </member>
        <member name="M:SharpNav.RegionId.op_Equality(SharpNav.RegionId,SharpNav.RegionId)">
            <summary>
            Compares two instances of <see cref="T:SharpNav.RegionId"/> for equality.
            </summary>
            <remarks>
            This checks for both the ID and flags set on the regions. If you want to only compare the IDs, use the
            following code:
            <code>
            RegionId left = ...;
            RegionId right = ...;
            if (left.Id == right.Id)
            {
               // ...
            }
            </code>
            </remarks>
            <param name="left">An instance of <see cref="T:SharpNav.RegionId"/>.</param>
            <param name="right">Another instance of <see cref="T:SharpNav.RegionId"/>.</param>
            <returns>A value indicating whether the two instances are equal.</returns>
        </member>
        <member name="M:SharpNav.RegionId.op_Inequality(SharpNav.RegionId,SharpNav.RegionId)">
            <summary>
            Compares two instances of <see cref="T:SharpNav.RegionId"/> for inequality.
            </summary>
            <remarks>
            This checks for both the ID and flags set on the regions. If you want to only compare the IDs, use the
            following code:
            <code>
            RegionId left = ...;
            RegionId right = ...;
            if (left.Id != right.Id)
            {
               // ...
            }
            </code>
            </remarks>
            <param name="left">An instance of <see cref="T:SharpNav.RegionId"/>.</param>
            <param name="right">Another instance of <see cref="T:SharpNav.RegionId"/>.</param>
            <returns>A value indicating whether the two instances are unequal.</returns>
        </member>
        <member name="M:SharpNav.RegionId.op_Explicit(SharpNav.RegionId)~System.Int32">
            <summary>
            Converts an instance of <see cref="T:SharpNav.RegionId"/> to an integer containing both the ID and the flags.
            </summary>
            <param name="id">An instance of <see cref="T:SharpNav.RegionId"/>.</param>
            <returns>An integer.</returns>
        </member>
        <member name="M:SharpNav.RegionId.Equals(SharpNav.RegionId)">
            <summary>
            Compares this instance with another instance of <see cref="T:SharpNav.RegionId"/> for equality, including flags.
            </summary>
            <param name="other">An instance of <see cref="T:SharpNav.RegionId"/>.</param>
            <returns>A value indicating whether the two instances are equal.</returns>
        </member>
        <member name="M:SharpNav.RegionId.Equals(System.Int32)">
            <summary>
            Compares this instance with another an intenger for equality, including flags.
            </summary>
            <param name="other">An integer.</param>
            <returns>A value indicating whether the two instances are equal.</returns>
        </member>
        <member name="M:SharpNav.RegionId.Equals(System.Object)">
            <summary>
            Compares this instance with an object for equality.
            </summary>
            <param name="obj">An object</param>
            <returns>A value indicating whether the two instances are equal.</returns>
        </member>
        <member name="M:SharpNav.RegionId.GetHashCode">
            <summary>
            Gets a unique hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:SharpNav.RegionId.ToString">
            <summary>
            Gets a human-readable version of this instance.
            </summary>
            <returns>A string representing this instance.</returns>
        </member>
        <member name="T:SharpNav.Region">
            <summary>
            A Region contains a group of adjacent spans.
            </summary>
        </member>
        <member name="M:SharpNav.Region.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Region" /> class.
            </summary>
            <param name="idNum">The id</param>
        </member>
        <member name="P:SharpNav.Region.SpanCount">
            <summary>
            Gets or sets the number of spans
            </summary>
        </member>
        <member name="P:SharpNav.Region.Id">
            <summary>
            Gets or sets the region id 
            </summary>
        </member>
        <member name="P:SharpNav.Region.AreaType">
            <summary>
            Gets or sets the AreaType of this region
            </summary>
        </member>
        <member name="P:SharpNav.Region.Remap">
            <summary>
            Gets or sets a value indicating whether this region has been remapped or not
            </summary>
        </member>
        <member name="P:SharpNav.Region.Visited">
            <summary>
            Gets or sets a value indicating whether this region has been visited or not
            </summary>
        </member>
        <member name="P:SharpNav.Region.FloorRegions">
            <summary>
            Gets the list of floor regions
            </summary>
        </member>
        <member name="P:SharpNav.Region.Connections">
            <summary>
            Gets the list of connected regions
            </summary>
        </member>
        <member name="P:SharpNav.Region.IsBorder">
            <summary>
            Gets a value indicating whether the region is a border region.
            </summary>
        </member>
        <member name="P:SharpNav.Region.IsBorderOrNull">
            <summary>
            Gets a value indicating whether the region is either a border region or the null region.
            </summary>
        </member>
        <member name="M:SharpNav.Region.RemoveAdjacentNeighbors">
            <summary>
            Remove adjacent connections if there is a duplicate
            </summary>
        </member>
        <member name="M:SharpNav.Region.ReplaceNeighbor(SharpNav.RegionId,SharpNav.RegionId)">
            <summary>
            Replace all connection and floor values 
            </summary>
            <param name="oldId">The value you want to replace</param>
            <param name="newId">The new value that will be used</param>
        </member>
        <member name="M:SharpNav.Region.CanMergeWith(SharpNav.Region)">
            <summary>
            Determine whether this region can merge with another region.
            </summary>
            <param name="otherRegion">The other region to merge with</param>
            <returns>True if the two regions can be merged, false if otherwise</returns>
        </member>
        <member name="M:SharpNav.Region.AddUniqueFloorRegion(SharpNav.RegionId)">
            <summary>
            Only add a floor if it hasn't been added already
            </summary>
            <param name="n">The value of the floor</param>
        </member>
        <member name="M:SharpNav.Region.MergeWithRegion(SharpNav.Region)">
            <summary>
            Merge two regions into one. Needs good testing
            </summary>
            <param name="otherRegion">The region to merge with</param>
            <returns>True if merged successfully, false if otherwise</returns>
        </member>
        <member name="M:SharpNav.Region.IsConnectedToBorder">
            <summary>
            Test if region is connected to a border
            </summary>
            <returns>True if connected, false if not</returns>
        </member>
        <member name="T:SharpNav.MathHelper">
            <summary>
            A class where all the small, miscellaneous math functions are stored.
            </summary>
        </member>
        <member name="M:SharpNav.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps an integer value to be within a specified range.
            </summary>
            <param name="val">The value to clamp.</param>
            <param name="min">The inclusive minimum of the range.</param>
            <param name="max">The inclusive maximum of the range.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SharpNav.MathHelper.Clamp(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Clamps an integer value to be within a specified range.
            </summary>
            <param name="val">The value to clamp.</param>
            <param name="min">The inclusive minimum of the range.</param>
            <param name="max">The inclusive maximum of the range.</param>
        </member>
        <member name="M:SharpNav.MathHelper.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Clamps an integer value to be within a specified range.
            </summary>
            <param name="val">The value to clamp.</param>
            <param name="min">The inclusive minimum of the range.</param>
            <param name="max">The inclusive maximum of the range.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SharpNav.MathHelper.Clamp(System.UInt32@,System.UInt32,System.UInt32)">
            <summary>
            Clamps an integer value to be within a specified range.
            </summary>
            <param name="val">The value to clamp.</param>
            <param name="min">The inclusive minimum of the range.</param>
            <param name="max">The inclusive maximum of the range.</param>
        </member>
        <member name="M:SharpNav.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps an integer value to be within a specified range.
            </summary>
            <param name="val">The value to clamp.</param>
            <param name="min">The inclusive minimum of the range.</param>
            <param name="max">The inclusive maximum of the range.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:SharpNav.MathHelper.Clamp(System.Single@,System.Single,System.Single)">
            <summary>
            Clamps an integer value to be within a specified range.
            </summary>
            <param name="val">The value to clamp.</param>
            <param name="min">The inclusive minimum of the range.</param>
            <param name="max">The inclusive maximum of the range.</param>
        </member>
        <member name="M:SharpNav.MathHelper.Normalize(System.Single,System.Single,System.Single)">
            <summary>
            Normalizes a value in a specified range to be between 0 and 1.
            </summary>
            <param name="t">The value</param>
            <param name="t0">The lower bound of the range.</param>
            <param name="t1">The upper bound of the range.</param>
            <returns>A normalized value.</returns>
        </member>
        <member name="M:SharpNav.MathHelper.NextPowerOfTwo(System.Int32)">
            <summary>
            Calculates the next highest power of two.
            </summary>
            <remarks>
            This is a minimal method meant to be fast. There is a known edge case where an input of 0 will output 0
            instead of the mathematically correct value of 1. It will not be fixed.
            </remarks>
            <param name="v">A value.</param>
            <returns>The next power of two after the value.</returns>
        </member>
        <member name="M:SharpNav.MathHelper.NextPowerOfTwo(System.UInt32)">
            <summary>
            Calculates the next highest power of two.
            </summary>
            <remarks>
            This is a minimal method meant to be fast. There is a known edge case where an input of 0 will output 0
            instead of the mathematically correct value of 1. It will not be fixed.
            </remarks>
            <param name="v">A value.</param>
            <returns>The next power of two after the value.</returns>
        </member>
        <member name="M:SharpNav.MathHelper.Log2(System.Int32)">
            <summary>
            Calculates the binary logarithm of the input.
            </summary>
            <remarks>
            Inputs 0 and below have undefined output.
            </remarks>
            <param name="v">A value.</param>
            <returns>The binary logarithm of v.</returns>
        </member>
        <member name="M:SharpNav.MathHelper.Log2(System.UInt32)">
            <summary>
            Calculates the binary logarithm of the input.
            </summary>
            <remarks>
            An input of 0 has an undefined output.
            </remarks>
            <param name="v">A value.</param>
            <returns>The binary logarithm of v.</returns>
        </member>
        <member name="M:SharpNav.MathHelper.ClipPolygonToPlane(SharpNav.Geometry.Vector3[],SharpNav.Geometry.Vector3[],System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Clips a polygon to a plane using the Sutherland-Hodgman algorithm.
            </summary>
            <param name="inVertices">The input array of vertices.</param>
            <param name="outVertices">The output array of vertices.</param>
            <param name="numVerts">The number of vertices to read from the arrays.</param>
            <param name="planeX">The clip plane's X component.</param>
            <param name="planeZ">The clip plane's Z component.</param>
            <param name="planeD">The clip plane's D component.</param>
            <returns>The number of vertices stored in outVertices.</returns>
        </member>
        <member name="M:SharpNav.MathHelper.ClipPolygonToPlane(SharpNav.Geometry.Vector3[],SharpNav.Geometry.Vector3[],System.Single[],System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Clips a polygon to a plane using the Sutherland-Hodgman algorithm.
            </summary>
            <param name="inVertices">The input array of vertices.</param>
            <param name="outVertices">The output array of vertices.</param>
            <param name="distances">A buffer that stores intermediate data</param>
            <param name="numVerts">The number of vertices to read from the arrays.</param>
            <param name="planeX">The clip plane's X component.</param>
            <param name="planeZ">The clip plane's Z component.</param>
            <param name="planeD">The clip plane's D component.</param>
            <returns>The number of vertices stored in outVertices.</returns>
        </member>
        <member name="T:SharpNav.CompactHeightfield">
            <summary>
            A more memory-compact heightfield that stores open spans of voxels instead of closed ones.
            </summary>
        </member>
        <member name="M:SharpNav.CompactHeightfield.#ctor(SharpNav.Heightfield,SharpNav.NavMeshGenerationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.CompactHeightfield"/> class.
            </summary>
            <param name="field">A <see cref="T:SharpNav.Heightfield"/> to build from.</param>
            <param name="settings">The settings to build with.</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.#ctor(SharpNav.Heightfield,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.CompactHeightfield"/> class.
            </summary>
            <param name="field">A <see cref="T:SharpNav.Heightfield"/> to build from.</param>
            <param name="walkableHeight">The maximum difference in height to filter.</param>
            <param name="walkableClimb">The maximum difference in slope to filter.</param>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Width">
            <summary>
            Gets the width of the <see cref="T:SharpNav.CompactHeightfield"/> in voxel units.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Height">
            <summary>
            Gets the height of the <see cref="T:SharpNav.CompactHeightfield"/> in voxel units.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Length">
            <summary>
            Gets the length of the <see cref="T:SharpNav.CompactHeightfield"/> in voxel units.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Bounds">
            <summary>
            Gets the world-space bounding box.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.CellSize">
            <summary>
            Gets the world-space size of a cell in the XZ plane.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.CellHeight">
            <summary>
            Gets the world-space size of a cell in the Y direction.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.MaxDistance">
            <summary>
            Gets the maximum distance to a border based on the distance field. This value is undefined prior to
            calling <see cref="M:SharpNav.CompactHeightfield.BuildDistanceField"/>.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Distances">
            <summary>
            Gets an array of distances from a span to the nearest border. This value is undefined prior to calling
            <see cref="M:SharpNav.CompactHeightfield.BuildDistanceField"/>.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.BorderSize">
            <summary>
            Gets the size of the border.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.MaxRegions">
            <summary>
            Gets the maximum number of allowed regions.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Cells">
            <summary>
            Gets the cells.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Spans">
            <summary>
            Gets the spans.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Areas">
            <summary>
            Gets the area flags.
            </summary>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Item(System.Int32,System.Int32)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:SharpNav.CompactSpan"/> of the spans at a specified coordiante.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:SharpNav.CompactSpan"/>.</returns>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:SharpNav.CompactSpan"/>s at a specified index.
            </summary>
            <param name="i">The index.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:SharpNav.CompactSpan"/>.</returns>
        </member>
        <member name="P:SharpNav.CompactHeightfield.Item(SharpNav.CompactSpanReference)">
            <summary>
            Gets the <see cref="T:SharpNav.CompactSpan"/> specified by the reference.
            </summary>
            <param name="spanRef">A reference to a span in this <see cref="T:SharpNav.CompactHeightfield"/>.</param>
            <returns>The referenced span.</returns>
        </member>
        <member name="M:SharpNav.CompactHeightfield.BuildDistanceField">
            <summary>
            Builds a distance field, or the distance to the nearest unwalkable area.
            </summary>
        </member>
        <member name="M:SharpNav.CompactHeightfield.Erode(System.Int32)">
            <summary>
            Erodes the walkable areas in the map.
            </summary>
            <remarks>
            If you have already called <see cref="M:SharpNav.CompactHeightfield.BuildDistanceField"/>, it will automatically be called again after
            erosion because it needs to be recalculated.
            </remarks>
            <param name="radius">The radius to erode from unwalkable areas.</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.BuildRegions(System.Int32,System.Int32,System.Int32)">
            <summary>
            The central method for building regions, which consists of connected, non-overlapping walkable spans.
            </summary>
            <param name="borderSize">The border size</param>
            <param name="minRegionArea">If smaller than this value, region will be null</param>
            <param name="mergeRegionArea">Reduce unneccesarily small regions</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.AppendStacks(System.Collections.Generic.List{SharpNav.CompactSpanReference},System.Collections.Generic.List{SharpNav.CompactSpanReference},SharpNav.RegionId[])">
            <summary>
            Merge two stacks to get a single stack.
            </summary>
            <param name="source">The original stack</param>
            <param name="destination">The new stack</param>
            <param name="regions">Region ids</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.FilterSmallRegions(SharpNav.RegionId[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Discards regions that are too small. 
            </summary>
            <param name="regionIds">region data</param>
            <param name="minRegionArea">The minimum area a region can have</param>
            <param name="mergeRegionSize">The size of the regions after merging</param>
            <param name="maxRegionId">determines the number of regions available</param>
            <returns>The reduced number of regions.</returns>
        </member>
        <member name="M:SharpNav.CompactHeightfield.CalculateDistanceField(System.Int32[])">
            <summary>
            A distance field estimates how far each span is from its nearest border span. This data is needed for region generation.
            </summary>
            <param name="src">Array of values, each corresponding to an individual span</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.BoxBlur(System.Int32[],System.Int32,System.Int32[])">
            <summary>
            Part of building the distance field. It may or may not return an array equal to src.
            </summary>
            <param name="distances">The original distances.</param>
            <param name="threshold">The distance threshold below which no blurring occurs.</param>
            <param name="buffer">A buffer that is at least the same length as <see cref="F:SharpNav.CompactHeightfield.distances"/> for working memory.</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.ExpandRegions(SharpNav.RegionId[],System.Int32[],System.Int32,System.Int32,System.Collections.Generic.List{SharpNav.CompactSpanReference},SharpNav.RegionId[],System.Int32[])">
            <summary>
            Expands regions to include spans above a specified water level.
            </summary>
            <param name="regions">The array of region IDs.</param>
            <param name="floodDistances">The array of flooding distances.</param>
            <param name="maxIterations">The maximum number of allowed iterations before breaking.</param>
            <param name="level">The current water level.</param>
            <param name="stack">A stack of span references that are being expanded.</param>
            <param name="regionBuffer">A buffer to store region IDs. Must be at least the same size as <c>regions</c>.</param>
            <param name="distanceBuffer">A buffer to store flood distances. Must be at least the same size as <c>floodDistances</c>.</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.FloodRegion(SharpNav.RegionId[],System.Int32[],System.Int32,System.Int32,SharpNav.CompactSpanReference@)">
            <summary>
            Floods the regions at a certain level
            </summary>
            <param name="regions">source region</param>
            <param name="floodDistances">source distances</param>
            <param name="regionIndex">region id</param>
            <param name="level">current level</param>
            <param name="start">A reference to the starting span.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:SharpNav.CompactHeightfield.IsSolidEdge(SharpNav.RegionId[],SharpNav.CompactSpanReference@,SharpNav.Direction)">
            <summary>
            Checks whether the edge from a span in a direction is a solid edge.
            A solid edge is an edge between two regions.
            </summary>
            <param name="regions">The region ID array.</param>
            <param name="spanRef">A reference to the span connected to the edge.</param>
            <param name="dir">The direction of the edge.</param>
            <returns>A value indicating whether the described edge is solid.</returns>
        </member>
        <member name="M:SharpNav.CompactHeightfield.WalkContour(SharpNav.RegionId[],SharpNav.CompactSpanReference,SharpNav.Direction,System.Collections.Generic.List{SharpNav.RegionId})">
            <summary>
            Try to visit all the spans. May be needed in filtering small regions. 
            </summary>
            <param name="regions">an array of region values</param>
            <param name="spanRef">The span to start walking from.</param>
            <param name="dir">The direction to start walking in.</param>
            <param name="cont">A collection of regions to append to.</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.FillRectangleRegion(SharpNav.RegionId[],SharpNav.RegionId,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fill in a rectangular area with a region ID. Spans in a null area are skipped.
            </summary>
            <param name="regions">The region ID array.</param>
            <param name="newRegionId">The ID to fill in.</param>
            <param name="left">The left edge of the rectangle.</param>
            <param name="right">The right edge of the rectangle.</param>
            <param name="bottom">The bottom edge of the rectangle.</param>
            <param name="top">The top edge of the rectangle.</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.SortCellsByLevel(SharpNav.RegionId[],System.Collections.Generic.List{SharpNav.CompactSpanReference}[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sort the compact spans
            </summary>
            <param name="regions">Region data</param>
            <param name="stacks">Temporary stack of CompactSpanReference values</param>
            <param name="startlevel">Starting level</param>
            <param name="numStacks">The number of layers</param>
            <param name="logLevelsPerStack">log base 2 of stack levels</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.BuildContourSet(SharpNav.NavMeshGenerationSettings)">
            <summary>
            Builds a set of <see cref="T:SharpNav.Contour"/>s around the generated regions. Must be called after regions are generated.
            </summary>
            <param name="settings">Settings for building the <see cref="T:SharpNav.ContourSet"/>.</param>
            <returns>A <see cref="T:SharpNav.ContourSet"/> containing one contour per region.</returns>
        </member>
        <member name="M:SharpNav.CompactHeightfield.BuildContourSet(System.Single,System.Int32,SharpNav.ContourBuildFlags)">
            <summary>
            Builds a set of <see cref="T:SharpNav.Contour"/>s around the generated regions. Must be called after regions are generated.
            </summary>
            <param name="maxError">The maximum allowed deviation in a simplified contour from a raw one.</param>
            <param name="maxEdgeLength">The maximum edge length.</param>
            <param name="buildFlags">Flags that change settings for the build process.</param>
            <returns>A <see cref="T:SharpNav.ContourSet"/> containing one contour per region.</returns>
        </member>
        <member name="M:SharpNav.CompactHeightfield.WalkContour(SharpNav.CompactSpanReference,SharpNav.EdgeFlags[],System.Collections.Generic.List{SharpNav.ContourVertex})">
            <summary>
            Initial generation of the contours
            </summary>
            <param name="spanReference">A referecne to the span to start walking from.</param>
            <param name="flags">An array of flags determinining </param>
            <param name="points">The vertices of a contour.</param>
        </member>
        <member name="M:SharpNav.CompactHeightfield.GetCornerHeight(SharpNav.CompactSpanReference,SharpNav.Direction,System.Boolean@)">
            <summary>
            Helper method for WalkContour function
            </summary>
            <param name="sr">The span to get the corner height for.</param>
            <param name="dir">The direction to get the corner height from.</param>
            <param name="isBorderVertex">Determine whether the vertex is a border or not.</param>
            <returns>The corner height.</returns>
        </member>
        <member name="T:SharpNav.Span">
            <summary>
            A span is a range of integers which represents a range of voxels in a <see cref="T:SharpNav.Cell"/>.
            </summary>
        </member>
        <member name="F:SharpNav.Span.Minimum">
            <summary>
            The lowest value in the span.
            </summary>
        </member>
        <member name="F:SharpNav.Span.Maximum">
            <summary>
            The highest value in the span.
            </summary>
        </member>
        <member name="F:SharpNav.Span.Area">
            <summary>
            The span area id
            </summary>
        </member>
        <member name="M:SharpNav.Span.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Span"/> struct.
            </summary>
            <param name="min">The lowest value in the span.</param>
            <param name="max">The highest value in the span.</param>
        </member>
        <member name="M:SharpNav.Span.#ctor(System.Int32,System.Int32,SharpNav.Area)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.Span"/> struct.
            </summary>
            <param name="min">The lowest value in the span.</param>
            <param name="max">The highest value in the span.</param>
            <param name="area">The area flags for the span.</param>
        </member>
        <member name="P:SharpNav.Span.Height">
            <summary>
            Gets the height of the span.
            </summary>
        </member>
        <member name="T:SharpNav.SpanReference">
            <summary>
            References a <see cref="T:SharpNav.Span"/> within a <see cref="T:SharpNav.Heightfield"/>.
            </summary>
        </member>
        <member name="M:SharpNav.SpanReference.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.SpanReference"/> struct.
            </summary>
            <param name="x">The X coordinate of the <see cref="T:SharpNav.Cell"/> the <see cref="T:SharpNav.Span"/> is contained in.</param>
            <param name="y">The Y coordinate of the <see cref="T:SharpNav.Cell"/> the <see cref="T:SharpNav.Span"/> is contained in.</param>
            <param name="i">The index of the <see cref="T:SharpNav.Span"/> within the specified <see cref="T:SharpNav.Cell"/>.</param>
        </member>
        <member name="P:SharpNav.SpanReference.X">
            <summary>
            Gets the X coordinate of the <see cref="T:SharpNav.Cell"/> that contains the referenced <see cref="T:SharpNav.Span"/>.
            </summary>
        </member>
        <member name="P:SharpNav.SpanReference.Y">
            <summary>
            Gets the Y coordinate of the <see cref="T:SharpNav.Cell"/> that contains the referenced <see cref="T:SharpNav.Span"/>.
            </summary>
        </member>
        <member name="P:SharpNav.SpanReference.Index">
            <summary>
            Gets the index of the <see cref="T:SharpNav.Span"/> within the <see cref="T:SharpNav.Cell"/> it is contained in.
            </summary>
        </member>
        <member name="T:SharpNav.TiledNavMesh">
            <summary>
            A TiledNavMesh is a continuous region, which is used for pathfinding. 
            </summary>
        </member>
        <member name="M:SharpNav.TiledNavMesh.#ctor(SharpNav.NavMeshBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpNav.TiledNavMesh"/> class.
            </summary>
            <param name="data">The Navigation Mesh data</param>
        </member>
        <member name="P:SharpNav.TiledNavMesh.TileCount">
            <summary>
            Gets the maximum number of tiles that can be stored
            </summary>
        </member>
        <member name="P:SharpNav.TiledNavMesh.Item(SharpNav.Geometry.Vector2i)">
            <summary>
            Gets the mesh tile at a specified index.
            </summary>
            <param name="index">The index referencing a tile.</param>
            <returns>The tile at the index.</returns>
        </member>
        <member name="P:SharpNav.TiledNavMesh.Tag">
            <summary>
            Gets or sets user data for this navmesh.
            </summary>
        </member>
        <member name="M:SharpNav.TiledNavMesh.AddTile(SharpNav.NavMeshBuilder)">
            <summary>
            Build a tile and link all the polygons togther, both internally and externally.
            Make sure to link off-mesh connections as well.
            </summary>
            <param name="data">Navigation Mesh data</param>
            <param name="lastRef">Last polygon reference</param>
            <param name="result">Last tile reference</param>
        </member>
        <member name="M:SharpNav.TiledNavMesh.GetOffMeshConnectionPolyEndPoints(SharpNav.Pathfinding.NavPolyId,SharpNav.Pathfinding.NavPolyId,SharpNav.Geometry.Vector3@,SharpNav.Geometry.Vector3@)">
            <summary>
            Retrieve the endpoints of the offmesh connection at the specified polygon
            </summary>
            <param name="prevRef">The previous polygon reference</param>
            <param name="polyRef">The current polygon reference</param>
            <param name="startPos">The starting position</param>
            <param name="endPos">The ending position</param>
            <returns>True if endpoints found, false if not</returns>
        </member>
        <member name="M:SharpNav.TiledNavMesh.GetTileRef(SharpNav.Pathfinding.NavTile)">
            <summary>
            Get the tile reference
            </summary>
            <param name="tile">Tile to look for</param>
            <returns>Tile reference</returns>
        </member>
        <member name="M:SharpNav.TiledNavMesh.GetTileAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the tile at a specific location.
            </summary>
            <param name="x">The X coordinate of the tile.</param>
            <param name="y">The Y coordinate of the tile.</param>
            <param name="layer">The layer of the tile.</param>
            <returns>The MeshTile at the specified location.</returns>
        </member>
        <member name="M:SharpNav.TiledNavMesh.GetTileAt(SharpNav.Geometry.Vector2i,System.Int32)">
            <summary>
            Find the tile at a specific location.
            </summary>
            <param name="location">The (X, Y) coordinate of the tile.</param>
            <param name="layer">The layer of the tile.</param>
            <returns>The MeshTile at the specified location.</returns>
        </member>
        <member name="M:SharpNav.TiledNavMesh.GetTilesAt(System.Int32,System.Int32)">
            <summary>
            Find and add a tile if it is found
            </summary>
            <param name="x">The x-coordinate</param>
            <param name="y">The y-coordinate</param>
            <returns>A read-only collection of tiles at the specified coordinate</returns>
        </member>
        <member name="M:SharpNav.TiledNavMesh.GetNeighborTilesAt(System.Int32,System.Int32,SharpNav.Pathfinding.BoundarySide)">
            <summary>
            Gets the neighboring tile at that position
            </summary>
            <param name="x">The x-coordinate</param>
            <param name="y">The y-coordinate</param>
            <param name="side">The side value</param>
            <param name="tiles">An array of MeshTiles</param>
            <returns>The number of tiles satisfying the condition</returns>
        </member>
        <member name="M:SharpNav.TiledNavMesh.TryGetTileAndPolyByRef(SharpNav.Pathfinding.NavPolyId,SharpNav.Pathfinding.NavTile@,SharpNav.Pathfinding.NavPoly@)">
            <summary>
            Retrieve the tile and poly based off of a polygon reference
            </summary>
            <param name="reference">Polygon reference</param>
            <param name="tile">Resulting tile</param>
            <param name="poly">Resulting poly</param>
            <returns>True if tile and poly successfully retrieved</returns>
        </member>
        <member name="M:SharpNav.TiledNavMesh.TryGetTileAndPolyByRefUnsafe(SharpNav.Pathfinding.NavPolyId,SharpNav.Pathfinding.NavTile@,SharpNav.Pathfinding.NavPoly@)">
            <summary>
            Only use this function if it is known that the provided polygon reference is valid.
            </summary>
            <param name="reference">Polygon reference</param>
            <param name="tile">Resulting tile</param>
            <param name="poly">Resulting poly</param>
        </member>
        <member name="M:SharpNav.TiledNavMesh.IsValidPolyRef(SharpNav.Pathfinding.NavPolyId)">
            <summary>
            Check if polygon reference is valid.
            </summary>
            <param name="reference">Polygon reference</param>
            <returns>True if valid</returns>
        </member>
        <member name="M:SharpNav.TiledNavMesh.CalcTileLoc(SharpNav.Geometry.Vector3@,System.Int32@,System.Int32@)">
            <summary>
            Calculates the tile location.
            </summary>
            <param name="pos">The position</param>
            <param name="tx">The tile's x-coordinate</param>
            <param name="ty">The tile's y-coordinate</param>
        </member>
    </members>
</doc>
