// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace syncnet
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SetRaycast : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetRaycast GetRootAsSetRaycast(ByteBuffer _bb) { return GetRootAsSetRaycast(_bb, new SetRaycast()); }
  public static SetRaycast GetRootAsSetRaycast(ByteBuffer _bb, SetRaycast obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetRaycast __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int AgentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public syncnet.Vec3? Pos { get { int o = __p.__offset(6); return o != 0 ? (syncnet.Vec3?)(new syncnet.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartSetRaycast(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAgentId(FlatBufferBuilder builder, int agentId) { builder.AddInt(0, agentId, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<syncnet.Vec3> posOffset) { builder.AddStruct(1, posOffset.Value, 0); }
  public static Offset<syncnet.SetRaycast> EndSetRaycast(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<syncnet.SetRaycast>(o);
  }
};


}
