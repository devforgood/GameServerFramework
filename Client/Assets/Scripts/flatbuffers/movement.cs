// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace syncnet
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct movement : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static movement GetRootAsmovement(ByteBuffer _bb) { return GetRootAsmovement(_bb, new movement()); }
  public static movement GetRootAsmovement(ByteBuffer _bb, movement obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public movement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public syncnet.vec3? Dir { get { int o = __p.__offset(4); return o != 0 ? (syncnet.vec3?)(new syncnet.vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float ElapsedTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void Startmovement(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDir(FlatBufferBuilder builder, Offset<syncnet.vec3> dirOffset) { builder.AddStruct(0, dirOffset.Value, 0); }
  public static void AddElapsedTime(FlatBufferBuilder builder, float elapsedTime) { builder.AddFloat(1, elapsedTime, 0.0f); }
  public static Offset<syncnet.movement> Endmovement(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<syncnet.movement>(o);
  }
};


}
