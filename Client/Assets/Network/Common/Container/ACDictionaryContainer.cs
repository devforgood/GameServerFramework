
using System.Collections.Generic;

public class ACDictionaryContainer<TKEY, TCONTAINER> : Dictionary<TKEY, TCONTAINER>
{
	/// V A R I A B L E
	private		const	int		CAPACITY	= 10;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// ACDictionaryContainer()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//		생성자
	//		Capacity를 기본값으로 셋팅함
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public ACDictionaryContainer() : base( CAPACITY ) {}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Add()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//		레벨 오브젝트 추가
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public new void Add( TKEY key, TCONTAINER item )
	{
		//ACDebug.Assert( base.ContainsKey( key ) == false, EACError.AC_ALREADY_EXIST_KEY );

		base.Add( key, item );

		OnAdd( key, item );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// OnAdd()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected virtual void OnAdd( TKEY key, TCONTAINER container ) {}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Remove()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//		사용 금지
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public new void Remove( TKEY key )
	{
		//ACDebug.Assert( base.ContainsKey( key ) != false, EACError.AC_NOT_EXIST_KEY );

		base.Remove( key );

		OnRemove( key );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// OnRemove()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected virtual void OnRemove( TKEY key ) {}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Clear()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public new void Clear()
	{
		base.Clear();

		OnClear();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// OnClear()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected virtual void OnClear() {}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Destroy()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public void Destroy()
	{
		Shutdown();
		this.Clear();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Shutdown()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected virtual void Shutdown()
	{
	}
}