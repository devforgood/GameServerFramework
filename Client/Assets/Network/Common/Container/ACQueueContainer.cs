
using System.Collections.Generic;

public abstract class ACQueueContainer<TCONTAINER> : Queue<TCONTAINER>
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// ACQueueContainer()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//		생성자
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public ACQueueContainer( int nCapacity ) : base( nCapacity ) {}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Add()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public new void Enqueue( TCONTAINER item )
	{
		base.Enqueue( item );

		OnEnqueue( item );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// OnEnqueue()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected abstract void OnEnqueue( TCONTAINER item );

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Dequeue()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public new TCONTAINER Dequeue()
	{
		TCONTAINER		a_container		= base.Dequeue();

		OnDequeue();

		return a_container;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// OnRemove()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected abstract void OnDequeue();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Clear()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public new void Clear()
	{
		base.Clear();

		OnClear();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// OnClear()
	//--------------------------------------------------------------------------------------------------
	//	Desc.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected abstract void OnClear();
}