{% if include_header %}
#include "{{ table.file_name }}.h"
{% else %}


// ----------------------------------------
{% endif %}

{{ class_name }}::{{ class_name }}(sql::Connection* conn)
    : conn_(conn) {}

void {{ class_name }}::Insert() {
    try {
        std::unique_ptr<sql::PreparedStatement> stmt(
            conn_->prepareStatement("INSERT INTO {{ table.name }} ({% for col in table.columns if not col.auto_increment %}{{ col.name }}{% if not loop.last %}, {% endif %}{% endfor %}) VALUES ({% for col in table.columns if not col.auto_increment %}?{% if not loop.last %}, {% endif %}{% endfor %})")
        );

        {% for col in table.columns if not col.auto_increment %}
        stmt->set{{ col.cpp_set_func }}({{ loop.index }}, {{ col.name }});
        {% endfor %}

        stmt->execute();
    }
    catch (const sql::SQLException& e) {
        throw std::runtime_error(std::string("SQL error: ") + e.what());
    }
    catch (const std::exception& e) {
        throw std::runtime_error(std::string("error: ") + e.what());
    }
}

void {{ class_name }}::Update() {
    try {
        std::unique_ptr<sql::PreparedStatement> stmt(
            conn_->prepareStatement("UPDATE {{ table.name }} SET {% for col in table.columns if col.name != table.primary_key.name and not col.auto_increment %}{{ col.name }} = ?{% if not loop.last %}, {% endif %}{% endfor %} WHERE {{ table.primary_key.name }} = ?")
        );

        {% for col in table.columns if col.name != table.primary_key.name and not col.auto_increment %}
        stmt->set{{ col.cpp_set_func }}({{ loop.index }}, {{ col.name }});
        {% endfor %}
        stmt->set{{ table.primary_key.cpp_set_func }}({{ table.columns | length }}, {{ table.primary_key.name }});

        stmt->execute();
    }
    catch (const sql::SQLException& e) {
        throw std::runtime_error(std::string("SQL error: ") + e.what());
    }
    catch (const std::exception& e) {
        throw std::runtime_error(std::string("error: ") + e.what());
    }
}

void {{ class_name }}::Delete() {
    try {
        std::unique_ptr<sql::PreparedStatement> stmt(
            conn_->prepareStatement("DELETE FROM {{ table.name }} WHERE {{ table.primary_key.name }} = ?")
        );

        stmt->set{{ table.primary_key.cpp_set_func }}(1, {{ table.primary_key.name }});
        stmt->execute();
    }
    catch (const sql::SQLException& e) {
        throw std::runtime_error(std::string("SQL error: ") + e.what());
    }
    catch (const std::exception& e) {
        throw std::runtime_error(std::string("error: ") + e.what());
    }
}

bool {{ class_name }}::Select({{ table.primary_key.cpp_type }} {{ table.primary_key.name }}) {
    try {
        std::unique_ptr<sql::PreparedStatement> stmt(
            conn_->prepareStatement("SELECT {% for col in table.columns %}{{ col.name }}{% if not loop.last %}, {% endif %}{% endfor %} FROM {{ table.name }} WHERE {{ table.primary_key.name }} = ?")
        );

        stmt->set{{ table.primary_key.cpp_set_func }}(1, {{ table.primary_key.name }});

        std::unique_ptr<sql::ResultSet> res(stmt->executeQuery());
        if (res->next()) {
            {% for col in table.columns %}
            this->{{ col.name }} = res->get{{ col.cpp_set_func }}("{{ col.name }}");
            {% endfor %}
        } else {
            return false;
        }
    }
    catch (const sql::SQLException& e) {
        throw std::runtime_error(std::string("SQL error: ") + e.what());
    }
    catch (const std::exception& e) {
        throw std::runtime_error(std::string("error: ") + e.what());
    }
    return true;
}

{% if table.indexes %}
std::vector<{{ class_name }}> {{ class_name }}::SelectByIndex({% for index in table.indexes[0] %}{{ table.columns | selectattr("name", "equalto", index) | map(attribute="cpp_type") | first }} {{ index }}{% if not loop.last %}, {% endif %}{% endfor %}) {
    try {
        std::unique_ptr<sql::PreparedStatement> stmt(
            conn_->prepareStatement("SELECT {% for col in table.columns %}{{ col.name }}{% if not loop.last %}, {% endif %}{% endfor %} FROM {{ table.name }} WHERE {% for index in table.indexes[0] %}{{ index }} = ?{% if not loop.last %} AND {% endif %}{% endfor %}")
        );

        {% for index in table.indexes[0] %}
        stmt->set{{ table.columns | selectattr("name", "equalto", index) | map(attribute="cpp_set_func") | first }}({{ loop.index }}, {{ index }});
        {% endfor %}

        std::unique_ptr<sql::ResultSet> res(stmt->executeQuery());
        std::vector<{{ class_name }}> results;
        while (res->next()) {
            {{ class_name }} obj(conn_);
            {% for col in table.columns %}
            obj.{{ col.name }} = res->get{{ col.cpp_set_func }}("{{ col.name }}");
            {% endfor %}
            results.push_back(obj);
        }
        return results;
    }
    catch (const sql::SQLException& e) {
        throw std::runtime_error(std::string("SQL error: ") + e.what());
    }
    catch (const std::exception& e) {
        throw std::runtime_error(std::string("error: ") + e.what());
    }
    return std::vector<{{ class_name }}>();
}
{% endif %}
